/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef DEM_TYPES_H
#define DEM_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#include "NvM.h"
#include "FiM.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
// TODO: following unknown types
typedef int Dem_ExternalCSDataElementClassType;
typedef int Dem_ExternalSRDataElementClassType;
typedef int Dem_InternalDataElementClassType;

/* Function name of prototype "InitMonitorForFunction". */
/* TODO: */
typedef void (*Dem_CallbackInitMForFFncType)(void);


/* The presence of this container indicates, that the Dem has access to an "InitMonitorForFunction"
 *  callback, which the Dem will call to initialize a monitor.
 */
typedef struct Dem_CallbackInitMForFType_tag
{
	Dem_CallbackInitMForFFncType DemCallbackInitMForFFnc ;
} Dem_CallbackInitMForFType ;

/* DTC severity */
typedef enum
{
	DEM_DTC_SEV_CHECK_AT_NEXT_HALT,
	DEM_DTC_SEV_IMMEDIATELY,
	DEM_DTC_SEV_MAINTENANCE_ONLY,
	DEM_DTC_SEV_NO_SEVERITY
} Dem_DTCSeverityType ;

/* This container contains the configuration (parameters) for DTCClass. */
typedef struct Dem_DTCClassType_tag
{
/* In case the container has a DemCallbackInitMForFFnc, this parameter defines the name of the
 *  function that the Dem will call. 
 * 
 *                                                 In case there is no DemCallbackInitMForFFnc,
 *  the Dem will have an R-Port requiring the interface CallbackInitMonitorForFunction, whose name
 *  is generated by using the unique callback-prefix followed by the event name.
 */
	Dem_CallbackInitMForFType* DemCallbackInitMForF ;
/* DTCFuncitonalUnit is a 1-byte value which identifies the corresponding basic vehicle / system
 *  function which reports the DTC. This parameter is necessary for the report of severity informations.
 */
	uint8 DemDTCFunctionalUnit ;
/* This parameter depends on automotive manufacturer and is optional. */
	Dem_DTCSeverityType DemDTCSeverity ;
/* true: immediate non-volatile storage triggering enabled 
 *                                                 false: immediate non-volatile storage triggering
 *  disabled
 */
/* Switch to enable immediate storage triggering of an according event memory entriy persistently
 *  to NVRAM.
 */
	boolean DemImmediateNvStorage ;
/* Unique Diagnostic Trouble Code value for OBD */
	uint16 DemObdDTC ;
/* (Range: 0x000000 and 0xFFFFFF are reserved for DTC groups by ISO 14229-1) */
/* Unique Diagnostic Trouble Code value for UDS */
	uint32 DemUdsDTC ;
} Dem_DTCClassType ;

/* Function name of prototype "ClearEventAllowed". */
/* TODO: */
typedef void (*Dem_CallbackClearEventAllowedFncType)(void);


/* The presence of this container indicates that the Dem has access to a "ClearEventAllowed" callback.
 */
typedef struct Dem_CallbackClearEventAllowedType_tag
{
	Dem_CallbackClearEventAllowedFncType DemCallbackClearEventAllowedFnc ;
} Dem_CallbackClearEventAllowedType ;

/* Function name of prototype "EventDataChanged" */
/* TODO: */
typedef void (*Dem_CallbackEventDataChangedFncType)(void);

/* The presence of this container indicates that the Dem has access to an "EventDataChanged" callback.
 */
typedef struct Dem_CallbackEventDataChangedType_tag
{
	Dem_CallbackEventDataChangedFncType DemCallbackEventDataChangedFnc ;
} Dem_CallbackEventDataChangedType ;

/* Function name of prototype "EventStatusChanged" */
/* TODO:  */
typedef void (*Dem_CallbackEventStatusChangedFncType)(void);

/* The presence of this container indicates, that the Dem has access to an "EventStatusChanged"
 *  callback, which the Dem will call to notify other components about the change in the status
 *  of an event.
 */
typedef struct Dem_CallbackEventStatusChangedType_tag
{
	Dem_CallbackEventStatusChangedFncType DemCallbackEventStatusChangedFnc ;
} Dem_CallbackEventStatusChangedType ;

/* Function name of prototype "InitMonitorForEvent". */
/* TODO:  */
typedef void (*Dem_CallbackInitMForEFncType)(void);

/* The presence of this container indicates, that the Dem has access to an "InitMonitorForEvent"
 *  callback, which the Dem will call to initialize a monitor.
 */
typedef struct Dem_CallbackInitMForEType_tag
{
	Dem_CallbackInitMForEFncType DemCallbackInitMForEFnc ;
} Dem_CallbackInitMForEType ;

/* Debounce algorithm class: counter based, time based, or monitor internal. */
typedef struct Dem_DebounceAlgorithmClassType_tag
{
} Dem_DebounceAlgorithmClassType ;

/* Behaviour of the linked indicator */
typedef enum
{
	DEM_INDICATOR_BLINKING,
	DEM_INDICATOR_BLINK_CONT,
	DEM_INDICATOR_CONTINUOUS
} Dem_IndicatorBehaviourType ;

/* This parameter defines, which failure cycle is used for the WarningIndicatorOnCriteria handling. */
typedef enum
{
	DEM_FAILURE_CYCLE_EVENT,
	DEM_FAILURE_CYCLE_INDICATOR
} Dem_IndicatorFailureCycleSourceType ;

/* This container contains the event specific configuration of Indicators. */
typedef struct Dem_IndicatorAttributeType_tag
{
	Dem_IndicatorBehaviourType DemIndicatorBehaviour ;
/* Defines the number of failure cycles for the WarningIndicatorOnCriteria. */
	uint8 DemIndicatorFailureCycleCounterThreshold ;
	Dem_IndicatorFailureCycleSourceType DemIndicatorFailureCycleSource ;
/* Defines the number of healing cycles for the WarningIndicatorOffCriteria. */
	uint8 DemIndicatorHealingCycleCounterThreshold ;
/* Kind of failure cycle for the indicator controlled by the according event used for the WarningIndicatorOnCriteria.
 */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemOperationCycle */
    struct Dem_OperationCycleType_tag* DemIndicatorFailureCycleRef ;
/* Kind of healing cycle for the indicator controlled by the according event used for the WarningIndicatorOffCriteria.
 */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemOperationCycle */
    struct Dem_OperationCycleType_tag* DemIndicatorHealingCycleRef ;
/* Reference to the used indicator. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemIndicator */
    struct Dem_IndicatorType_tag* DemIndicatorRef ;
} Dem_IndicatorAttributeType ;

/* The event destination assigns events to none, one or multiple origins. */
typedef enum
{
	DEM_DTC_ORIGIN_MIRROR_MEMORY,
	DEM_DTC_ORIGIN_PRIMARY_MEMORY,
	DEM_DTC_ORIGIN_SECONDARY_MEMORY
} Dem_EventDestinationType ;

/* This parameter specifies the Event OBD Readiness group for PID $01 and PID $41 computation. */
typedef enum
{
	DEM_OBD_RDY_AC,
	DEM_OBD_RDY_BOOSTPR,
	DEM_OBD_RDY_CAT,
	DEM_OBD_RDY_CMPRCMPT,
	DEM_OBD_RDY_EGSENS,
	DEM_OBD_RDY_ERG,
	DEM_OBD_RDY_EVAP,
	DEM_OBD_RDY_FLSYS,
	DEM_OBD_RDY_HCCAT,
	DEM_OBD_RDY_HTCAT,
	DEM_OBD_RDY_MISF,
	DEM_OBD_RDY_NONE,
	DEM_OBD_RDY_NOXCAT,
	DEM_OBD_RDY_O2SENS,
	DEM_OBD_RDY_O2SENSHT,
	DEM_OBD_RDY_PMFLT,
	DEM_OBD_RDY_SECAIR
} Dem_EventOBDReadinessGroupType ;

/* Significance of the event, which indicates additional information concerning fault classification
 *  and resolution.
 */
typedef enum
{
	DEM_EVENT_SIGNIFICANCE_FAULT,
	DEM_EVENT_SIGNIFICANCE_OCCURRENCE
} Dem_EventSignificanceType ;

/* This container contains the configuaration (parameters) for EventClass */
typedef struct Dem_EventClassType_tag
{
	Dem_DebounceAlgorithmClassType* DemDebounceAlgorithmClass ;
	Dem_IndicatorAttributeType* DemIndicatorAttribute ;
/* true: aging allowed
 *                                                         false: aging not allowed
 */
/* Switch to allow aging/unlearning of the event or not. */
	boolean DemAgingAllowed ;
/* Number ot aging cycles needed to unlearn/delete the event. */
	uint16 DemAgingCycleCounterThreshold ;
/* This parameter is TRUE, when the event is affected by the Dem PTO handling. */
	boolean DemConsiderPtoStatus ;
/* If no event destination is assigned to a specific event, the event is handled internally and
 *  is not visible externally to the Dcm.
 *                                                         If more than one event destination is
 *  assigned to a specific event, the event can be present in the corresponding origins.
 */
	Dem_EventDestinationType DemEventDestination ;
/* Defines the number of failure cycles for the event based fault confirmation. */
	uint16 DemEventFailureCycleCounterThreshold ;
/* This parameter is only applicable for emission-related ECUs. */
	Dem_EventOBDReadinessGroupType DemEventOBDReadinessGroup ;
/* Priority of the event, in view of full event buffer. */
	uint16 DemEventPriority ;
/* It can be mapped as Dem-internal data element. It shall be configured, if it is a part of event
 *  related data.
 */
	Dem_EventSignificanceType DemEventSignificance ;
/* If this parameter is set to true, then the Prestorage of FreezeFrames is supported by the assigned
 *  event. This parameter is useful to calculate the buffer size.
 */
	boolean DemFFPrestorageSupported ;
/* Reference to the cycle which is triggering the aging of the event. This can either be the same
 *  as the operation cycle of the event, or a separate aging cycle reported via API Dem_SetAgingCycleState.
 *  If external aging is configured (refer to DemAgingCycleCounterProcessing), this parameter is
 *  not used.
 */
	uint8 DemAgingCycleRefWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemAgingCycle */
        struct Dem_AgingCycleType_tag* DemAgingCycle;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemOperationCycle */
        struct Dem_OperationCycleType_tag* DemOperationCycle;
	} DemAgingCycleRef ;
/* References an enable condition group. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemEnableConditionGroup */
    struct Dem_EnableConditionGroupTyp_tage* DemEnableConditionGroupRef ;
/* Kind of failure cycle for the event based fault confirmation. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemOperationCycle */
    struct Dem_OperationCycleType_tag* DemEventFailureCycleRef ;
/* Kind of operation cycle for the event (e.g. power cycle, driving cycle, ...) */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemOperationCycle */
    struct Dem_OperationCycleType_tag* DemOperationCycleRef ;
/* References a storage condition group. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemStorageConditionGroup */
    struct Dem_StorageConditionGroupType_tag* DemStorageConditionGroupRef ;
} Dem_EventClassType ;

/* This parameter is used to distinguish between SW-C and BSW events. SW-C events are reported
 *  by Dem_SetEventStatus API and BSW events are reported by Dem_ReportErrorStatus API.
 */
typedef enum
{
	DEM_EVENT_KIND_BSW,
	DEM_EVENT_KIND_SWC
} Dem_EventKindType ;

/* This container contains the configuaration (parameters) for events. */
typedef struct Dem_EventParameterType_tag
{
/* In case there is a DemCallbackClearEventAllowedFnc, this parameter defines the name of the function
 *  that the Dem will call. 
 * 
 *                                                 In case there is no DemCallbackClearEventAllowedFnc,
 *  the Dem will have an R-Port requiring the interface CallbackClearEventAllowed whose name is
 *  generated by using the unique callback-prefix followed by the event name.
 */
	Dem_CallbackClearEventAllowedType* DemCallbackClearEventAllowed ;
/* In case there is a DemCallbackEventDataChangedFnc, this parameter defines the name of the function
 *  that the Dem will call. 
 * 
 *                                                 In case there is no DemCallbackEventDataChangedFnc,
 *  the Dem will have an R-Port requiring the interface CallbackEventDataChanged whose name is
 *  generated by using the unique callback-prefix followed by the event name.
 */
	Dem_CallbackEventDataChangedType* DemCallbackEventDataChanged ;
/* In case there is a DemCallbackEvenStatusChangedFnc, this parameter defines the name of the function
 *  that the Dem will call. 
 * 
 *                                                 In case there is no DemCallbackEvenStatusChangedFnc,
 *  the Dem will have an R-Port requiring the interface CallbackEventStatusChanged, whose name
 *  is generated by using the unique callback-prefix followed by the event name.
 */
	Dem_CallbackEventStatusChangedType* DemCallbackEventStatusChanged ;
/* In case the container has a DemCallbackInitMForEFnc, this parameter defines the name of the
 *  function that the Dem will call. 
 * 
 *                                                 In case there is no DemCallbackInitMForEFnc,
 *  the Dem will have an R-Port requiring the interface CallbackInitMonitorForEvent, whose name
 *  is generated by using the unique callback-prefix followed by the event name.
 */
	Dem_CallbackInitMForEType* DemCallbackInitMForE ;
	Dem_EventClassType* DemEventClass ;
/* This parameter should not be changeable by user, because the Id should be generated by Dem itself
 *  to prevent gaps and multiple use of an Id. The events should be sequentially ordered beginning
 *  with 1 and no gaps in between.
 */
/* Unique identifier of a diagnostic event. */
	uint16 DemEventId ;
	Dem_EventKindType DemEventKind ;
/* This parameter is only required for calculated record numeration (refer to DemTypeOfFreezeFrameRecordNumeration).
 */
/* This parameter defines the number of according freeze frame records, which can maximal be stored
 *  for this event. Therefore all these freeze frame records have the same freeze frame class.
 */
	uint8 DemMaxNumberFreezeFrameRecords ;
/* This parameter defines the DTC configuration associated with the diagnostic event. */
/* It is allowed to have events without a DTC (e.g. for ECU-internal events triggering safety reactions
 *  without being reported via diagnostic communication). The same DemDTCClass can be used from
 *  several events, to combine these (refer to chapter "Combination of diagonstic event").
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemDTCClass */
	Dem_DTCClassType* DemDTCClassRef ;
/* This reference defines the link to an extended data class sampler. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemExtendedDataClass */
    struct Dem_ExtendedDataClassType_tag* DemExtendedDataClassRef ;
/* These references define the links to a freeze frame class sampler. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemFreezeFrameClass */
    struct Dem_FreezeFrameClassType_tag* DemFreezeFrameClassRef ;
/* This parameter defines the list of dedicated freeze frame record numbers associated with the
 *  diagnostic event. These record numbers are assigned to the freeze frame records (instead of
 *  calculated record numbers).
 */
/* This parameter is only required for configured record numeration (refer to DemTypeOfFreezeFrameRecordNumeration).
 */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemFreezeFrameRecNumClass */
    struct Dem_FreezeFrameRecNumClassType_tag* DemFreezeFrameRecNumClassRef ;
} Dem_EventParameterType ;

/* This container contains the different data elements contained in the specific PID. */
typedef struct Dem_PidDataElementType_tag
{
/* This reference contains the link to a data element class. */
	uint8 DemPidDataElementClassRefWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemInternalDataElementClass */
		Dem_InternalDataElementClassType* DemInternalDataElementClass;
	} DemPidDataElementClassRef ;
} Dem_PidDataElementType ;

/* This container contains the different PIDs for the single global OBD relevant freeze frame class.
 *  It is assembled out of one or several data elements.
 */
typedef struct Dem_PidClassType_tag
{
	Dem_PidDataElementType* DemPidDataElement ;
/* identifier of the PID */
	uint8 DemPidIdentifier ;
} Dem_PidClassType ;

/* Note that this container definition does not explicitly define a symbolic name parameter. Instead,
 *  the short name of the container will be used in the Ecu Configuration Description to specify
 *  the symbolic name of the aging cycle name. These aging cycles are reported via API Dem_SetAgingCycleState
 *  only.
 */
typedef struct Dem_AgingCycleType_tag
{
} Dem_AgingCycleType ;

/* Function name of prototype "DTCStatusChanged". */
/* TODO: */
typedef void (*Dem_CallbackDTCStatusChangedFncType)(void);

/* The presence of this container indicates, that the Dem has access to a "DTCStatusChanged" callback,
 *  which the Dem will call to notify other components about the change in the status of a DTC.
 */
typedef struct Dem_CallbackDTCStatusChangedType_tag
{
/* Note: If the parameter DemTriggerDcmReports is enabled, this parameter shall not be "Dcm_DemTriggerOnDTCStatus".
 */
	Dem_CallbackDTCStatusChangedFncType DemCallbackDTCStatusChangedFnc ;
} Dem_CallbackDTCStatusChangedType ;

/* This container contains the configuration (parameters) for an internal/external data element
 *  class.
 */
typedef struct Dem_DataElementClassType_tag
{
} Dem_DataElementClassType ;

/* This container contains the configuration (parameters) for a data Id class. It is assembled
 *  out of one or several data elements.
 */
typedef struct Dem_DidClassType_tag
{
/* Identifier of the Data ID. */
	uint16 DemDidIdentifier ;
/* This reference contains the link to a data element class. */
	uint8 DemDidDataElementClassRefWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemInternalDataElementClass */
		Dem_InternalDataElementClassType* DemInternalDataElementClass;
	} DemDidDataElementClassRef ;
} Dem_DidClassType ;

/* This container contains the configuration (parameters) for enable conditions. */
typedef struct Dem_EnableConditionType_tag
{
/* This parameter should not be changeable by user, because the Id should be generated by Dem itself
 *  to prevent gaps and multiple use of an Id. The enable conditions should be sequentially ordered
 *  beginning with 0 and no gaps in between.
 */
/* Defines a unique enable condition Id. */
	uint8 DemEnableConditionId ;
/* The value is the initialization after power up (before this condition is reported the first
 *  time). 
 *                                                 true: acceptance of a diagnostic event enabled
 *  
 *                                                 false: acceptance of a diagnostic event disabled
 */
/* Defines the inital status for enable or disable of acceptance of event reports of a diagnostic
 *  event.
 */
	boolean DemEnableConditionStatus ;
} Dem_EnableConditionType ;

/* This container contains the configuration (parameters) for enable condition groups. */
typedef struct Dem_EnableConditionGroupType_tag
{
/* References an enable condition. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemEnableCondition */
	Dem_EnableConditionType* DemEnableConditionRef ;
} Dem_EnableConditionGroupType ;

/* This class contains the combinations of extended data records for an extended data class. */
typedef struct Dem_ExtendedDataClassType_tag
{
/* This reference contains the link to an extended data class record. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemExtendedDataRecordClass */
    struct Dem_ExtendedDataRecordClassType_tag* DemExtendedDataRecordClassRef ;
} Dem_ExtendedDataClassType ;

/* This parameter defines the case, when the extended data record is stored/updated. */
typedef enum
{
	DEM_UPDATE_RECORD_NO,
	DEM_UPDATE_RECORD_YES
} Dem_ExtendedDataRecordUpdateType ;

/* This container contains the configuration (parameters) for an extended data record class. */
typedef struct Dem_ExtendedDataRecordClassType_tag
{
/* One or more extended data records can be assigned to one diagnostic event/DTC.
 * 
 *                                                 0xFF and 0xFE are resereved by ISO (therefore
 *  the maximal value equals 253).
 */
/* This configuration parameter specifies an unique identifier for an extended data record. */
	uint8 DemExtendedDataRecordNumber ;
	Dem_ExtendedDataRecordUpdateType DemExtendedDataRecordUpdate ;
/* This reference contains the link to a data element class. */
	uint8 DemDataElementClassRefWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemInternalDataElementClass */
		Dem_InternalDataElementClassType* DemInternalDataElementClass;
	} DemDataElementClassRef ;
} Dem_ExtendedDataRecordClassType ;

/* This container contains the combinations of DIDs for a non OBD relevant freeze frame class. */
typedef struct Dem_FreezeFrameClassType_tag
{
/* For OBD relevant data */
/* Multiple PIDs can be relevant per freeze frame. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDidClass */
	Dem_DidClassType* DemDidClassRef ;
} Dem_FreezeFrameClassType ;

/* This container contains a list of dedicated, different freeze frame record numbers assigned
 *  to an event. The order of record numbers in this list is assigned to the chronological order
 *  of the according freeze frame records.
 */
typedef struct Dem_FreezeFrameRecNumClassType_tag
{
/* The range of this value is defined by ISO 14229-1 (0x01 .. 0xFE). */
/* This parameter defines a record number for a freeze frame record. This record number is unique
 *  per freeze frame record number class.
 */
	uint8 DemFreezeFrameRecordNumber ;
} Dem_FreezeFrameRecNumClassType ;

/* This container contains the general OBD-specific configuration (parameters) of the Dem module. */
typedef struct Dem_GeneralOBDType_tag
{
/* Input variable for the accelerator paddle information, which is assigned to a specific data
 *  element used as interface for the Dem-internal PID calculations.
 */
	uint8 DemOBDInputAcceleratorPaddleInformationWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
	} DemOBDInputAcceleratorPaddleInformation ;
/* Input variable for the ambient pressure, which is assigned to a specific data element used as
 *  interface for the Dem-internal PID calculations.
 */
	uint8 DemOBDInputAmbientPressureWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
	} DemOBDInputAmbientPressure ;
/* Input variable for the ambient temperature, which is assigned to a specific data element used
 *  as interface for the Dem-internal PID calculations.
 */
	uint8 DemOBDInputAmbientTemperatureWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
	} DemOBDInputAmbientTemperature ;
/* Input variable for the distance information, which is assigned to a specific data element used
 *  as interface for the Dem-internal PID calculations.
 */
	uint8 DemOBDInputDistanceInformationWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
	} DemOBDInputDistanceInformation ;
/* Input variable for the engine speed, which is assigned to a specific data element used as interface
 *  for the Dem-internal PID calculations.
 */
	uint8 DemOBDInputEngineSpeedWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
	} DemOBDInputEngineSpeed ;
/* Input variable for the engine temperature, which is assigned to a specific data element used
 *  as interface for the Dem-internal PID calculations.
 */
	uint8 DemOBDInputEngineTemperatureWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
	} DemOBDInputEngineTemperature ;
/* Input variable for the programming event, which is assigned to a specific data element used
 *  as interface for the Dem-internal PID calculations.
 */
	uint8 DemOBDInputProgrammingEventWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
	} DemOBDInputProgrammingEvent ;
/* Input variable for the vehicle speed, which is assigned to a specific data element used as interface
 *  for the Dem-internal PID calculations.
 */
	uint8 DemOBDInputVehicleSpeedWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalCSDataElementClass */
		Dem_ExternalCSDataElementClassType* DemExternalCSDataElementClass;
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemDataElementClass/DemExternalSRDataElementClass */
		Dem_ExternalSRDataElementClassType* DemExternalSRDataElementClass;
	} DemOBDInputVehicleSpeed ;
} Dem_GeneralOBDType ;

/* This container contains the configuaration (parameters) for DTC groups. */
typedef struct Dem_GroupOfDTCType_tag
{
/* (Range: 3 byte, 0x000000 is only available for the emission-related DTC group, 0xFFFFFF is reserved
 *  for 'all DTCs', according to ISO14229-1 Annex D.1,)
 *                                                 The DTC group 'all DTCs' is always available
 *  and will not be configured.
 */
/* DTC value of the selected group of DTC */
	uint32 DemGroupDTCs ;
} Dem_GroupOfDTCType ;

/* This container contains the configuration (parameters) for Indicators. */
typedef struct Dem_IndicatorType_tag
{
/* Unique identifier of an indicator. */
	uint8 DemIndicatorID ;
} Dem_IndicatorType ;

/* This container contains the configuaration (parameters) for a non-volatile memory block, which
 *  is used from the Dem. If no permanent storage of event memory entries is required, no block
 *  needs to be configured.
 */
typedef struct Dem_NvRamBlockIdType_tag
{
/* This reference contains the link to a non-volatile memory block. For post build time configurations
 *  worst case szenario shall be used.
 */
/* /AUTOSAR/EcucDefs/NvM/NvMBlockDescriptor */
	NvM_BlockDescriptorType* DemNvRamBlockIdRef ;
} Dem_NvRamBlockIdType ;

/* Operation cycles types for the Dem to be supported by cycle-state APIs. */
typedef enum
{
	DEM_OPCYC_IGNITION,
	DEM_OPCYC_OBD_DCY,
	DEM_OPCYC_OTHER,
	DEM_OPCYC_POWER,
	DEM_OPCYC_TIME,
	DEM_OPCYC_WARMUP
} Dem_OperationCycleTypeType ;

/* Note that this container definition does not explicitly define a symbolic name parameter. Instead,
 *  the short name of the container will be used in the Ecu Configuration Description to specify
 *  the symbolic name of the operation cycle name.
 */
typedef struct Dem_OperationCycleType_tag
{
/* Further cycle types can be specified as part of the Dem delivery. */
	Dem_OperationCycleTypeType DemOperationCycleType ;
} Dem_OperationCycleType ;

/* This parameter specifies the assigned IUMPR group of the ratio Id. */
typedef enum
{
	DEM_IUMPR_BOOSTPRS,
	DEM_IUMPR_CAT1,
	DEM_IUMPR_CAT2,
	DEM_IUMPR_EGR,
	DEM_IUMPR_EGSENSOR,
	DEM_IUMPR_EVAP,
	DEM_IUMPR_NMHCCAT,
	DEM_IUMPR_NOXADSORB,
	DEM_IUMPR_NOXCAT,
	DEM_IUMPR_OXS1,
	DEM_IUMPR_OXS2,
	DEM_IUMPR_PMFILTER,
	DEM_IUMPR_PRIVATE,
	DEM_IUMPR_SAIR,
	DEM_IUMPR_SECOXS1,
	DEM_IUMPR_SECOXS2
} Dem_IUMPRGroupType ;

/* This parameter defines whether the ratio Id will be calculated API or observer based. */
typedef enum
{
	DEM_RATIO_API,
	DEM_RATIO_OBSERVER
} Dem_RatioIdTypeType ;

/* This container contains the OBD specific ratio Id configuraiton. It is related to a specific
 *  event, a FID, and an IUMPR group.
 */
typedef struct Dem_RatioIdType_tag
{
	Dem_IUMPRGroupType DemIUMPRGroup ;
	Dem_RatioIdTypeType DemRatioIdType ;
/* This reference contains the link to a diagnostic event. */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* DemDiagnosticEventRef ;
/* This reference contains the link to a function identifier within the FiM which is used as a
 *  primary FID.
 */
/* /AUTOSAR/EcucDefs/FiM/FiMConfigSet/FiMFID */
	FiM_FIDType* DemFunctionIdRef ;
/* This reference contains the link to a function identifier within the FiM which is used as a
 *  secondary FID.
 */
/* The "primary" and all "secondary" FID inhibitions are combined by "OR". */
/* /AUTOSAR/EcucDefs/FiM/FiMConfigSet/FiMFID */
	FiM_FIDType* DemSecondaryFunctionIdRef ;
} Dem_RatioIdType ;

/* This container contains the configuration (parameters) for storage conditions. */
typedef struct Dem_StorageConditionType_tag
{
/* Defines a unique storage condition Id. This parameter should not be changeable by user, because
 *  the Id should be generated by Dem itself to prevent gaps and multiple use of an Id. The storage
 *  conditions should be sequentially ordered beginning with 0 and no gaps in between.
 */
	uint8 DemStorageConditionId ;
/* The value is the initialization after power up (before this condition is reported the first
 *  time).
 *                                                 true: storage of a diagnostic event enabled
 *  
 *                                                 false: storage of a diagnostic event disabled
 */
/* Defines the initial status for enable or disable of storage of a diagnostic event. */
	boolean DemStorageConditionStatus ;
} Dem_StorageConditionType ;

/* This container contains the configuration (parameters) for storage condition groups. */
typedef struct Dem_StorageConditionGroupType_tag
{
/* References an enable condition. */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemStorageCondition */
	Dem_StorageConditionType* DemStorageConditionRef ;
} Dem_StorageConditionGroupType ;

/* This configuration switch defines, whether the aging counter is calculated Dem-internally or
 *  provided via Dem_SetAgingCycleCounterValue.
 */
typedef enum
{
	DEM_PROCESS_AGINGCTR_EXTERN,
	DEM_PROCESS_AGINGCTR_INTERN
} Dem_AgingCycleCounterProcessingType ;

/* Defines the clearing process of diagnostic information for volatile and non-volatile memory
 *  and the positive response handling for the Dcm module.
 */
typedef enum
{
	DEM_CLRRESP_NONVOLATILE_FINISH,
	DEM_CLRRESP_NONVOLATILE_TRIGGER,
	DEM_CLRRESP_VOLATILE
} Dem_ClearDTCBehaviorType ;

/* This parameter defines the type of event combination supported by the Dem. */
typedef enum
{
	DEM_EVCOMB_DISABLED,
	DEM_EVCOMB_TYPE1,
	DEM_EVCOMB_TYPE2
} Dem_EventCombinationSupportType ;

/* This parameter defines the point in time, when the extended data collection is done for the
 *  initial event memory entry.
 */ /* TODO */
typedef enum
{
	DEM_TRIGGER_EVENT_MEMORY_STORAGE,
	DEM_TRIGGER_TESTFAILED
} Dem_CaptureType ;

/* This parameter defines the point in time, when the freeze frame data collection is done for
 *  the initial event memory entry.
 */
/*
typedef enum
{
    DEM_TRIGGER_EVENT_MEMORY_STORAGE,
    DEM_TRIGGER_TESTFAILED
} Dem_FreezeFrameCaptureType ;*/

/* This configuration switch defines the consideration of the fault confirmation process for the
 *  occurrence counter. For OBD and mixed systems (OBD/non OBD, refer to DemOBDSupport) the fault
 *  confirmation process must not be considered.
 */
typedef enum
{
	DEM_PROCESS_OCCCTR_CDTC,
	DEM_PROCESS_OCCCTR_TF
} Dem_OccurrenceCounterProcessingType ;

/* This configuration switch defines, whether the operation cycles are triggered by DEM_CYCLE_STATE_START
 *  or collecting an external counter value, which results in respective state changes.
 */
typedef enum
{
	DEM_PROCESS_OPCYC_COUNTER,
	DEM_PROCESS_OPCYC_STATE
} Dem_OperationCycleProcessingType ;

/* This configuration switch defines, whether the aging and displacement mechanism shall be applied
 *  to the "TestFailedSinceLastClear" status bits.
 */
typedef enum
{
	DEM_STATUS_BIT_AGING_AND_DISPLACEMENT,
	DEM_STATUS_BIT_NORMAL
} Dem_StatusBitHandlingTestFailedSinceLastClearType ;

/* This parameter defines the format returned by Dem_GetTranslationType and does not relate to/influence
 *  the supported Dem functionality.
 */
typedef enum
{
	DEM_DTC_TRANSLATION_ISO11992_4,
	DEM_DTC_TRANSLATION_ISO14229_1,
	DEM_DTC_TRANSLATION_ISO15031_6,
	DEM_DTC_TRANSLATION_SAEJ1939_73
} Dem_TypeOfDTCSupportedType ;

/* This parameter defines the type of assigning freeze frame record numbers for event-specific
 *  freeze frame records.
 */
typedef enum
{
	DEM_FF_RECNUM_CALCULATED,
	DEM_FF_RECNUM_CONFIGURED
} Dem_TypeOfFreezeFrameRecordNumerationType ;

/* This container contains the configuration parameters and sub containers of the Dem module supporting
 *  multiple configuration sets. This container is a MultipleConfigurationContainer, i.e. this
 *  container and its sub-containers exist once per configuration set.
 */
typedef struct Dem_ConfigSetType_tag
{
	Dem_DTCClassType* DemDTCClass ;
/* Note that this container definition does not explicitly define a symbolic name parameter. Instead,
 *  the short name of the container will be used in the Ecu Configuration Description to specify
 *  the symbolic name of the diagonstic event.
 */
	Dem_EventParameterType* DemEventParameter ;
	Dem_PidClassType* DemPidClass ;
} Dem_ConfigSetType ;

/* This container contains the configuration (parameters) of the BSW Dem */
typedef struct Dem_GeneralType_tag
{
	Dem_AgingCycleType* DemAgingCycle ;
/* In case there is a DemCallbackDTCStatusChangedFnc, this parameter defines the name of the function
 *  that the Dem will call. 
 * 
 *                                         In case there is no DemCallbackDTCStatusChangedFnc,
 *  the Dem will have an R-Port requiring the interface CallbackDTCStatusChanged whose name is
 *  generated by using the unique callback-prefix followed by the event name.
 */
	Dem_CallbackDTCStatusChangedType* DemCallbackDTCStatusChanged ;
	Dem_DataElementClassType* DemDataElementClass ;
	Dem_DidClassType* DemDidClass ;
	Dem_EnableConditionType* DemEnableCondition ;
	Dem_EnableConditionGroupType* DemEnableConditionGroup ;
	Dem_ExtendedDataClassType* DemExtendedDataClass ;
/* It is assembled out of one or several data elements. */
	Dem_ExtendedDataRecordClassType* DemExtendedDataRecordClass ;
	Dem_FreezeFrameClassType* DemFreezeFrameClass ;
/* dependency: DemTypeOfFreezeFrameRecordNumeration */
	Dem_FreezeFrameRecNumClassType* DemFreezeFrameRecNumClass ;
	Dem_GeneralOBDType* DemGeneralOBD ;
	Dem_GroupOfDTCType* DemGroupOfDTC ;
/* Note that this container definition does not explicitly define a symbolic name parameter. Instead,
 *  the short name of the container will be used in the Ecu Configuration Description to specify
 *  the symbolic name of the INDICATOR_NAME.
 */
	Dem_IndicatorType* DemIndicator ;
/* The number of blocks which are necessary depends on the  implementation and configuration
 *                                         (e.g. number of used event memories) of the Dem module.
 */
	Dem_NvRamBlockIdType* DemNvRamBlockId ;
	Dem_OperationCycleType* DemOperationCycle ;
/* Note that this container definition does not explicitly define a symbolic name parameter. Instead,
 *  the short name of the container will be used in the Ecu Configuration Description to specify
 *  the symbolic name of the ratio Id name.
 */
	Dem_RatioIdType* DemRatioId ;
	Dem_StorageConditionType* DemStorageCondition ;
	Dem_StorageConditionGroupType* DemStorageConditionGroup ;
	Dem_AgingCycleCounterProcessingType DemAgingCycleCounterProcessing ;
/* Maximum number of elements in buffer for handling of BSW errors (ref. to Dem107). */
	uint8 DemBswErrorBufferSize ;
	Dem_ClearDTCBehaviorType DemClearDTCBehavior ;
/* true: DTC suppression support is enabled 
 *                                         false: DTC suppression support is disabled
 */
/* This configuration switch defines, whether support for DTC suppression is enabled or not. */
	boolean DemDTCSuppressionSupport ;
/* true: counter based debouncing support is enabled
 *                                         false: counter based debouncing support is disabled
 */
/* This configuration switch defines, whether support for counter based debouncing is enabled or not. */
	boolean DemDebounceCounterBasedSupport ;
/* true: time based debouncing support is enabled
 *                                         false: time based debouncing support is disabled
 */
/* This configuration switch defines, whether support for time based debouncing is enabled or not. */
	boolean DemDebounceTimeBasedSupport ;
/* true: Development Error Detection and Notification activated
 *                                         false: Development Error Detection and Notification
 *  deactivated
 */
/* Activate/Deactivate the Development Error Detection and Notification. */
	boolean DemDevErrorDetect ;
/* Mask for the supported DTC status bits by the Dem. This mask is used by UDS service 0x19. */
	uint8 DemDtcStatusAvailabilityMask ;
/* true: support for enable conditions is enabled
 *                                         false: support for enable conditions is disabled
 */
/* This configuration switch defines, whether support for enable conditions is enabled or not. */
	boolean DemEnableConditionSupport ;
	Dem_EventCombinationSupportType DemEventCombinationSupport ;
/* true: event displacement support is enabled 
 *                                         false: event displacement support is disabled
 */
/* This configuration switch defines, whether support for event displacement is enabled or not. */
	boolean DemEventDisplacementSupport ;
    Dem_CaptureType DemExtendedDataCapture ;
    Dem_CaptureType DemFreezeFrameCapture ;
/* Name of the header file(s) to be included by the Dem module containing the used C-callback declarations.
 */
	char* DemHeaderFileInclusion ;
/* This parameter defines the maximum number of occurrences, a specific event memory entry is allowed,
 *  to be stored in NVRAM immediately (refer to DemImmediateNvStorage).
 */
	uint8 DemImmediateNvStorageLimit ;
/* Maximum number of events which can be stored in the mirror memory */
	uint8 DemMaxNumberEventEntryMirror ;
/* The assignment of an event to this memory type is dynamic and used for emission-related events
 *  only.
 */
/* Maximum number of events which can be stored in the permanent memory. */
	uint8 DemMaxNumberEventEntryPermanent ;
/* Maximum number of events which can be stored in the primary memory */
	uint8 DemMaxNumberEventEntryPrimary ;
/* Maximum number of events which can be stored in the secondary memory */
	uint8 DemMaxNumberEventEntrySecondary ;
/* If set to 0, then freeze frame prestorage is not supported by the ECU. */
/* Defines the maximum number for prestored freeze frames. */
	uint8 DemMaxNumberPrestoredFF ;
/* This configuration switch defines whether OBD is supported or not */
	boolean DemOBDSupport ;
	Dem_OccurrenceCounterProcessingType DemOccurrenceCounterProcessing ;
	Dem_OperationCycleProcessingType DemOperationCycleProcessing ;
/* true: the operation cycle state is stored non-volatile 
 *                                         false: the operation cycle state is only stored volatile
 */
/* Defines if the operation cycle state is available over the power cycle (stored non-volatile)
 *  or not.
 */
	boolean DemOperationCycleStatusStorage ;
/* This configuration switch defines, whether PTO support (and therefore PID $1E support) is enabled
 *  or not.
 */
	boolean DemPTOSupport ;
	Dem_StatusBitHandlingTestFailedSinceLastClearType DemStatusBitHandlingTestFailedSinceLastClear ;
/* true: storage activated
                                        false: storage deactivated */
/* Activate/Deactivate the permanent storage of the "TestFailed" status bits. */
	boolean DemStatusBitStorageTestFailed ;
/* true: support for storage conditions is enabled
 *                                         false: support for storage conditions is disabled
 */
/* This configuration switch defines, whether support for storage conditions is enabled or not. */
	boolean DemStorageConditionSupport ;
/* The AUTOSAR configuration standard is to use SI units, so this parameter is defined as float
 *  value in seconds. Dem configuration tools must convert this float value to the appropriate
 *  value format for the use in the software implementation of Dem.
 * 
 *                                         min:
 *                                         A negative value is not allowed.
 * 
 *                                         max:
 *                                         After event status was reported, processing shall be
 *  completed within 100ms in order to have the fault entry status information updated as soon
 *  as possible (e.g. for PID $01).
 * 
 *                                         upperMultiplicity:
 *                                         Exactly one TaskTime must be specified per configuration.
 * 
 *                                         lowerMultiplicity:
 *                                         Exactly one TaskTime must be specified per configuration.
 */
/* Allow to configure the time for the periodic cyclic task. Please note: This configuration value
 *  shall be equal to the value in the Basic Software Scheduler configuration of the RTE module.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 DemTaskTime ;
/* true: Dcm ROE notification activated 
 *                                         false: Dcm ROE notification deactivated
 */
/* Activate/Deactivate the notification to the Diagnostic Communication Manager for ROE processing. */
	boolean DemTriggerDcmReports ;
/* true: Dlt notification activated
 *                                         false: Dlt notification deactivated
 */
/* Activate/Deactivate the notification to the Diagnostic Log and Trace. */
	boolean DemTriggerDltReports ;
/* true: FiM notification activated
 *                                         false: FiM notification deactivated
 */
/* Activate/Deactivate the notification to the Funciton Inhibition Manager. */
	boolean DemTriggerFiMReports ;
/* true: trigger re-initialization before DEM_CLEAR_OK 
 *                                         false: trigger re-initialization after DEM_CLEAR_OK
 */
/* Defines if the monitor re-initialization has to be triggered before or after the Dem module
 *  returns DEM_CLEAR_OK.
 */
	boolean DemTriggerMonitorInitBeforeClearOk ;
	Dem_TypeOfDTCSupportedType DemTypeOfDTCSupported ;
	Dem_TypeOfFreezeFrameRecordNumerationType DemTypeOfFreezeFrameRecordNumeration ;
/* true: version information activated
 *                                         false: version information deactivated
 */
/* Activate/Deactivate the version information API. */
	boolean DemVersionInfoApi ;
/* This parameter defines the indicator representing the MIL. */
/* This paramteter is mandatory for ECUs supporting OBD (refer to DemOBDSupport). */
/* /AUTOSAR/EcucDefs/Dem/DemGeneral/DemIndicator */
	Dem_IndicatorType* DemMILIndicatorRef ;
} Dem_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* DEM_TYPES_H */

