/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef COMM_TYPES_H
#define COMM_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#include "Com.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Defines the functionality of the networkmanagement. */
typedef enum
{
	COMM_NMVARIANT_FULL,
	COMM_NMVARIANT_LIGHT,
	COMM_NMVARIANT_NONE,
	COMM_NMVARIANT_PASSIVE
} ComM_NmVariantType ;

/* This container contains the configuration parameters of the networkmanagement. */
typedef struct ComM_NetworkManagementType_tag
{
/* The range shall be greater than 0.0 and less or equal to 255.0. */
/* Defines the timeout (in seconds) after COMM_FULL_COMMUNICATION sub-state COMM_FULL_COM_READY_SLEEP
 *  is left.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 ComMNmLightTimeout ;
/* Shall be harmonized with NM configuration. */
	ComM_NmVariantType ComMNmVariant ;
/* If this parameter equals true then every time a FULL Communication is requested due to a change
 *  in the PNC state machine to PNC_REQUESTED Nm shall be called using the API Nm_NetworkRequest.
 */
	boolean ComMPncNmRequest ;
} ComM_NetworkManagementType ;

/* This container contains a list of identifiers that are needed to refer to a user in the system
 *  which is linked to a channel.
 */
typedef struct ComM_UserPerChannelType_tag
{
/* Reference to the ComMUser that corresponds to this channel user. */
/* ImplementationType: COMM_UserHandleType */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMUser */
    struct ComM_UserType_tag* ComMUserChannel ;
} ComM_UserPerChannelType ;

/* Identifies the bus type of the channel. */
typedef enum
{
	COMM_BUS_TYPE_CAN,
	COMM_BUS_TYPE_ETH,
	COMM_BUS_TYPE_FR,
	COMM_BUS_TYPE_INTERNAL,
	COMM_BUS_TYPE_LIN
} ComM_BusTypeType ;

/* Identifies the Partial Network Gateway behaviour of a ComMChannel. */
typedef enum
{
	COMM_GATEWAY_TYPE_ACTIVE,
	COMM_GATEWAY_TYPE_PASSIVE
} ComM_PncGatewayTypeType ;

/* This container contains the configuration (parameters) of the bus channel(s). The channel parameters
 *  shall be harmonized within the whole communication stack.
 */
typedef struct ComM_ChannelType_tag
{
	ComM_NetworkManagementType* ComMNetworkManagement ;
	ComM_UserPerChannelType* ComMUserPerChannel ;
	ComM_BusTypeType ComMBusType ;
/* Channel identification number of the corresponding channel. */
	uint8 ComMChannelId ;
/* True means enabled. False means disabled */
/* Defines if the optional SenderReceiver Port of Interface ComM_CurrentChannelRequest will be
 *  provided for this channel.
 */
	boolean ComMFullCommRequestNotificationEnabled ;
/* If this parameter is set to "true", the NoWakeUp inhibition state of the channel shall be stored
 *  (in some implementation specific way) in the block pointed to by ComMGlobalNvmBlockDescriptor.
 */
	boolean ComMGlobalNvmBlockDescriptor ;
/* Comment: ComM scheduling shall be at least as fast as the communication stack and a schedule
 *  longer than 100ms makes no sense for communication.
 */
/* Specifies the period in seconds that the MainFunction has to be triggered with. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 ComMMainFunctionPeriod ;
/* true: Enabled - Not allowed to switch to Communication Modes above.      
 *                                                 false: Disabled - Allowed to switch Communication
 *  Modes above.        
 * 
 *                                                 Shall be possible to change parameter during
 *  runtime with ComM API's.    
 *                                                 ECU/All channels: ComM_LimitECUToNoComMode().
 *   
 *                                                 Separate channels: ComM_LimitChannelToNoComMode().
 */
/* Not allowed to change state of ComM channel to COMM_SILENT_COMMUNICATION or COMM_FULL_COMMUNICATION.
 */
	boolean ComMNoCom ;
/* true: Enabled (not allowed to wake-up))
 *                                                 false: Disabled
 * 
 *                                                 This is the default/init value of a runtime
 *  variable that can be changed during runtime using ComM_PreventWakeUp().
 */
/* Defines if an ECU is not allowed to wake-up the channel. */
	boolean ComMNoWakeup ;
	ComM_PncGatewayTypeType ComMPncGatewayType ;
} ComM_ChannelType ;

/* Indicates the communication direction of this PncComSignal. */
typedef enum
{
	COMM_PNCCOMSIGNALDIRECTION_RX,
	COMM_PNCCOMSIGNALDIRECTION_TX
} ComM_PncComSignalDirectionType ;

/* Indicates whether this PncComSignal represents EIRA or ERA PNC information. */
typedef enum
{
	COMM_PNCCOMSIGNALKIND_EIRA,
	COMM_PNCCOMSIGNALKIND_ERA
} ComM_PncComSignalKindType ;

/* Represents the PncComSignals which are used to communicate the EIRA and ERA status of this PNC. */
typedef struct ComM_PncComSignalType_tag
{
	ComM_PncComSignalDirectionType ComMPncComSignalDirection ;
	ComM_PncComSignalKindType ComMPncComSignalKind ;
/* Reference to the ComMChannel which is used to determine whether this PncComSignal shall participate
 *  in the active or passive role (via the parameter ComMPncGatewayType of the ComMChannel).
 */
/* Not applicable if ComMPncComSignalKind is EIRA. */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel */
	ComM_ChannelType* ComMPncComSignalChannelRef ;
/* Reference to the ComSignal which is used to transport the partial network channel request information.
 */
/* /AUTOSAR/EcucDefs/Com/ComConfig/ComSignal */
	Com_SignalType* ComMPncComSignalRef ;
} ComM_PncComSignalType ;

/* This container contains the configuration of the partial network cluster (PNC). */
typedef struct ComM_PncType_tag
{
	ComM_PncComSignalType* ComMPncComSignal ;
/* Partial network cluster identification number. */
	uint8 ComMPncId ;
/* Reference to the ComMChannel that is required for this PNC. */
/* ImplementationType: COMM_ChannelType */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel */
	ComM_ChannelType* ComMChannelPerPnc ;
/* Reference to the ComMUsers that correspond to this PNC. */
/* ImplementationType: COMM_UserHandleType */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMUser */
    struct ComM_UserType_tag* ComMUserPerPnc ;
} ComM_PncType ;

/* This container contains a list of identifiers that are needed to refer to a user in the system
 *  which is designated to request Communication modes.
 */
typedef struct ComM_UserType_tag
{
/* ImplementationType: ComM_UserHandleType */
/* An identifier that is needed to refer to a user in the system which is designated to request
 *  Communication Modes.
 */
	uint8 ComMUserIdentifier ;
/* Denotes in which "EcucPartition" the requester is executed. When the */
/* partition is stopped, the communication request shall be cancelled in the ComM 
 *                                                 to avoid a stay-awake situation of the bus due
 *  to a stopped partition.
 */
/* /AUTOSAR/EcucDefs/EcuC/EcucPartitionCollection/EcucPartition */
	EcuC_PartitionType* ComMUserEcucPartitionRef ;
} ComM_UserType ;

/* This container is the base for a multiple configuration set. */
typedef struct ComM_ConfigSetType_tag
{
	ComM_ChannelType* ComMChannel ;
	ComM_PncType* ComMPnc ;
	ComM_UserType* ComMUser ;
/* true: Enabled
                                        false: Disabled */
/* Defines whether in this configuration set the partial networking is enabled. */
	boolean ComMPncEnabled ;
} ComM_ConfigSetType ;

/* General configuration parameters of the Communication Manager. */
typedef struct ComM_GeneralType_tag
{
/* true: Enabled
                                        false: Disabled */
/* Switches the Development Error Detection and Notification ON or OFF. */
	boolean ComMDevErrorDetect ;
/* The shortName of the generated ComMUsers shall follow the following naming convention: 
 *                                         PNCUser_ComMPncId, e.g. PNCUser_13
 *                                         ChannelUser_ComMChannelId, e.g. ChannelUser_25 
 * 
 *                                         Restriction: ComMUser, which are created due to this
 *  configuration parameter, shall not be used by SWCs (only available for BswM).
 */
/* If this parameter is set to true the configuration tool shall automatically create a ComMUser
 *  per ComMPnc and a ComMUser per ComMChannel.
 */
	boolean ComMDirectUserMapping ;
/* Examples: 
 * 
 *                                         000: No mode inhibition can be activated 
 * 
 *                                         001: Wake up inhibition can be enabled 
 * 
 * 
 *                                         Forcing into COMM_NO_COMMUNICATION mode shall be switched
 *  on if ComMNmVariant=PASSIVE.
 */
/* Defines whether a mode inhibition affects the ECU or not. */
	uint8 ComMEcuGroupClassification ;
/* true: Enabled
                                        false: Disabled */
/* true if mode limitation functionality shall be enabled. */
	boolean ComMModeLimitationEnabled ;
/* False: Partial Networking Gateway is disabled
 *                                         True: Partial Networking Gateway is enabled
 */
/* Enables or disables support of Partial Network Gateway. */
	boolean ComMPncGatewayEnabled ;
/* Time in seconds the PNC state machine shall wait in PNC_PREPARE_SLEEP. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 ComMPncPrepareSleepTimer ;
/* False: Partial Networking is disabled
 *                                         True: Partial Networking is enabled
 */
/* Enables or disables support of partial networking. */
	boolean ComMPncSupport ;
/* true: Enabled
                                        false: Disabled */
/* Wake up of one channel shall lead to a wake up of all channels if true. */
	boolean ComMSynchronousWakeUp ;
/* Minimum time duration in seconds, spent in the COMM_FULL_COMMUNICATION sub-state COMM_FULL_COM_NETWORK_REQUESTED.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 ComMTMinFullComModeDuration ;
/* true: Enabled
                                        false: Disabled */
/* Switches the possibility to read the published information with the service ComM_GetPublishedInformation().
 */
	boolean ComMVersionInfoApi ;
/* true: Enabled
                                        false: Disabled */
/* true if wake up inhibition functionality enabled. */
	boolean ComMWakeupInhibitionEnabled ;
/* Reference to NVRAM block containing the none volatile data. If this parameter is not configured
 *  it means that no NVRam is used at all.
 */
/* /AUTOSAR/EcucDefs/NvM/NvMBlockDescriptor */
	NvM_BlockDescriptorType* ComMGlobalNvMBlockDescriptor ;
} ComM_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* COMM_TYPES_H */

