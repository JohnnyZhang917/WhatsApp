/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef CAN_TYPES_H
#define CAN_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#include "EcuM.h"
#include "Os.h"
#include "CanIf.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* This container contains bit timing related configuration parameters of the CAN controller(s). */
typedef struct Can_ControllerBaudrateConfigType_tag
{
/* Specifies the baudrate of the controller in kbps. */
	uint16 CanControllerBaudRate ;
/* Specifies propagation delay in time quantas. */
	uint8 CanControllerPropSeg ;
/* Specifies phase segment 1 in time quantas. */
	uint8 CanControllerSeg1 ;
/* Specifies phase segment 2 in time quantas. */
	uint8 CanControllerSeg2 ;
/* Specifies the synchronization jump width for the controller in time quantas. */
	uint8 CanControllerSyncJumpWidth ;
} Can_ControllerBaudrateConfigType ;

/* This container contains the configuration (parameters) of the CAN Filter Mask(s). */
typedef struct Can_FilterMaskType_tag
{
/* The mask shall be build by filling with leading 0. In case of CanIdType 
 *                                                         EXTENDED or MIXED a 29 bit mask shall
 *  be build. In case of CanIdType 
 *                                                         STANDARD a 11 bit mask shall be build
 */
/* Describes a mask for hardware-based filtering of CAN identifiers. The CAN identifiers of incoming
 *  messages are masked with the appropriate CanFilterMaskValue. Bits holding a 0 mean don't care,
 *  i.e. do not compare the message's identifier in the respective bit position.
 */
	uint32 CanFilterMaskValue ;
} Can_FilterMaskType ;

/* Defines the operation mode. */
typedef enum
{
	CAN_TT_EVENT_SYNC_TIME_TRIGGERED,
	CAN_TT_EVENT_TRIGGERED,
	CAN_TT_TIME_TRIGGERED
} Can_TTControllerOperationModeType ;

/* Enables / disables API Can_MainFunction_BusOff() for handling busoff events in polling mode. */
typedef enum
{
	CAN_TTIRQPROCESSING_INTERRUPT,
	CAN_TTIRQPROCESSING_POLLING
} Can_TTIRQProcessingType ;

/* This container is only included and valid if TTCAN SWS is used and TTCAN is enabled. */
typedef struct Can_TTControllerType_tag
{
/* Defines the maximum time period (unit is 256 times NTU) after which the application has to serve
 *  the watchdog.
 */
	uint8 CanTTControllerApplWatchdogLimit ;
/* Allowed values:
 *                                                         0x00: 1 basic cycle
 *                                                         0x01: 2 basic cycles
 *                                                         0x03: 4 basic cycles
 *                                                         0x07: 8 basic cycles
 *                                                         0x0F: 16 basic cycles
 *                                                         0x1F: 32 basic cycles
 *                                                         0x3F: 64 basic cycles
 */
/* Defines the value for cycle_count_max. */
	uint8 CanTTControllerCycleCountMax ;
/* Number of expected_tx_trigger. */
	uint8 CanTTControllerExpectedTxTrigger ;
/* TRUE:
 *                                                         External clock synchronization enabled.
 *                                                         FALSE:
 *                                                         External clock synchronization disabled.
 * 
 *                                                         This parameter shall only be configurable
 *  if parameter CanTTControllerLevel2 equals TRUE.
 */
/* Enables/disables the external clock synchronization. */
	boolean CanTTControllerExternalClockSynchronisation ;
/* TRUE:
 *                                                         Global time filtering enabled.
 *                                                         FALSE:
 *                                                         Global time filtering disabled.
 * 
 *                                                         This parameter shall only be configurable
 *  if parameter CanTTControllerLevel2 equals TRUE.
 */
/* Enables/disables the global time filtering. */
	boolean CanTTControllerGlobalTimeFiltering ;
/* Defines the initial value for ref trigger offset. */
	uint8 CanTTControllerInitialRefOffset ;
/* Bit Position set to 1: Enable respective interrupt.
 *                                                         Bit Position set to 0: Disable respective
 *  interrupt.
 * 
 *                                                         Bit Position / Interrupt Source: 
 *                                                         10: Application Watchdog. 
 *                                                         9: Watch Trigger reached. 
 *                                                         8: Initialization Watch Trigger reached.
 *  
 *                                                         7: Change of Error Level. 
 *                                                         6: Tx Overflow. 
 *                                                         5: Tx Underflow. 
 *                                                         4: Global Time Error. 
 *                                                         3: Gap. 
 *                                                         2: Start of Cycle. 
 *                                                         1: Time Discontinuity. 
 *                                                         0: Master State Change. 
 * 
 *                                                         Bit position "1: Time Discontinuity"
 *  and "4: Global Time Error" shall only be configurable if parameter CanTTControllerLevel2 equals
 *  TRUE.
 */
/* Enables/disables the respective interrupts. */
	uint16 CanTTControllerInterruptEnable ;
/* TRUE: Level 2.
 *                                                         FALSE: Level 1.
 * 
 *                                                         If this parameter is set to FALSE then
 *  all parameters with dependency to CanTTControllerLevel2 need not be configured.
 */
/* Defines whether Level 2 or Level 1 is used. */
	boolean CanTTControllerLevel2 ;
/* Value given in microseconds. The value configured shall be greater than 0.
 *                                                         Together with the local oscillator period,
 *  the TUR (time unit ratio) can be derived from the NTU. This parameter shall only be configurable
 *  if parameter CanTTControllerLevel2 equals TRUE.
 */
/* Defines the config value for NTU (network time unit). */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 CanTTControllerNTUConfig ;
	Can_TTControllerOperationModeType CanTTControllerOperationMode ;
/* Given as a percentage value of the NTU (network time unit). The value configured shall be greater
 *  than 0.
 *                                                         This parameter shall only be configurable
 *  if parameter CanTTControllerLevel2 equals TRUE.
 */
/* Defines the maximum synchronization deviation: */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 CanTTControllerSyncDeviation ;
/* Note that the value configured for TUR can be derived from the value configured for NTU and
 *  the local oscillator preriod.
 *                                                         TRUE:
 *                                                         TUR restore enabled.  
 *                                                         FALSE:
 *                                                         TUR restore disabled. 
 * 
 *                                                         This parameter shall only be configurable
 *  if parameter CanTTControllerLevel2 equals TRUE.
 */
/* Enables/disables the TUR restore. */
	boolean CanTTControllerTURRestore ;
/* TRUE: Potential time master. 
 *                                                         FALSE: Time slave.
 */
/* Defines whether the controller acts as a potential time master. */
	boolean CanTTControllerTimeMaster ;
/* Defines the time master priority. */
	uint8 CanTTControllerTimeMasterPriority ;
/* Definition parameter "CanTTControllerTxEnableWindowlength" is used such that:
 *                                                         Length of enable window = CanTTControllerTxEnableWindowLength
 *  + 1
 */
/* Length of the tx enable window given in CAN bit times. */
	uint8 CanTTControllerTxEnableWindowLength ;
/* watch trigger time mark after a gap */
	uint16 CanTTControllerWatchTriggerGapTimeMark ;
/* watch trigger time mark */
	uint16 CanTTControllerWatchTriggerTimeMark ;
	Can_TTIRQProcessingType CanTTIRQProcessing ;
} Can_TTControllerType ;

/* Enables / disables API Can_MainFunction_BusOff() for handling busoff events in polling mode. */
typedef enum
{
	CAN_BUSOFFPROCESSING_INTERRUPT,
	CAN_BUSOFFPROCESSING_POLLING
} Can_BusoffProcessingType ;

/* Enables / disables API Can_MainFunction_Read() for handling PDU reception events in polling mode. */
typedef enum
{
	CAN_RXPROCESSING_INTERRUPT,
	CAN_RXPROCESSING_POLLING
} Can_RxProcessingType ;

/* Enables / disables API Can_MainFunction_Write() for handling PDU transmission events in polling
 *  mode.
 */
typedef enum
{
	CAN_TXPROCESSING_INTERRUPT,
	CAN_TXPROCESSING_POLLING
} Can_TxProcessingType ;

/* Enables / disables API Can_MainFunction_Wakeup() for handling wakeup events in polling mode. */
typedef enum
{
	CAN_WAKEUPPROCESSING_INTERRUPT,
	CAN_WAKEUPPROCESSING_POLLING
} Can_WakeupProcessingType ;

/* This container contains the configuration parameters of the CAN controller(s). */
typedef struct Can_ControllerConfigType_tag
{
	Can_ControllerBaudrateConfigType* CanControllerBaudrateConfig ;
	Can_FilterMaskType* CanFilterMask ;
/* This container contains the configuration parameters of the TTCAN controller(s) (which are needed
 *  in addition to the configuration parameters of the CAN controller(s)).
 * 
 *                                                 CanTTController is only included, if the controller
 *  supports TTCAN.
 */
	Can_TTControllerType* CanTTController ;
	Can_BusoffProcessingType CanBusoffProcessing ;
/* Defines if a CAN controller is used in the configuration. */
	boolean CanControllerActivation ;
/* Specifies the CAN controller base address. */
	uint32 CanControllerBaseAddress ;
/* This parameter provides the controller ID which is unique in a given CAN Driver. The value for
 *  this parameter starts with 0 and continue without any gaps.
 */
	uint8 CanControllerId ;
	Can_RxProcessingType CanRxProcessing ;
	Can_TxProcessingType CanTxProcessing ;
	Can_WakeupProcessingType CanWakeupProcessing ;
/* CAN driver support for wakeup over CAN Bus. */
	boolean CanWakeupSupport ;
/* Reference to baudrate configuration container configured for the Can Controller. */
/* /AUTOSAR/EcucDefs/Can/CanConfigSet/CanController/CanControllerBaudrateConfig */
	Can_ControllerBaudrateConfigType* CanControllerDefaultBaudrate ;
/* Reference to the CPU clock configuration, which is set in the MCU driver configuration */
/* /AUTOSAR/EcucDefs/Mcu/McuModuleConfiguration/McuClockSettingConfig/McuClockReferencePoint */
	Mcu_ClockReferencePointType* CanCpuClockRef ;
/* This parameter contains a reference to the Wakeup Source for this controller as defined in the
 *  ECU State Manager.
 */
/* Implementation Type: reference to EcuM_WakeupSourceType */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource */
    struct EcuM_WakeupSourceType_tag* CanWakeupSourceRef ;
} Can_ControllerConfigType ;

/* Defines the type of the trigger associated with the hardware object. This parameter depends
 *  on plain CAN parameter CAN_OBJECT_TYPE.
 */
typedef enum
{
	CAN_TT_RX_TRIGGER,
	CAN_TT_TX_REF_TRIGGER,
	CAN_TT_TX_REF_TRIGGER_GAP,
	CAN_TT_TX_TRIGGER_EXCLUSIVE,
	CAN_TT_TX_TRIGGER_MERGED,
	CAN_TT_TX_TRIGGER_SINGLE
} Can_TTHardwareObjectTriggerTypeType ;

/* This container is only included and valid if TTCAN SWS is used and TTCAN is enabled. */
typedef struct Can_TTHardwareObjectTriggerType_tag
{
/* CanTTHardwareObjectBaseCycle must be not greater than cycle_count_max. */
/* Defines the cycle_offset. */
	uint8 CanTTHardwareObjectBaseCycle ;
/* CanTTHardwareObjectCycleRepetition shall be a power of two (2), greater than cycle_offset but
 *  not greater than cycle_count_max + 1.
 */
/* Defines the repeat_factor. */
	uint8 CanTTHardwareObjectCycleRepetition ;
/* Value is given in cycle time. */
/* Defines the point in time, when the trigger will be activated. */
	uint16 CanTTHardwareObjectTimeMark ;
/* Sequential number which allows separation of different TTCAN triggers configured for one and
 *  the same hardware object.
 */
	uint8 CanTTHardwareObjectTriggerId ;
/* If CAN_OBJECT_TYPE equals RECEIVE than this parameter is fixed to  CAN_TT_RX_TRIGGER.
 *                                                         If CAN_OBJECT_TYPE equals TRANSMIT than
 *  one of the following literals is configurable:
 *                                                         CAN_TT_TX_REF_TRIGGER,
 *                                                         CAN_TT_TX_REF_TRIGGER_GAP,
 *                                                         CAN_TT_TX_TRIGGER_MERGED,
 *                                                         CAN_TT_TX_TRIGGER_SINGLE,
 *                                                         CAN_TT_TX_TRIGGER_EXCLUSIVE.
 */
	Can_TTHardwareObjectTriggerTypeType CanTTHardwareObjectTriggerType ;
} Can_TTHardwareObjectTriggerType ;

/* Specifies the type (Full-CAN or Basic-CAN) of a hardware object. */
typedef enum
{
	CAN_HANDLETYPE_BASIC,
	CAN_HANDLETYPE_FULL
} Can_HandleTypeType ;

/* Specifies whether the IdValue is of type */
typedef enum
{
	CAN_IDTYPE_EXTENDED,
	CAN_IDTYPE_MIXED,
	CAN_IDTYPE_STANDARD
} Can_IdTypeType ;

/* Specifies if the HardwareObject is used as Transmit or as Receive object */
typedef enum
{
	CAN_OBJECTTYPE_RECEIVE,
	CAN_OBJECTTYPE_TRANSMIT
} Can_ObjectTypeType ;

/* This container contains the configuration (parameters) of CAN Hardware Objects. */
typedef struct Can_HardwareObjectType_tag
{
/* This container contains the configuration (parameters) of TTCAN triggers for Hardware Objects,
 *  which are additional to the configuration (parameters) of CAN Hardware Objects.
 * 
 *                                                 CanTTHardwareObjectTrigger is only included,
 *  if the controller supports TTCAN.
 */
	Can_TTHardwareObjectTriggerType* CanTTHardwareObjectTrigger ;
	Can_HandleTypeType CanHandleType ;
/* - standard identifier
 *                                                   - extended identifier
 *                                                   - mixed mode
 * 
 *                                                 ImplementationType: Can_IdType
 */
	Can_IdTypeType CanIdType ;
/* Specifies (together with the filter mask) the identifiers range that passes the hardware filter. */
	uint32 CanIdValue ;
/* The HRH and HTH Ids are defined under two different name-spaces. 
 * 
 *                                                 Example: HRH0-0, HRH1-1, HTH0-2, HTH1-3
 */
/* Holds the handle ID of HRH or HTH. The value of this parameter is unique in a given CAN Driver,
 *  and it should start with 0 and continue without any gaps.
 */
	uint16 CanObjectId ;
	Can_ObjectTypeType CanObjectType ;
/* Reference to CAN Controller to which the HOH is associated to. */
/* /AUTOSAR/EcucDefs/Can/CanConfigSet/CanController */
    Can_ControllerConfigType* CanControllerRef ;
/* Reference to the filter mask that is used for hardware filtering together with the CAN_ID_VALUE. */
/* Different CanHardwareObjects with different CanIdTypes (STANDARD, MIXED,  EXTENDED)
 *                                                 can share the same CanFilterMask (i.e., the
 *  CanFilterMaskRef parameters of  these
 *                                                 CanHardwareObjects reference the very same CanFilterMask
 *  container). This  shall be allowed and must be
 *                                                 supported by the configuration generators.
 * 
 *                                                 The CanFilterMaskRef is omitted for
 *                                                 1) CanHardwareObjects with CanObjectType set
 *  to TRANSMIT
 *                                                 2) CanHardwareObjects with CanObjectType set
 *  to RECEIVE if only a single Can ID
 *                                                    shall be received via this CanHardwareObjects
 *  (i.e., exact match with CanIdValue)
 */
/* /AUTOSAR/EcucDefs/Can/CanConfigSet/CanController/CanFilterMask */
	Can_FilterMaskType* CanFilterMaskRef ;
/* Reference to CAN Controller to which the HOH is associated to. */
/* /AUTOSAR/EcucDefs/Can/CanGeneral/CanMainFunctionRWPeriods */
    struct Can_MainFunctionRWPeriodsType_tag* CanMainFunctionRWPeriodRef ;
} Can_HardwareObjectType ;

typedef struct Can_MainFunctionRWPeriodsType_tag
{
/* This parameter describes the period for cyclic call to Can_MainFunction_Read. Unit is seconds.
 *  Different poll-cycles will be configurable if more than one CanMainFunctionReadPeriod is configured.
 *  In this case multiple Can_MainFunction_Read() will be provided by the CAN Driver module.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 CanMainFunctionReadPeriod ;
/* This parameter describes the period for cyclic call to Can_MainFunction_Write. Unit is seconds.
 *  Different poll-cycles will be configurable if more than one CanMainFunctionWritePeriod is configured.
 *  In this case multiple Can_MainFunction_Write() will be provided by the CAN Driver module.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 CanMainFunctionWritePeriod ;
} Can_MainFunctionRWPeriodsType ;

/* This parameter defines the existence and the name of a callout function that is called after
 *  a successful
 */
/* TODO: */
typedef void (*Can_LPduReceiveCalloutFunctionType)(void);

/* This is the multiple configuration set container for CAN Driver */
typedef struct Can_ConfigType_tag
{
	Can_ControllerConfigType* CanController ;
	Can_HardwareObjectType* CanHardwareObject ;
} Can_ConfigType ;

/* This is the multiple configuration set container for CAN Driver */
typedef struct Can_ConfigSetType_tag
{
	Can_ConfigType* ConfigSet ;
} Can_ConfigSetType ;

/* This container contains the parameters related each CAN Driver Unit. */
typedef struct Can_GeneralType_tag
{
	Can_MainFunctionRWPeriodsType* CanMainFunctionRWPeriods ;
/* If this parameter is set to true the Can_ChangeBaudrate API shall be supported. Otherwise the
 *  API is not supported.
 */
/* The support of the Can_ChangeBaudrate API is optional. */
	boolean CanChangeBaudrateApi ;
/* Switches the Development Error Detection and Notification ON or OFF. */
	boolean CanDevErrorDetection ;
/* Specifies if hardware cancellation shall be supported.ON or OFF */
	boolean CanHardwareCancellation ;
/* Enables/disables cancellation of pending PDUs with identical ID. */
	boolean CanIdenticalIdCancellation ;
/* Specifies the InstanceId of this module instance. If only one instance is present it shall have
 *  the Id 0.
 */
	uint8 CanIndex ;
/* reception of a received CAN Rx L-PDU. If this parameter is omitted no callout shall take place. */
	Can_LPduReceiveCalloutFunctionType CanLPduReceiveCalloutFunction ;
/* This parameter describes the period for cyclic call to Can_MainFunction_Busoff. Unit is seconds. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 CanMainFunctionBusoffPeriod ;
/* This parameter describes the period for cyclic call to Can_MainFunction_Mode. Unit is seconds. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 CanMainFunctionModePeriod ;
/* This parameter describes the period for cyclic call to Can_MainFunction_Wakeup. Unit is seconds. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 CanMainFunctionWakeupPeriod ;
/* Specifies if multiplexed transmission shall be supported.ON or OFF */
	boolean CanMultiplexedTransmission ;
/* Specifies the maximum time for blocking function until a timeout is detected. Unit is seconds. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 CanTimeoutDuration ;
/* Switches the Can_GetVersionInfo() API ON or OFF. */
	boolean CanVersionInfoApi ;
/* This parameter contains a reference to the counter, which is used by the CAN driver. */
/* /AUTOSAR/EcucDefs/Os/OsCounter */
    struct Os_CounterType_tag* CanCounterRef ;
/* The parameter refers to CanIfSupportTTCAN parameter in the CAN Interface Module configuration. */
/* The CanIfSupportTTCAN parameter defines whether TTCAN is supported. */
/* /AUTOSAR/EcucDefs/CanIf/CanIfPrivateCfg */
    struct CanIf_PrivateCfgType_tag* CanSupportTTCANRef ;
} Can_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* CAN_TYPES_H */

