/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef CDD_TYPES_H
#define CDD_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* This container specifies Rx PDUs that are exchanged between the CDD and the standardized BSW
 *  module.
 */
typedef struct Cdd_ComIfUpperLayerRxPduType_tag
{
/* ECU wide unique, symbolic handle for the Pdu. */
	uint16 CddComIfHandleId ;
/* Reference to the "global" Pdu structure to allow harmonization of handle IDs in the COM-Stack. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* CddComIfPduRef ;
} Cdd_ComIfUpperLayerRxPduType ;

/* This container specifies Tx PDUs that are exchanged between the CDD and the standardized BSW
 *  module.
 */
typedef struct Cdd_ComIfUpperLayerTxPduType_tag
{
	uint16 CddComIfHandleId ;
/* Reference to the "global" Pdu structure to allow harmonization of handle IDs in the COM-Stack. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* CddComIfPduRef ;
} Cdd_ComIfUpperLayerTxPduType ;

/* Parameters that are necessary for the configuration of a Complex Device Driver that serves as
 *  the UpperLayer of the Com Interface module.
 */
typedef struct Cdd_ComIfUpperLayerContributionType_tag
{
	Cdd_ComIfUpperLayerRxPduType* CddComIfUpperLayerRxPdu ;
	Cdd_ComIfUpperLayerTxPduType* CddComIfUpperLayerTxPdu ;
} Cdd_ComIfUpperLayerContributionType ;

/* This container contains the network specific parameters. */
typedef struct Cdd_ComMLowerLayerChannelType_tag
{
/* Unique handle to identify one certain network. Reference to one of the network handles configured
 *  for the ComM.
 */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel */
	ComM_ChannelType* CddComMLowerLayerChannelRef ;
} Cdd_ComMLowerLayerChannelType ;

/* Parameters that are necessary for the configuration of a Complex Device Driver that serves as
 *  the LowerLayer of the Communication Manager module.
 */
typedef struct Cdd_ComMLowerLayerContributionType_tag
{
	Cdd_ComMLowerLayerChannelType* CddComMLowerLayerChannel ;
} Cdd_ComMLowerLayerContributionType ;

/* NM Channel specific configuration parameters. */
typedef struct Cdd_GenericNmLowerLayerChannelType_tag
{
/* This reference points to the unique channel defined by the ComMChannel and provides access to
 *  the unique channel index value in ComMChannelId.
 */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel */
	ComM_ChannelType* CddGenericNmComMNetworkHandleRef ;
} Cdd_GenericNmLowerLayerChannelType ;

/* Parameters that are necessary for the configuration of a Complex Device Driver that serves as
 *  the LowerLayer of the Generic NM module.
 */
typedef struct Cdd_GenericNmLowerLayerContributionType_tag
{
	Cdd_GenericNmLowerLayerChannelType* CddGenericNmLowerLayerChannel ;
} Cdd_GenericNmLowerLayerContributionType ;

/* This container specifies Rx PDUs that are exchanged between the CDD and the standardized BSW
 *  module.
 */
typedef struct Cdd_PduRLowerLayerRxPduType_tag
{
/* ECU wide unique, symbolic handle for the Pdu. */
	uint16 CddPduRLowerLayerHandleId ;
/* Reference to the "global" Pdu structure to allow harmonization of handle IDs in the COM-Stack. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* CddPduRLowerLayerPduRef ;
} Cdd_PduRLowerLayerRxPduType ;

/* This container specifies Tx PDUs that are exchanged between the CDD and the standardized BSW
 *  module.
 */
typedef struct Cdd_PduRLowerLayerTxPduType_tag
{
	uint16 CddPduRLowerLayerHandleId ;
/* Reference to the "global" Pdu structure to allow harmonization of handle IDs in the COM-Stack. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* CddPduRLowerLayerPduRef ;
} Cdd_PduRLowerLayerTxPduType ;

/* Parameters that are necessary for the configuration of a Complex Device Driver that serves as
 *  the LowerLayer of the Pdu Router module.
 */
typedef struct Cdd_PduRLowerLayerContributionType_tag
{
	Cdd_PduRLowerLayerRxPduType* CddPduRLowerLayerRxPdu ;
	Cdd_PduRLowerLayerTxPduType* CddPduRLowerLayerTxPdu ;
} Cdd_PduRLowerLayerContributionType ;

/* This container specifies Rx PDUs that are exchanged between the CDD and the standardized BSW
 *  module.
 */
typedef struct Cdd_PduRUpperLayerRxPduType_tag
{
/* ECU wide unique, symbolic handle for the Pdu. */
	uint16 CddPduRUpperLayerHandleId ;
/* Reference to the "global" Pdu structure to allow harmonization of handle IDs in the COM-Stack. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* CddPduRUpperLayerPduRef ;
} Cdd_PduRUpperLayerRxPduType ;

/* This container specifies Tx PDUs that are exchanged between the CDD and the standardized BSW
 *  module.
 */
typedef struct Cdd_PduRUpperLayerTxPduType_tag
{
	uint16 CddPduRUpperLayerHandleId ;
/* Reference to the "global" Pdu structure to allow harmonization of handle IDs in the COM-Stack. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* CddPduRUpperLayerPduRef ;
} Cdd_PduRUpperLayerTxPduType ;

/* Parameters that are necessary for the configuration of a Complex Device Driver that serves as
 *  the UpperLayer of the Pdu Router module.
 */
typedef struct Cdd_PduRUpperLayerContributionType_tag
{
	Cdd_PduRUpperLayerRxPduType* CddPduRUpperLayerRxPdu ;
	Cdd_PduRUpperLayerTxPduType* CddPduRUpperLayerTxPdu ;
} Cdd_PduRUpperLayerContributionType ;

/* Function name to be called when the partition which is triggering the complex driver is stopped. */
/* TODO: 
 * typedef void (*Cdd_PartitionStoppedFunctionNameType)(void);
 */

/* Contribution of COM Stack modules. */
typedef struct Cdd_ComStackContributionType_tag
{
	Cdd_ComIfUpperLayerContributionType* CddComIfUpperLayerContribution ;
	Cdd_ComMLowerLayerContributionType* CddComMLowerLayerContribution ;
	Cdd_GenericNmLowerLayerContributionType* CddGenericNmLowerLayerContribution ;
	Cdd_PduRLowerLayerContributionType* CddPduRLowerLayerContribution ;
	Cdd_PduRUpperLayerContributionType* CddPduRUpperLayerContribution ;
} Cdd_ComStackContributionType ;

/* This optional container holds the partition interaction configuration. */
typedef struct Cdd_EcucPartitionInteractionType_tag
{
	Cdd_PartitionStoppedFunctionNameType CddPartitionStoppedFunctionName ;
/* Reference to the "EcucPartition" which executes the software which triggers the CDD. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPartitionCollection/EcucPartition */
	EcuC_PartitionType* CddEcucPartitionRef ;
} Cdd_EcucPartitionInteractionType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* CDD_TYPES_H */

