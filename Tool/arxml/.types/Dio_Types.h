/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef DIO_TYPES_H
#define DIO_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Configuration of an individual DIO channel. Besides a HW specific channel name which is typically
 *  fixed for a specific micro controller, additional symbolic names can be defined per channel.
 */
typedef struct Dio_ChannelType_tag
{
/* Channel Id of the DIO channel. This value will be assigned to the symbolic names. */
	uint32 DioChannelId ;
} Dio_ChannelType ;

/* Definition and configuration of DIO channel groups. A channel group represents several adjoining
 *  DIO channels represented by a logical group.
 */
typedef struct Dio_ChannelGroupType_tag
{
/* This parameter contains the code fragment that has to be inserted in the API call of the calling
 *  module to get the address of the variable in memory which holds the channel group information.
 *  Example values are "&MyDioGroup1" or "&MyDioGroupArray[0]"
 */
/* The DIO channel group is identified in DIO API by a pointer to a data structure (of type Dio_ChannelGroupType).
 *  That data structure contains the channel group information.
 */
	char* DioChannelGroupIdentification ;
/* group. 
 *                                                         The channels shall consist of adjoining
 *  bits in the same port.
 *                                                         The data type depends on the port width.
 */
/* This shall be the mask which defines the positions of the channel */
	uint32 DioPortMask ;
/* from the LSB. This value can be derived from DioPortMask.
 * 
 *                                                         calculationFormula = Position of the
 *  first bit of DioPortMask which is set to '1' counted from LSB
 */
/* The position of the Channel Group on the port, counted */
	uint8 DioPortOffset ;
} Dio_ChannelGroupType ;

/* Configuration of individual DIO ports, consisting of channels and possible channel groups. */
typedef struct Dio_PortType_tag
{
/* Note hat this container definition does not explicitly 
 *                                                 define a symbolic name parameter. Instead, the
 *  container's short name will be used in the Ecu Configuration Description to specify the symbolic
 *  name of the channel.
 */
	Dio_ChannelType* DioChannel ;
/* Note hat this container definition does not explicitly 
 *                                                 define a symbolic name parameter. Instead, the
 *  container's short name will be used in the Ecu Configuration Description to specify the symbolic
 *  name of the channel group.
 */
	Dio_ChannelGroupType* DioChannelGroup ;
/* assigned to the DIO port symbolic name (i.e. the SHORT-NAME of the DioPort container). */
/* Numeric identifier of the DIO port. Not all MCU ports may be used for DIO, thus there may be
 *  "gaps" in the list of all IDs. This value will be
 */
	uint32 DioPortId ;
} Dio_PortType ;

/* This container contains the configuration parameters and sub containers of the AUTOSAR DIO module.
 *  This container is a MultipleConfigurationContainer, i.e. this container and its sub-containers
 *  exist once per configuration set.
 */
typedef struct Dio_ConfigType_tag
{
/* Note that this container definition does not explicitly 
 *                                         define a symbolic name parameter. Instead, the container's
 *  short name will be used in the Ecu Configuration Description to specify the symbolic name of
 *  the port.
 */
	Dio_PortType* DioPort ;
} Dio_ConfigType ;

/* General DIO module configuration parameters. */
typedef struct Dio_GeneralType_tag
{
/* ON or OFF */
/* Switches the Development Error Detection and Notification */
	boolean DioDevErrorDetect ;
/* Adds / removes the service Dio_FlipChannel() from the code. */
	boolean DioFlipChannelApi ;
/* Adds / removes the service Dio_ GetVersionInfo() from the code. */
	boolean DioVersionInfoApi ;
} Dio_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* DIO_TYPES_H */

