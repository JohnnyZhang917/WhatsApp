/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef FRARTP_TYPES_H
#define FRARTP_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Describes the Rx SDU */
typedef struct FrArTp_RxSduType_tag
{
/* ImplementationType: PduIdType */
/* This is a unique identifier for a received message. This Id is used in the CancelReceive API call. */
	uint32 FrArTpSduRxId ;
/* Reference to a PDU in the global PDU structure. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* FrArTpRxSduRef ;
} FrArTp_RxSduType ;

/* Describes the Tx SDU */
typedef struct FrArTp_TxSduType_tag
{
/* ImplementationType: PduIdType */
/* This is a unique identifier for a received or a to be transmitted message. With this (and by
 *  means of e.g. a lookup table) the PDU Router can route the message appropriately without dealing
 *  with the particularities of the Transport Layer. This parameter can also be seen as the identifier
 *  of a connection.
 */
	uint32 FrArTpSduTxId ;
/* Reference to a PDU in the global PDU structure. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* FrArTpTxSduRef ;
} FrArTp_TxSduType ;

/* This container contains the configuration (parameters) of one FlexRay TP connection. */
typedef struct FrArTp_ConnectionType_tag
{
	FrArTp_RxSduType* FrArTpRxSdu ;
	FrArTp_TxSduType* FrArTpTxSdu ;
/* When the local instance is the sender, this is the Source Address within the TP frame. 
 *                                                         When the local instance is the receiver,
 *  this is the Target Address within the TP frame. 
 *                                                         Note that in case of 1 byte addressing
 *  only the values from 0x0000 - 0x00FF are valid.
 */
/* This parameter defines the Local Address for the respective connection. */
	uint16 FrArTpLa ;
/* Of course, if the channel to which the connection is configured has retry or acknowledgement
 *  enabled, no retry or acknowledgement will occur in case the connection is an 1:n connection.
 */
/* This parameter defines, whether this connection is an 1:1 ('false') or an 1:n ('true') connection. */
	boolean FrArTpMultRec ;
/* When the local instance is the sender, this is the Target Address within the TP frame. 
 *                                                         When the local instance is the receiver,
 *  this is the Source Address within the TP frame. 
 *                                                         Note that in case of 1 byte addressing
 *  only the values from 0x0000 - 0x00FF are valid.
 */
/* This parameter defines the Remote Address for the respective connection. */
	uint16 FrArTpRa ;
/* Each value defines a PDU to be used for this connection. Thus each value is a PDU-ID given in
 *  FrArTpPdu and this array cannot be longer than the array FrArTpPdu.
 */
/* Please note:
 *                                                         Only PDUs of the same size shall be
 *  used within a connection. 
 *                                                         Of course the PDU having the TxConfirmation
 *  configured has to be used by every connection.
 */
/* /AUTOSAR/EcucDefs/FrArTp/FrArTpMultipleConfig/FrArTpChannel/FrArTpPdu */
	FrArTp_PduType* FrArTpConPduRef ;
} FrArTp_ConnectionType ;

/* This parameter defines the direction of the PDU. */
typedef enum
{
	FRARTP_RX,
	FRARTP_TX
} FrArTp_PduDirectionType ;

/* Container to hold the PDU parameters. */
typedef struct FrArTp_PduType_tag
{
	FrArTp_PduDirectionType FrArTpPduDirection ;
/* ImplementationType: PduIdType */
/* This is the identifier of the FlexRay Interface PDUs (Fr N-PDU, Fr L-SDU) in which the Transport
 *  Layer Frames of this channel should be transmitted.
 */
	uint32 FrArTpPduId ;
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* FrArTpPduRef ;
} FrArTp_PduType ;

/* This parameter defines the direction of the PDU. */
typedef enum
{
	FRARTP_FC_RX,
	FRARTP_FC_TX
} FrArTp_PduFcDirectionType ;

/* This is the identifier of the FlexRay Interface PDUs (Fr N-PDU, Fr L-SDU) in which the Transport
 *  Layer Flow Control and Acknowledgement Frames of this channel should be transmitted.
 */
typedef struct FrArTp_PduFcType_tag
{
	FrArTp_PduFcDirectionType FrArTpPduFcDirection ;
/* This is the identifier of the FlexRay Interface PDUs (Fr N-PDU, Fr L-SDU) in which the Transport
 *  Layer Flow Control and Acknowledgement Frames of this channel should be transmitted.
 */
	uint32 FrArTpPduFcId ;
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* FrArTpPduFcRef ;
} FrArTp_PduFcType ;

/* This parameter defines the type of acknowledgement which is used for the specific channel. */
typedef enum
{
	FRARTP_ACK_WITHOUT_RT,
	FRARTP_ACK_WITH_RT,
	FRARTP_NO
} FrArTp_AckTypeType ;

/* This parameter states the addressing type this connection has. The meanings of the values are
 *  one byte and two byte.
 */
typedef enum
{
	FRARTP_OB,
	FRARTP_TB
} FrArTp_AdrTypeType ;

/* This specifies the maximum message length for the particular channel. */
typedef enum
{
	FRARTP_ISO,
	FRARTP_ISO6,
	FRARTP_L4G
} FrArTp_LmType ;

/* This container contains the configuration (parameters) of one FlexRay TP channel. */
typedef struct FrArTp_ChannelType_tag
{
/* A connection can only belong to one channel. */
	FrArTp_ConnectionType* FrArTpConnection ;
/* ImplementationType: PduInfoType */
	FrArTp_PduType* FrArTpPdu ;
/* ImplementationType: PduInfoType */
	FrArTp_PduFcType* FrArTpPduFc ;
	FrArTp_AckTypeType FrArTpAckType ;
	FrArTp_AdrTypeType FrArTpAdrType ;
/* The Id of the channel. */
	uint8 FrArTpChannelId ;
/* This parameter states the number of connections used in this channel. At least 256 shall be
 *  configurable here.
 */
	uint32 FrArTpConNum ;
/* Here can be specified, whether segmentation within a 1:n connection is allowed or not. */
	boolean FrArTpGrpSeg ;
	FrArTp_LmType FrArTpLm ;
/* This parameter defines the maximum number of trying to send a frame when a TIMEOUT AR occurs
 *  (depending on whether retry is configured).
 */
	uint8 FrArTpMaxAr ;
/* This parameter defines the maximum number of trying t osend a frame when a TIMEOUT AS occurs
 *  (depending on whether retry is configured)
 */
	uint8 FrArTpMaxAs ;
/* This parameter defines number of consecutive CFs between two FCs (block size). Valid values
 *  are 1 .. 16 when retry is activated, and 0 .. 255 otherwise.
 */
	uint8 FrArTpMaxBs ;
/* This parameter defines the maximum number of times the FrArTp should send a wait frame FC(WT).
 *  It is also used to limit the number of retries for PduR_FrArTpCopyTxData and PduR_FrArTpCopyRxData
 *  when no timer is active.
 */
	uint8 FrArTpMaxBufReq ;
/* This parameter defines the maximum number of trying to send a frame when the FrIf returns an
 *  error.
 */
	uint8 FrArTpMaxFrIf ;
/* This parameter defines the maximum number of retries (if retry is configured for the particular
 *  channel).
 */
	uint8 FrArTpMaxRn ;
/* This parameter defines the minimum amount of time between two succeeding CFs in seconds. Valid
 *  values are 0, 100s, 200s .. 900s, 1ms, 2ms .. 127ms. The value can be changed at runtime
 *  using the FrArTp_ChangeParameter interface.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpStMin ;
/* With this switch Transmit Cancellation can be turned on or off for this channel. */
	boolean FrArTpTc ;
/* It is obvious that FRARTP_TIME_BR + FRARTP_TIMEOUT_AR < FRARTP_TIMEOUT_BS must hold (because
 *  the transmission duration on the bus has also to be considered).
 * 
 *                                                 This parameter is defined in ISO 15765-2. It
 *  is contained in the configuration as a performance requirement.
 */
/* This parameter defines the time in seconds between receiving the last CF of a block or an FF-x
 *  (or SF-x) and sending out an FC or AF.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpTimeBr ;
/* This parameter defines the time in seconds of waiting for the next try (if retry is activated)
 *  to get a Tx or Rx buffer.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpTimeBuffer ;
/* This parameter defines the time in seconds between the sending of two consecutive CFs or  between
 *  reception of an FC or AF and sending of the next CF . It is obvious that FRARTP_TIME_CS + FRARTP_TIMEOUT_AS
 *  < FRARTP_TIMEOUT_CR must hold (because the transmission duration on the bus has also to be
 *  considered). This parameter is defined in ISO 15765-2. It is contained in the configuration
 *  as a performance requirement.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpTimeCs ;
/* This parameter defines the time in seconds of waiting for the next try (if retry is activated)
 *  to send via FrIf_Transmit.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpTimeFrIf ;
/* This parameter states the timeout in seconds between the PDU transmit request of the Transport
 *  Layer to the FlexRay Interface and the corresponding confirmation of the FlexRay Interface
 *  on the receiver side (for FC or AF).
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpTimeoutAr ;
/* group used in this connection) on the sender side (SF-x, FF-x, CF). */
/* This parameter states the timeout in seconds between the PDU transmit request for the first
 *  PDU of the group used in the current connection of the Transport Layer to the FlexRay Interface
 *  and the corresponding confirmation of the FlexRay Interface (when having sent the last PDU
 *  of the
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpTimeoutAs ;
/* This parameter defines the timeout in seconds for waiting for an FC or AF on the sender side
 *  in a 1:1 connection.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpTimeoutBs ;
/* This parameter defines the timeout value in seconds for waiting for a CF or FF-x (in case of
 *  retry) after receiving the last CF or after sending an FC or AF on the receiver side.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpTimeoutCr ;
/* This switch defines, whether within this channel the dedicated FC/ACK PDU (FrArTpPduFc) shall
 *  be used or not. If this is not used FC / ACK frames are sent using the normal IDs, otherwise
 *  only FrArTpPduFc shall be used for sending / receiving FC / ACK frames.
 */
	boolean FrArTpUsePduFc ;
} FrArTp_ChannelType ;

/* This container contains the general configuration (parameters) of the FlexRay TP. */
typedef struct FrArTp_GeneralType_tag
{
/* Preprocessor switch for defining the number of concurrent channels the module supports. Up to
 *  32 channels shall be definable here.
 */
	uint8 FrArTpChanNum ;
/* Preprocessor switch for enabling development error detection. */
	boolean FrArTpDevErrorDetect ;
/* Preprocessor switch for enabling the Acknowledgement and retry mechanisms. */
	boolean FrArTpHaveAckRt ;
/* Preprocessor switch for enabling segmentation of 1:n messages. */
	boolean FrArTpHaveGrpSeg ;
/* Preprocessor switch for enabling the mechanism for message longer than allowed by. */
	boolean FrArTpHaveLm ;
/* Preprocessor switch for enabling Transmit Cancellation. */
	boolean FrArTpHaveTc ;
/* This parameter contains the calling period of the TPs Main Function. The parameter is specified
 *  in seconds.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrArTpMainFuncCycle ;
/* Preprocessor switch for enabling the Version info API. */
	boolean FrArTpVersionInfoApi ;
} FrArTp_GeneralType ;

/* This container holds one or several multiple configuration sets. */
typedef struct FrArTp_MultipleConfigType_tag
{
	FrArTp_ChannelType* FrArTpChannel ;
} FrArTp_MultipleConfigType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* FRARTP_TYPES_H */

