/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef ECUM_TYPES_H
#define ECUM_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* This parameter describes the state part of the default shutdown target selected when the ECU
 *  comes out of reset. If EcuMStateSleep is selected, the parameter EcuMDefaultSleepModeRef selects
 *  the specific sleep mode.
 */
typedef enum
{
	ECUMSTATEOFF,
	ECUMSTATERESET,
	ECUMSTATESLEEP
} EcuM_DefaultStateType ;

/* This container describes the default shutdown target to be selected by EcuM. The actual shutdown
 *  target may be overridden by the EcuM_SelectShutdownTarget service.
 */
typedef struct EcuM_DefaultShutdownTargetType_tag
{
	EcuM_DefaultStateType EcuMDefaultState ;
/* If EcuMDefaultShutdownTarget is EcuMStateReset, this parameter selects the default reset mode.
 *  Otherwise this parameter may be ignored.
 */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMFlexConfiguration/EcuMResetMode */
	EcuM_ResetModeType* EcuMDefaultResetModeRef ;
/* If EcuMDefaultShutdownTarget is EcuMStateSleep, this parameter selects the default sleep mode.
 *  Otherwise this parameter may be ignored.
 */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMSleepMode */
	EcuM_SleepModeType* EcuMDefaultSleepModeRef ;
} EcuM_DefaultShutdownTargetType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus in case the corresponding error occurs. The EventId is taken from
 *  the referenced DemEventParameter's DemEventId value.
 */
typedef struct EcuM_DemEventParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when the error "ECUM_E_ALL_RUN_REQUESTS_KILLED"
 *  has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* ECUM_E_ALL_RUN_REQUESTS_KILLED ;
/* Reference to the DemEventParameter which shall be issued when the error "ECUM_E_CONFIGURATION_DATA_INCONSISTENT"
 *  has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* ECUM_E_CONFIGURATION_DATA_INCONSISTENT ;
/* Reference to the DemEventParameter which shall be issued when the error "ECUM_E_RAM_CHECK_FAILED"
 *  has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* ECUM_E_RAM_CHECK_FAILED ;
} EcuM_DemEventParameterRefsType ;

/* These containers describe the entries in a driver init list. */
typedef struct EcuM_DriverInitItemType_tag
{
/* Short name of the module to be initialized, e.g. Mcu, Gpt etc. */
	char* EcuMModuleID ;
/* If the service is Init and the parameter EcuMModuleConfigurationRef has been set for that module,
 *  the corresponding pointer to the init structure (<Module>_ConfigType) and in case of multiple
 *  instantiation an uint8 value to identify the instance of the module(<MSN>_CtrlIdx) shall be
 *  passed as arguments.
 */
/* The service to be called to initialize that module, e.g. Init, PreInit, Start etc. */
	char* EcuMModuleService ;
} EcuM_DriverInitItemType ;

/* Container for Init Block I. */
typedef struct EcuM_DriverInitListOneType_tag
{
	EcuM_DriverInitItemType* EcuMDriverInitItem ;
} EcuM_DriverInitListOneType ;

/* Container for Init Block 0. */
typedef struct EcuM_DriverInitListZeroType_tag
{
	EcuM_DriverInitItemType* EcuMDriverInitItem ;
} EcuM_DriverInitListZeroType ;

/* List of module IDs. */
typedef struct EcuM_DriverRestartListType_tag
{
	EcuM_DriverInitItemType* EcuMDriverInitItem ;
} EcuM_DriverRestartListType ;

/* These containers describe the configured sleep modes. */
typedef struct EcuM_SleepModeType_tag
{
/* This ID identifies this sleep mode in services like EcuM_SelectShutdownTarget. */
	uint8 EcuMSleepModeId ;
/* Flag, which is set true, if the CPU is suspended, halted, or powered off in the sleep mode.
 *  If the CPU keeps running in this sleep mode, then this flag must be set to false.
 */
	boolean EcuMSleepModeSuspend ;
/* This parameter is a reference to the corresponding MCU mode for this sleep mode. */
/* /AUTOSAR/EcucDefs/Mcu/McuModuleConfiguration/McuModeSettingConf */
	Mcu_ModeSettingConfType* EcuMSleepModeMcuModeRef ;
/* These parameters are references to the wakeup sources that shall be enabled for this sleep mode. */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource */
	EcuM_WakeupSourceType* EcuMWakeupSourceMask ;
} EcuM_SleepModeType ;

/* These containers describe the configured wakeup sources. */
typedef struct EcuM_WakeupSourceType_tag
{
/* When the timeout is not instantiated, there is no validation routine and the ECU Manager shall
 *  not validate the wakeup source.
 */
/* The validation timeout (period for which the ECU State Manager will wait for the validation
 *  of a wakeup event) can be defined for each wakeup source independently. The timeout is specified
 *  in seconds.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 EcuMValidationTimeout ;
/* This parameter defines the identifier of this wakeup source. */
	uint8 EcuMWakeupSourceId ;
/* This parameter describes if the wakeup source needs polling. */
	boolean EcuMWakeupSourcePolling ;
/* This parameter is a reference to a Network (channel) defined in the Communication Manager. No
 *  reference indicates that the wakeup source is not a communication channel.
 */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel */
	ComM_ChannelType* EcuMComMChannelRef ;
/* This parameter describes the mapping of reset reasons detected by the MCU driver into wakeup
 *  sources.
 */
/* /AUTOSAR/EcucDefs/Mcu/McuPublishedInformation/McuResetReasonConf */
	Mcu_ResetReasonConfType* EcuMResetReasonRef ;
} EcuM_WakeupSourceType ;

/* This container contains the common configuration (parameters) of the ECU State Manager. */
typedef struct EcuM_CommonConfigurationType_tag
{
	EcuM_DefaultShutdownTargetType* EcuMDefaultShutdownTarget ;
/* The standardized errors are provided in this container and can be extended by vendor specific
 *  error references.
 */
	EcuM_DemEventParameterRefsType* EcuMDemEventParameterRefs ;
/* This container holds a list of module IDs that will be initialised. Each module in the list
 *  will be called for initialisation in the list order.
 * 
 *                                                 All modules in this list are initilialised before
 *  the OS is started and so these modules require no OS support.
 */
	EcuM_DriverInitListOneType* EcuMDriverInitListOne ;
/* This container holds a list of module IDs that will be initialised. Each module in the list
 *  will be called for initialisation in the list order.
 * 
 *                                                 All modules in this list are initilialised before
 *  the post-build configuration has been loaded and the OS is initialized. Therefore, these modules
 *  may not use post-build configuration.
 */
	EcuM_DriverInitListZeroType* EcuMDriverInitListZero ;
/* EcuM2719: A configuration tool shall fill the callout EcuM_AL_DriverRestart with initialization
 *  calls to the listed drivers in the order in which they occur in the list.
 *                                                 EcuM2720: Entries in this list must appear in
 *  the same order as in the combined list of EcuM_DriverInitListOne and EcuM_DriverInitListTwo.
 *  This list may be a real subset though. In all other cases, the generation tool shall report
 *  an error.
 *                                                 The included container has the same structure
 *  as EcuM_DriverInitItem
 */
	EcuM_DriverRestartListType* EcuMDriverRestartList ;
/* The names of these containers specify the symbolic names of the different sleep modes. */
	EcuM_SleepModeType* EcuMSleepMode ;
	EcuM_WakeupSourceType* EcuMWakeupSource ;
/* A hash value generated across all pre-compile and link-time parameters of all BSW modules. This
 *  hash value is compared against a field in the EcuM_ConfigType and hence allows checking the
 *  consistency of the entire configuration.
 */
	uint64 EcuMConfigConsistencyHash ;
/* The default application mode loaded when the ECU comes out of reset. */
/* /AUTOSAR/EcucDefs/Os/OsAppMode */
	Os_AppModeType* EcuMDefaultAppMode ;
/* This parameter is a reference to a OS ressource which is used to bring the ECU into sleep mode. */
/* In case of multi core each core shall have an own OsResource. */
/* /AUTOSAR/EcucDefs/Os/OsResource */
	Os_ResourceType* EcuMOSResource ;
} EcuM_CommonConfigurationType ;

/* Container for Init Block III. */
typedef struct EcuM_DriverInitListThreeType_tag
{
	EcuM_DriverInitItemType* EcuMDriverInitItem ;
} EcuM_DriverInitListThreeType ;

/* Container for Init Block II. */
typedef struct EcuM_DriverInitListTwoType_tag
{
	EcuM_DriverInitItemType* EcuMDriverInitItem ;
} EcuM_DriverInitListTwoType ;

/* These containers describe the identifiers that are needed to refer to a software component or
 *  another appropriate entity in the system which is designated to request the RUN state. Application
 *  requestors refer to entities above RTE, system requestors to entities below RTE (e.g. Communication
 *  Manager).
 */
typedef struct EcuM_FixedUserConfigType_tag
{
/* Parameter used to identify one user. */
	uint8 EcuMFixedUser ;
} EcuM_FixedUserConfigType ;

/* These containers describe the structures and the following configuration items describe its
 *  elements. These structures are concatenated to build a list as indicated by Figure 27 - Configuration
 *  Container Diagram.
 */
typedef struct EcuM_TTIIType_tag
{
/* This parameter defines the divisor preload value. */
	uint64 EcuMDivisor ;
/* This configuration parameter is a reference to a configured sleep mode that is used for TTII. */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMSleepMode */
	EcuM_SleepModeType* EcuMSleepModeRef ;
/* This parameter is a reference to the next sleep mode in the TTII protocol. */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMSleepMode */
	EcuM_SleepModeType* EcuMSuccessorRef ;
} EcuM_TTIIType ;

/* This container contains the configuration (parameters) of the EcuMFixed. */
typedef struct EcuM_FixedConfigurationType_tag
{
/* This container holds a list of module IDs that will be initialised. Each module in the list
 *  will be called for initialisation in the list order.
 * 
 *                                                 All modules in this list are initilialised after
 *  the OS is started and so these modules may use OS support. These modules may also rely on the
 *  Nvram ReadAll job to have provided all data.
 */
	EcuM_DriverInitListThreeType* EcuMDriverInitListThree ;
/* This container holds a list of module IDs that will be initialised. Each module in the list
 *  will be called for initialisation in the list order.
 * 
 *                                                 All modules in this list are initilialised after
 *  the OS is started and so these modules may use OS support. These modules may not rely on the
 *  Nvram ReadAll job to have provided all data.
 */
	EcuM_DriverInitListTwoType* EcuMDriverInitListTwo ;
	EcuM_FixedUserConfigType* EcuMFixedUserConfig ;
/* The list must contain at least one element when ECUM_TTII_ENABLED is set to true. */
	EcuM_TTIIType* EcuMTTII ;
/* Period given in seconds for which the ECU State Manager will wait until it considers a ReadAll
 *  job of the NVRAM Manager as failed.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 EcuMNvramReadallTimeout ;
/* Period given in seconds for which the ECU State Manager will wait until it considers a WriteAll
 *  job of the NVRAM Manager as failed.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 EcuMNvramWriteallTimeout ;
/* stay in RUN state even when no one requests RUN. This duration should be long at least as long
 *  as a SW-Cs needs to request RUN.
 */
/* Duration given in seconds for which the ECU State Manager will */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 EcuMRunMinimumDuration ;
/* These parameters contain references to the init structure of the corresponding BSW module. */
	uint8 EcuMFixedModuleConfigurationRefWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Adc/AdcConfigSet */
		Adc_ConfigSetType* AdcConfigSet;
/* /AUTOSAR/EcucDefs/Can/CanConfigSet */
		Can_ConfigSetType* CanConfigSet;
/* /AUTOSAR/EcucDefs/CanIf/CanIfInitCfg */
		CanIf_InitCfgType* CanIfInitCfg;
/* /AUTOSAR/EcucDefs/CanNm/CanNmGlobalConfig */
		CanNm_GlobalConfigType* CanNmGlobalConfig;
/* /AUTOSAR/EcucDefs/CanSM/CanSMConfiguration */
		CanSM_ConfigurationType* CanSMConfiguration;
/* /AUTOSAR/EcucDefs/CanTp/CanTpConfig */
		CanTp_ConfigType* CanTpConfig;
/* /AUTOSAR/EcucDefs/CanTrcv/CanTrcvConfigSet */
		CanTrcv_ConfigSetType* CanTrcvConfigSet;
/* /AUTOSAR/EcucDefs/Com/ComConfig */
		Com_ConfigType* ComConfig;
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet */
		ComM_ConfigSetType* ComMConfigSet;
/* /AUTOSAR/EcucDefs/Dbg/DbgMultipleConfigurationContainer */
		Dbg_MultipleConfigurationContainerType* DbgMultipleConfigurationContainer;
/* /AUTOSAR/EcucDefs/Dcm/DcmConfigSet */
		Dcm_ConfigSetType* DcmConfigSet;
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet */
		Dem_ConfigSetType* DemConfigSet;
/* /AUTOSAR/EcucDefs/Dio/DioConfig */
		Dio_ConfigType* DioConfig;
/* /AUTOSAR/EcucDefs/Dlt/DltMultipleConfigurationContainer */
		Dlt_MultipleConfigurationContainerType* DltMultipleConfigurationContainer;
/* /AUTOSAR/EcucDefs/Eep/EepInitConfiguration */
		Eep_InitConfigurationType* EepInitConfiguration;
/* /AUTOSAR/EcucDefs/Eth/EthConfigSet */
		Eth_ConfigSetType* EthConfigSet;
/* /AUTOSAR/EcucDefs/EthIf/EthIfConfigSet */
		EthIf_ConfigSetType* EthIfConfigSet;
/* /AUTOSAR/EcucDefs/EthTrcv/EthTrcvConfigSet */
		EthTrcv_ConfigSetType* EthTrcvConfigSet;
/* /AUTOSAR/EcucDefs/FiM/FiMConfigSet */
		FiM_ConfigSetType* FiMConfigSet;
/* /AUTOSAR/EcucDefs/Fls/FlsConfigSet */
		Fls_ConfigSetType* FlsConfigSet;
/* /AUTOSAR/EcucDefs/FlsTst/FlsTstConfigSet */
		FlsTst_ConfigSetType* FlsTstConfigSet;
/* /AUTOSAR/EcucDefs/FrArTp/FrArTpMultipleConfig */
		FrArTp_MultipleConfigType* FrArTpMultipleConfig;
/* /AUTOSAR/EcucDefs/FrIf/FrIfConfig */
		FrIf_ConfigType* FrIfConfig;
/* /AUTOSAR/EcucDefs/Fr/FrMultipleConfiguration */
		Fr_MultipleConfigurationType* FrMultipleConfiguration;
/* /AUTOSAR/EcucDefs/FrNm/FrNmChannelConfig */
		FrNm_ChannelConfigType* FrNmChannelConfig;
/* /AUTOSAR/EcucDefs/FrSM/FrSMConfig */
		FrSM_ConfigType* FrSMConfig;
/* /AUTOSAR/EcucDefs/FrTp/FrTpMultipleConfig */
		FrTp_MultipleConfigType* FrTpMultipleConfig;
/* /AUTOSAR/EcucDefs/Gpt/GptChannelConfigSet */
		Gpt_ChannelConfigSetType* GptChannelConfigSet;
/* /AUTOSAR/EcucDefs/Icu/IcuConfigSet */
		Icu_ConfigSetType* IcuConfigSet;
/* /AUTOSAR/EcucDefs/IpduM/IpduMConfig */
		IpduM_ConfigType* IpduMConfig;
/* /AUTOSAR/EcucDefs/J1939Tp/J1939TpConfiguration */
		J1939Tp_ConfigurationType* J1939TpConfiguration;
/* /AUTOSAR/EcucDefs/Lin/LinGlobalConfig */
		Lin_GlobalConfigType* LinGlobalConfig;
/* /AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig */
		LinIf_GlobalConfigType* LinIfGlobalConfig;
/* /AUTOSAR/EcucDefs/LinSM/LinSMConfigSet */
		LinSM_ConfigSetType* LinSMConfigSet;
/* /AUTOSAR/EcucDefs/LinTp/LinTpGlobalConfig */
		LinTp_GlobalConfigType* LinTpGlobalConfig;
/* /AUTOSAR/EcucDefs/Mcu/McuModuleConfiguration */
		Mcu_ModuleConfigurationType* McuModuleConfiguration;
/* /AUTOSAR/EcucDefs/PduR/PduRRoutingTables */
		PduR_RoutingTablesType* PduRRoutingTables;
/* /AUTOSAR/EcucDefs/Port/PortConfigSet */
		Port_ConfigSetType* PortConfigSet;
/* /AUTOSAR/EcucDefs/Pwm/PwmChannelConfigSet */
		Pwm_ChannelConfigSetType* PwmChannelConfigSet;
/* /AUTOSAR/EcucDefs/Rte/RtePostBuildVariantConfiguration */
		Rte_PostBuildVariantConfigurationType* RtePostBuildVariantConfiguration;
/* /AUTOSAR/EcucDefs/SoAd/SoAdDoIpConfig */
		SoAd_DoIpConfigType* SoAdDoIpConfig;
/* /AUTOSAR/EcucDefs/Spi/SpiDriver */
		Spi_DriverType* SpiDriver;
/* /AUTOSAR/EcucDefs/UdpNm/UdpNmGlobalConfig */
		UdpNm_GlobalConfigType* UdpNmGlobalConfig;
/* /AUTOSAR/EcucDefs/WdgM/WdgMConfigSet */
		WdgM_ConfigSetType* WdgMConfigSet;
/* /AUTOSAR/EcucDefs/Wdg/WdgSettingsConfig */
		Wdg_SettingsConfigType* WdgSettingsConfig;
/* /AUTOSAR/EcucDefs/Xcp/XcpConfig */
		Xcp_ConfigType* XcpConfig;
	} EcuMFixedModuleConfigurationRef ;
/* These parameters contain references to the ComMChannels for which EcuM has to call ComM_CommunicationAllowed.
 */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel */
	ComM_ChannelType* EcuMComMCommunicationAllowedList ;
/* This parameter is a reference to the normal MCU mode to be restored after a sleep. */
/* /AUTOSAR/EcucDefs/Mcu/McuModuleConfiguration/McuModeSettingConf */
	Mcu_ModeSettingConfType* EcuMNormalMcuModeRef ;
} EcuM_FixedConfigurationType ;

/* These containers describe the configured alarm clocks. */
typedef struct EcuM_AlarmClockType_tag
{
/* This ID identifies this alarmclock. */
	uint8 EcuMAlarmClockId ;
/* This parameter allows to define a timout for this alarm clock. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 EcuMAlarmClockTimeOut ;
/* This parameter allows an alarm to be assigned to a user. */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMFlexConfiguration/EcuMFlexUserConfig */
	EcuM_FlexUserConfigType* EcuMAlarmClockUser ;
} EcuM_AlarmClockType ;

/* These containers describe the identifiers that are needed to refer to a software component or
 *  another appropriate entity in the system which uses the EcuMFlex Interfaces.
 */
typedef struct EcuM_FlexUserConfigType_tag
{
/* Parameter used to identify one user. */
	uint8 EcuMFlexUser ;
/* Denotes in which "EcucPartition" the user of the EcuM is executed. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPartitionCollection/EcucPartition */
	EcuC_PartitionType* EcuMFlexEcucPartitionRef ;
} EcuM_FlexUserConfigType ;

/* This container describes the collection of allowed users which are allowed to call the EcuM_GoDown
 *  API.
 */
typedef struct EcuM_GoDownAllowedUsersType_tag
{
/* These parameters describe the references to the users which are allowed to call the EcuM_GoDown
 *  API.
 */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMFlexConfiguration/EcuMFlexUserConfig */
	EcuM_FlexUserConfigType* EcuMGoDownAllowedUserRef ;
} EcuM_GoDownAllowedUsersType ;

/* These containers describe the configured reset modes. */
typedef struct EcuM_ResetModeType_tag
{
/* This ID identifies this reset mode in services like EcuM_SelectShutdownTarget. */
	uint8 EcuMResetModeId ;
} EcuM_ResetModeType ;

/* This container describes the collection of allowed users which are allowed to call the EcuM_SetClock
 *  API.
 */
typedef struct EcuM_SetClockAllowedUsersType_tag
{
/* These parameters describe the references to the users which are allowed to call the EcuM_SetClock
 *  API.
 */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMFlexConfiguration/EcuMFlexUserConfig */
	EcuM_FlexUserConfigType* EcuMSetClockAllowedUserRef ;
} EcuM_SetClockAllowedUsersType ;

/* These containers describe the configured shut down or reset causes. */
typedef struct EcuM_ShutdownCauseType_tag
{
/* This ID identifies this shut down cause. */
	uint8 EcuMShutdownCauseId ;
} EcuM_ShutdownCauseType ;

/* These containers describe the configured shut down targets. */
typedef struct EcuM_ShutdownTargetType_tag
{
/* This ID identifies this shut down target in services like EcuM_SelectShutdownTarget. */
	uint8 EcuMShutdownTargetId ;
} EcuM_ShutdownTargetType ;

/* This container contains the configuration (parameters) of the EcuMFlex. */
typedef struct EcuM_FlexConfigurationType_tag
{
/* The name of these conatiners allows giving a symbolic name to one alarm clock. */
	EcuM_AlarmClockType* EcuMAlarmClock ;
	EcuM_FlexUserConfigType* EcuMFlexUserConfig ;
	EcuM_GoDownAllowedUsersType* EcuMGoDownAllowedUsers ;
/* The name of these containers allows one of the following symbolic names to be given to the different
 *  reset modes:
 *                                                 - ECUM_RESET_MCU
 *                                                 - ECUM_RESET_WDGM
 *                                                 - ECUM_RESET_IO.
 */
	EcuM_ResetModeType* EcuMResetMode ;
	EcuM_SetClockAllowedUsersType* EcuMSetClockAllowedUsers ;
/* The name of these containers allows to give one of the following symbolic names to the diffenrent
 *  shut down causes:
 *                                                 - ECUM_CAUSE_ECU_STATE - ECU state machine entered
 *  a state for shutdown,
 *                                                 - ECUM_CAUSE_WDGM - WdgM detected failure,
 *                                                 - ECUM_CAUSE_DCM - Dcm requests shutdown (split
 *  into UDS services?),
 *                                                 - and values from configuration.
 */
	EcuM_ShutdownCauseType* EcuMShutdownCause ;
/* The name of these containers allows to give symbolic names to the different shut down targets. */
	EcuM_ShutdownTargetType* EcuMShutdownTarget ;
/* These parameters contain references to the init structure of the corresponding BSW module. */
	uint8 EcuMFlexModuleConfigurationRefWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Adc/AdcConfigSet */
		Adc_ConfigSetType* AdcConfigSet;
/* /AUTOSAR/EcucDefs/Can/CanConfigSet */
		Can_ConfigSetType* CanConfigSet;
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet */
		Dem_ConfigSetType* DemConfigSet;
/* /AUTOSAR/EcucDefs/Fls/FlsConfigSet */
		Fls_ConfigSetType* FlsConfigSet;
/* /AUTOSAR/EcucDefs/Gpt/GptChannelConfigSet */
		Gpt_ChannelConfigSetType* GptChannelConfigSet;
/* /AUTOSAR/EcucDefs/Icu/IcuConfigSet */
		Icu_ConfigSetType* IcuConfigSet;
/* /AUTOSAR/EcucDefs/Lin/LinGlobalConfig */
		Lin_GlobalConfigType* LinGlobalConfig;
/* /AUTOSAR/EcucDefs/Mcu/McuModuleConfiguration */
		Mcu_ModuleConfigurationType* McuModuleConfiguration;
/* /AUTOSAR/EcucDefs/Port/PortConfigSet */
		Port_ConfigSetType* PortConfigSet;
/* /AUTOSAR/EcucDefs/Pwm/PwmChannelConfigSet */
		Pwm_ChannelConfigSetType* PwmChannelConfigSet;
/* /AUTOSAR/EcucDefs/Spi/SpiDriver */
		Spi_DriverType* SpiDriver;
/* /AUTOSAR/EcucDefs/WdgM/WdgMConfigSet */
		WdgM_ConfigSetType* WdgMConfigSet;
/* /AUTOSAR/EcucDefs/Wdg/WdgSettingsConfig */
		Wdg_SettingsConfigType* WdgSettingsConfig;
	} EcuMFlexModuleConfigurationRef ;
/* This parameter is a reference to the normal MCU mode to be restored after a sleep. */
/* /AUTOSAR/EcucDefs/Mcu/McuModuleConfiguration/McuModeSettingConf */
	Mcu_ModeSettingConfType* EcuMNormalMcuModeRef ;
} EcuM_FlexConfigurationType ;

/* This container contains the configuration (parameters) of the ECU State Manager. */
typedef struct EcuM_ConfigurationType_tag
{
	EcuM_CommonConfigurationType* EcuMCommonConfiguration ;
/* Only applicable if EcuMFixed is implemented. */
	EcuM_FixedConfigurationType* EcuMFixedConfiguration ;
/* Only applicable if EcuMFlex is implemented. */
	EcuM_FlexConfigurationType* EcuMFlexConfiguration ;
} EcuM_ConfigurationType ;

/* This container holds the general, pre-compile configuration parameters for the EcuMFixed. */
typedef struct EcuM_FixedGeneralType_tag
{
/* This configuration parameter defines whether the communication  manager is supported by EcuM.
 *  This feature is presented for development purpose to compile out the communication manager
 *  in the early debugging phase.
 */
	boolean EcuMIncludeComM ;
/* This configuration parameter defines whether the non volatile memory manager is supported by
 *  EcuM. This feature is presented for development purpose to compile out the volatile memory
 *  manager in the early debugging phase.
 */
	boolean EcuMIncludeNvM ;
/* If NVRAM manager is enabled but both flash and EEPROM driver are missing, then an error shall
 *  be flagged by the configuration tool
 */
	boolean EcuMIncludeNvramMgr ;
/* Boolean switch to enable / disable TTII */
	boolean EcuMTTIIEnabled ;
/* This configuration parameter references the initial sleep mode to be used by TTII when TTII
 *  is activated after a RUN mode.
 */
/* EcuM2785: Whenever RUN mode is reached, the TTII protocol shall be reset to use the wakeup source
 *  referenced by this parameter.
 *                                         This configuration parameter is a human readable name
 *  for a TTII wakeup source which is only needed by the configuration tool. For imlementation
 *  on the ECU, this parameter may be dropped and replaced by a generated list index of EcuM_TTII.
 */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource */
	EcuM_WakeupSourceType* EcuMTTIIWakeupSourceRef ;
} EcuM_FixedGeneralType ;

/* This container holds the general, pre-compile configuration parameters for the EcuMFlex. */
typedef struct EcuM_FlexGeneralType_tag
{
/* This flag indicates whether the optional AlarmClock feature is present. */
	boolean EcuMAlarmClockPresent ;
/* Switches the defensive behaviour on or off. */
	boolean EcuMEnableDefBehaviour ;
/* If false, no reset loop detection is performed. */
	boolean EcuMResetLoopDetection ;
/* This parameter describes the reference to the EcuMWakeupSource being used for the EcuM AlarmClock. */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource */
	EcuM_WakeupSourceType* EcuMAlarmWakeupSource ;
} EcuM_FlexGeneralType ;

/* This container holds the general, pre-compile configuration parameters. */
typedef struct EcuM_GeneralType_tag
{
/* If false, no debug artifacts (e.g. calls to DET) shall remain in the executable object. Initialization
 *  of DET, however is controlled by configuration of optional BSW modules.
 */
	boolean EcuMDevErrorDetect ;
/* If enabled, the according BSW module will be included to the ECU State Manager. */
	boolean EcuMIncludeDem ;
/* If defined, the according BSW module will be initialized by the ECU State Manager */
	boolean EcuMIncludeDet ;
/* Unit: [s] */
/* This parameter defines the schedule period of EcuM_MainFunction. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 EcuMMainFunctionPeriod ;
/* Switches the version info API on or off */
	boolean EcuMVersionInfoApi ;
} EcuM_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* ECUM_TYPES_H */

