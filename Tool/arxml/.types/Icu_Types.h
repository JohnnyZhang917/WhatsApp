/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef ICU_TYPES_H
#define ICU_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Notification function for signal notification. */
/* TODO: 
 * typedef void (*Icu_SignalNotificationType)(void);
 */

/* This container contains the configuration (parameters) in case the measurement mode is "IcuSignalEdgeDetection"
 */
typedef struct Icu_SignalEdgeDetectionType_tag
{
	Icu_SignalNotificationType IcuSignalNotification ;
} Icu_SignalEdgeDetectionType ;

/* Configures the property that could be measured in case the mode is "IcuSignalMeasurement". */
typedef enum
{
	ICU_ACTIVE_TIME,
	ICU_DUTY_CYCLE,
	ICU_HIGH_TIME,
	ICU_LOW_TIME,
	ICU_PERIOD_TIME
} Icu_SignalMeasurementPropertyType ;

/* This container contains the configuration (parameters) in case the measurement mode is "IcuSignalMeasurement"
 */
typedef struct Icu_SignalMeasurementType_tag
{
/* This property can not be changed during runtime.
 * 
 *                                                         Implementation Type: Icu_SignalMeasurementPropertyType
 */
	Icu_SignalMeasurementPropertyType IcuSignalMeasurementProperty ;
} Icu_SignalMeasurementType ;

/* Configures the handling of the buffer in case the mode is "Timestamp" */
typedef enum
{
	ICU_CIRCULAR_BUFFER,
	ICU_LINEAR_BUFFER
} Icu_TimestampMeasurementPropertyType ;

/* Notification function if the number of requested timestamps */
/* TODO: 
 * typedef void (*Icu_TimestampNotificationType)(void);
 */

/* This container contains the configuration (parameters) in case the measurement mode is "IcuTimestamp"
 */
typedef struct Icu_TimestampMeasurementType_tag
{
/* Implementation Type: Icu_TimestampBufferType */
	Icu_TimestampMeasurementPropertyType IcuTimestampMeasurementProperty ;
/* (Notification interval > 0) are acquired. */
	Icu_TimestampNotificationType IcuTimestampNotification ;
} Icu_TimestampMeasurementType ;

/* This container contains the configuration (parameters) needed to configure a wakeup capable
 *  channel
 */
typedef struct Icu_WakeupType_tag
{
/* If the wakeup-capability is true the wakeup source referenced  is transmitted to the ECU State
 *  Manager (EcuM) .
 */
/* Implementation Type: reference to EcuM_WakeupSourceType */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource */
	EcuM_WakeupSourceType* IcuChannelWakeupInfo ;
} Icu_WakeupType ;

/* Configures the default-activation-edge which shall be used for this channel if there was no
 *  activation-edge configured by the call of service Icu_SetActivationCondition().
 */
typedef enum
{
	ICU_BOTH_EDGES,
	ICU_FALLING_EDGE,
	ICU_RISING_EDGE
} Icu_DefaultStartEdgeType ;

/* Configures the measurement mode of this channel. */
typedef enum
{
	ICU_MODE_EDGE_COUNTER,
	ICU_MODE_SIGNAL_EDGE_DETECT,
	ICU_MODE_SIGNAL_MEASUREMENT,
	ICU_MODE_TIMESTAMP
} Icu_MeasurementModeType ;

/* Configuration of an individual ICU channel. */
typedef struct Icu_ChannelType_tag
{
	Icu_SignalEdgeDetectionType* IcuSignalEdgeDetection ;
	Icu_SignalMeasurementType* IcuSignalMeasurement ;
	Icu_TimestampMeasurementType* IcuTimestampMeasurement ;
	Icu_WakeupType* IcuWakeup ;
/* Channel Id of the ICU channel. This value will be assigned to the symbolic name derived of the
 *  IcuChannel container short name.
 */
	uint16 IcuChannelId ;
/* In case the Measurement Mode is "IcuSignalMeasurement" and the properties "DutyCycle" or "Period"
 *  are set, the edge configured here is used as Default Period Start Edge.
 * 
 *                                                 Implementation Type: Icu_ActivationType
 */
	Icu_DefaultStartEdgeType IcuDefaultStartEdge ;
/* Implementation Type: Icu_MeasurementModeType */
	Icu_MeasurementModeType IcuMeasurementMode ;
/* true: Channel is wakeup capable.
 *                                                 false: Channel is not wakeup capable.
 */
/* Information about the wakeup-capability of this channel. */
	boolean IcuWakeupCapability ;
} Icu_ChannelType ;

/* This container is the base for a multiple configuration set */
typedef struct Icu_ConfigSetType_tag
{
	Icu_ChannelType* IcuChannel ;
/* calculationFormula = Number of configured Icu Channels
 * 
 *                                         Implementation Type: Icu_ChannelType
 */
/* This parameter contains the number of Channels configured. It will be gathered by tools during
 *  the configuration stage.
 */
	uint16 IcuMaxChannel ;
} Icu_ConfigSetType ;

/* Configuration of general ICU parameters. */
typedef struct Icu_GeneralType_tag
{
/* on or off.
 *                                         true: Enabled.
 *                                         false: Disabled.
 */
/* Switches the Development Error Detection and Notification */
	boolean IcuDevErrorDetect ;
/* Specifies the InstanceId of this module instance. If only one instance is present it shall have
 *  the Id 0.
 */
	uint8 IcuIndex ;
/* true: Report Wakeup source.
 *                                         false: Do not report Wakeup source.
 */
/* Switch for enabling Wakeup source reporting. */
	boolean IcuReportWakeupSource ;
} Icu_GeneralType ;

/* This container contains all configuration switches for configuring optional API services of
 *  the ICU driver.
 */
typedef struct Icu_OptionalApisType_tag
{
/* true: Icu_DeInit() can be used.
 *                                         false: Icu_DeInit() can not be used.
 */
/* Adds / removes the service Icu_DeInit() from the code. */
	boolean IcuDeInitApi ;
/* true: Icu_DisableWakeup() can be used.
 *                                         false: Icu_DisableWakeup() can not be used.
 */
/* Adds / removes the service Icu_DisableWakeup() from the code. */
	boolean IcuDisableWakeupApi ;
/* true: The services listed above can be used.
 *                                         false: The services listed above can not be used.
 */
/* Adds / removes all services related to the edge counting functionality as listed below, from
 *  the code: Icu_ResetEdgeCount(), Icu_EnableEdgeCount(), Icu_DisableEdgeCount(), Icu_GetEdgeNumbers().
 */
	boolean IcuEdgeCountApi ;
/* Icu_EnableEdgeDetection() and Icu_DisableEdgeDetection(). 
 * 
 *                                         true: These services can be used. 
 *                                         false: These services can not be used.
 */
/* Adds / removes the services related to the edge detection functionality, from the code: */
	boolean IcuEdgeDetectApi ;
/* true: Icu_EnableWakeup() can be used.
 *                                         false: Icu_EnableWakeup() can not be used.
 */
/* Adds / removes the service Icu_EnableWakeup() from the code. */
	boolean IcuEnableWakeupApi ;
/* true: Icu_GetDutyCycleValues() can be used.
 *                                         false: Icu_GetDutyCycleValues() can not be used.
 */
/* Adds / removes the service Icu_GetDutyCycleValues() from the code. */
	boolean IcuGetDutyCycleValuesApi ;
/* true: Icu_GetInputState() can be used.
 *                                         false: Icu_GetInputState() can not be used.
 */
/* Adds / removes the service Icu_GetInputState() from the code. */
	boolean IcuGetInputStateApi ;
/* true: Icu_GetTimeElapsed() can be used.
 *                                         false: Icu_GetTimeElapsed() can not be used.
 */
/* Adds / removes the service Icu_GetTimeElapsed() from the code. */
	boolean IcuGetTimeElapsedApi ;
/* true: Icu_GetVersionInfo() can be used.
 *                                         false: Icu_GetVersionInfo() can not be used.
 */
/* Adds / removes the service Icu_GetVersionInfo() from the code. */
	boolean IcuGetVersionInfoApi ;
/* true: Icu_SetMode() can be used.
 *                                         false: Icu_SetMode() can not be used.
 */
/* Adds / removes the service Icu_SetMode() from the code. */
	boolean IcuSetModeApi ;
/* true: Icu_StartSignalMeasurement() and Icu_StopSignalMeasurement() can be used.
 *                                         false: Icu_StartSignalMeasurement() and Icu_StopSignalMeasurement()
 *  can not be used.
 */
/* Adds / removes the services Icu_StartSignalMeasurement() and Icu_StopSignalMeasurement() from
 *  the code.
 */
	boolean IcuSignalMeasurementApi ;
/* true: The services listed above can be used.
 *                                         false: The services listed above can not be used.
 */
/* Adds / removes all services related to the timestamping functionality as listed below from the
 *  code: Icu_StartTimestamp(), Icu_StopTimestamp(), Icu_GetTimestampIndex().
 */
	boolean IcuTimestampApi ;
/* true: Icu_CheckWakeup() can be used. 
 *                                         false: Icu_CheckWakeup() cannot be used.
 */
/* Adds / removes the service Icu_CheckWakeup() from the code. */
	boolean IcuWakeupFunctionalityApi ;
} Icu_OptionalApisType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* ICU_TYPES_H */

