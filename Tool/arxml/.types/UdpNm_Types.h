/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef UDPNM_TYPES_H
#define UDPNM_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* This container describes the UdpNm RX PDU's. */
typedef struct UdpNm_RxPduType_tag
{
/* ID of the RxPdu that will be used by a RxIndication of the lower layer. */
	uint64 UdpNmRxPduId ;
/* The reference to a PDU in the global PDU structure described in the AUTOSAR ECU Configuration
 *  Specification. This reference will be used by the UdpNm module to derive the PDU Id.
 */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* UdpNmRxPduRef ;
} UdpNm_RxPduType ;

/* This container describes the UdpNm TX PDU's. */
typedef struct UdpNm_TxPduType_tag
{
/* Id of the TxPdu that will be used by a TxConfirmation from the lower layer. */
	uint64 UdpNmTxConfirmationPduId ;
/* The reference to a PDU in the global PDU structure described in the AUTOSAR ECU Configuration
 *  Specification. This reference will be used by the UdpNm module to derive the PDU Id.
 */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* UdpNmTxPduRef ;
} UdpNm_TxPduType ;

/* This optional container is used to configure the UserNm PDU. This container is only available
 *  if UdpNmComUserDataSupport is enabled.
 */
typedef struct UdpNm_UserDataTxPduType_tag
{
/* This parameter defines the Handle ID of the NM User Data I-PDU. */
	uint16 UdpNmTxUserDataPduId ;
/* Reference to the NM User Data I-PDU in the global PDU collection. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* UdpNmTxUserDataPduRef ;
} UdpNm_UserDataTxPduType ;

/* Defines the position of the control bit vector within the NM PACKET. */
typedef enum
{
	UDPNM_PDU_BYTE_0,
	UDPNM_PDU_BYTE_1,
	UDPNM_PDU_OFF
} UdpNm_PduCbvPositionType ;

/* Defines the position of the source node identifier within the NM PACKET. */
typedef enum
{
	UDPNM_PDU_BYTE_0,
	UDPNM_PDU_BYTE_1,
	UDPNM_PDU_OFF
} UdpNm_PduNidPositionType ;

/* This container contains the channel-specific configuration parameters of the UdpNm. */
typedef struct UdpNm_ChannelConfigType_tag
{
	UdpNm_RxPduType* UdpNmRxPdu ;
	UdpNm_TxPduType* UdpNmTxPdu ;
	UdpNm_UserDataTxPduType* UdpNmUserDataTxPdu ;
/* This parameter is only valid if UDPNM_PASSIVE_MODE_ENABLED is set to OFF and UDPNM_NODE_DETECTION_ENABLED
 *  is set to ON.
 */
/* Node identifier of local node. */
	uint8 UdpNmNodeId ;
/* The value of the parameter represents the location of the control bit vector in the NM PACKET
 *  (UDPNM_PDU_BYTE_0 means byte 0, UDPNM_PDU_BYTE_1 means byte 1, UDPNM_PDU_OFF means the control
 *  bit vector is not part of the NM PACKET)
 * 
 *                                                 See also UDPNM_PDU_NID_POSITION
 * 
 *                                                 if (UDPNM_PDU_CBV_POSITION != UDPNM_PDU_OFF
 *  && UDPNM_PDU_NID_POSITION != UDPNM_PDU_OFF) then UDPNM_PDU_CBV_POSITION != UDPNM_PDU_NID_POSITION
 * 
 *                                                 if (UDPNM_PDU_CBV_POSITION != UDPNM_PDU_OFF
 *  && UDPNM_PDU_NID_POSITION == UDPNM_PDU_OFF) then UDPNM_PDU_CBV_POSITION = UDPNM_PDU_BYTE0
 */
	UdpNm_PduCbvPositionType UdpNmPduCbvPosition ;
/* Valid values are within the range 0 <= UDPNM_PDU_LENGTH <= 8. */
/* Defines the length of the NM PACKET in bytes. */
	uint8 UdpNmPduLength ;
/* ImplementationType: UdpNm_PduPositionType
 * 
 *                                                 The value of the parameter represents the location
 *  of the source node identifier in the NM PACKET (UDPNM_PDU_BYTE_0 means byte 0, UDPNM_PDU_BYTE_1
 *  means byte 1, UDPNM_PDU_OFF means source node identifier is not part of the NM PACKET)
 * 
 *                                                 See also UDPNM_PDU_CBV_POSITION
 * 
 *                                                 if (UDPNM_PDU_NID_POSITION != UDPNM_PDU_OFF
 *  && UDPNM_PDU_CBV_POSITION != UDPNM_PDU_OFF) then UDPNM_PDU_NID_POSITION != UDPNM_PDU_CBV_POSITION
 * 
 *                                                 if (UDPNM_PDU_NID_POSITION != UDPNM_PDU_OFF
 *  && UDPNM_PDU_CBV_POSITION == UDPNM_PDU_OFF) then UDPNM_PDU_IND_POSITION = UDPNM_PDU_BYTE0
 */
	UdpNm_PduNidPositionType UdpNmPduNidPosition ;
/* The difference between UDPNM_PDU_LENGTH and applied standardized bytes (source node identifier
 *  and control bit vector) within the NM PACKET.
 * 
 *                                                 Valid values are 0x00..0x08.
 */
/* Defines the length of the user data contained in the NM PACKET. */
	uint8 UdpNmUserDataLength ;
/* Call cycle of UdpNm_MainFunction_x for the respective instance in [s]. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 UpdNmMainFunctionPeriod ;
/* < UDPNM_MSG_CYCLE_TIME
 * 
 *                                                 This parameter is only valid if UDPNM_PASSIVE_MODE_ENABLED
 *  is disabled.
 */
/* Time offset in the periodic transmission node. It determines the start delay of the transmission. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 UpdNmMsgCycleOffset ;
/* NM_TIMEOUT_TIME = n * UDPNM_MSG_CYCLE_TIME
 * 
 *                                                 This parameter is only valid if UDPNM_PASSIVE_MODE_ENABLED
 *  is disabled.
 */
/* Period of a NM-message. It determines the periodic rate in the "periodic transmission mode with
 *  bus load reduction" and is the basis for transmit scheduling in the "periodic transmission
 *  mode without bus load reduction".
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 UpdNmMsgCycleTime ;
/* This parameter is only valid if UDPNM_PASSIVE_MODE_ENABLED is disabled.
 * 
 *                                                 UDPNM_MSG_TIMEOUT_TIME should be a multiple
 *  of UDPNM_MSG_CYCLE_TIME.
 */
/* Transmission Timout of NM-message. If there is no transmission confirmation by the UDP Interface
 *  within this timeout, the UDPNM module shall gibe an error notification.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 UpdNmMsgTimeoutTime ;
/* It defines the time in [s] how long it shall take to recognize that all other nodes are ready
 *  to sleep.
 * 
 *                                                 Typically it should be equal to: n * UDPNM_MSG_CYCLE_TIME,
 *  where n denotes the number of NM packets that are normally sent before Remote Sleep Indication
 *  is detected.
 *                                                 The value of n decremented by one determines
 *  the amount of lost NM packets that can be tolerated by the Remote Sleep Indication procedure.
 */
/* Timeout for Remote Sleep Indication. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 UpdNmRemoteSleepIndTime ;
/* It defines the time in [s] how long the NM shall stay in the Repeat Message State.
 * 
 *                                                 Typically it should be equal to: n * UDPNM_MSG_CYCLE_TIME,
 *  where n denotes the number of NM packets that are normally sent in the Repeat Message State.
 *                                                 The value of n decremented by one determines
 *  the amount of lost NM packets that can be tolerated by the node detection procedure.
 *                                                 The value 0 denotes that no Repeat Message State
 *  is configured.
 *                                                 It means that Repeat Message State is transient
 *  what implicates that it is left immediately after entrance and in result no start-up stability
 *  is guaranteed and no node detection procedure is possible.
 */
/* Timeout for Repeat Message State. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 UpdNmRepeatMessageTime ;
/* It denotes the time in [s] how long the NM shall stay in the Network Mode before transition
 *  into Prepare Bus-Sleep Mode shall take place.
 * 
 *                                                 It shall be equal for all nodes in the cluster.
 *                                                 It shall be greater than UDPNM_MSG_CYCLE_TIME.
 *                                                 Typically, it should be equal to: x * UDPNM_MSG_CYCLE_TIME,
 *  where n denotes the number of NM PACKET cycle times in the Ready Sleep State before transition
 *  into the Bus-Sleep Mode is initiated.
 *                                                 The value of n decremented by one determines
 *  the amount of lost NM packets that can be tolerated by the coordination algorithm.
 */
/* Network Timeout for NM packets. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 UpdNmTimeoutTime ;
/* It denotes the time in [s] how long the NM shall stay in the Prepare Bus-Sleep Mode before transition
 *  into Bus-Sleep Mode shall take place.
 * 
 *                                                 It shall be equal for all nodes in the cluster.
 *                                                 It shall be long enough to empty all Tx-buffer
 *  empty.
 */
/* Timeout for bus calm down phase. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 UpdNmWaitBusSleepTime ;
/* This reference points to the unique channel defined by the ComMChannel and provides access to
 *  the unique channel index value in ComMChannelId.
 */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel */
	ComM_ChannelType* UdpNmComMNetworkHandleRef ;
} UdpNm_ChannelConfigType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct UdpNm_DemEventParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when the error "UdpNm initialization
 *  has failed, e.g. selected configuration set doesn't exist" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* UDPNM_E_INIT_FAILED ;
/* Reference to the DemEventParameter which shall be issued when the error "NM-Timeout Timer has
 *  abnormally expired outside of the Ready Sleep State" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* UDPNM_E_NETWORK_TIMEOUT ;
/* Reference to the DemEventParameter which shall be issued when the error "A call to the TCP/IP
 *  stack has failedA call to the TCP/IP stack has failed" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* UDPNM_E_TCPIP_TRANSMIT_ERROR ;
} UdpNm_DemEventParameterRefsType ;

/* This container contains all global configuration parameters of UDP NM configured from the NM
 *  Module perspective.
 */
typedef struct UdpNm_GlobalConfigType_tag
{
	UdpNm_ChannelConfigType* UdpNmChannelConfig ;
	UdpNm_DemEventParameterRefsType* UdpNmDemEventParameterRefs ;
/* This feature is required for gateway nodes only.
 *                                         It must not be defined if UDPNM_PASSIVE_MODE_ENABLED
 *  is defined.
 *                                         This parameter shall be derived from NM_BUS_SYNCHRONIZATION_ENABLED.
 */
/* Pre-processor switch for enabling bus synchronization support. */
	boolean UdpNmBusSynchronizationEnabled ;
/* This parameter shall be derived from NM_COM_CONTROL_ENABLED. */
/* Pre-processor switch for enabling the Communication Control support. */
	boolean UdpNmComControl_Enabled ;
/* Enable/disable the user data support. */
	boolean UdpNmComUserDataSupport ;
/* TRUE: Option is enabled
 * 
 *                                         FALSE: The parameter shall be FALSE by default and shall
 *  only be allowed to be TRUE if the parameter UDPNM_REMOTE_SLEEP_IND_ENABLED is TRUE.
 */
/* Enable/disable the NM Coordination algorithm to being able to initiate the synchronization algorithm.
 */
	boolean UdpNmCoordinatorEnabled ;
/* 0x00: passive coordinator only
 *                                         0x01 - 0x03: coordinator priority
 * 
 *                                         Only valid, if UDPNM_COORDINATOR_ENABLED is TRUE.
 */
/* Set the NM coordination ID for this gateway. */
	uint8 UdpNmCoordinatorId ;
/* Enables/disables the coordinator synchronisation support. */
	boolean UdpNmCoordinatorSyncSupport ;
/* Pre-processor switch for enabling development error detection support. */
	boolean UdpNmDevErrorDetect ;
/* Must not be defined if UDPNM_PASSIVE_MODE_ENABLED is defined. */
/* Pre-processor switch for enabling the asynchronous transmission of a NM PACKET upon bus-communication
 *  request in Prepare-Bus-Sleep mode.
 */
	boolean UdpNmImmediateRestartEnabled ;
/* This parameter shall be derived from NM_NODE_DETECTION_ENABLED.
 *                                         This parameter shall only be enabled if UDPNM_NODE_ID_ENABLED
 *  is defined.
 * 
 *                                         If(UdpNmPduCbvPosition != UDPNM_PDU_OFF) then Equal(NmNodeDetectionEnabled)
 *  else Equal(False).
 */
/* Pre-processor switch for enabling the node detection support. */
	boolean UdpNmNodeDetectionEnabled ;
/* This parameter shall be derived from NM_NODE_ID_ENABLED. */
/* Pre-processor switch for enabling the source node identifier. */
	boolean UdpNmNodeIdEnabled ;
/* Number of NM channels allowed within one ECU. */
	uint8 UdpNmNumberOfChannels ;
/* This parameter shall be derived from NM_PASSIVE_MODE_ENABLED. */
/* Pre-processor switch for enabling support of the Passive Mode. */
	boolean UdpNmPassiveModeEnabled ;
/* This parameter shall be derived from NM_PDU_RX_INDICATION_ENABLED. */
/* Pre-processor switch for enabling the PDU Rx Indication. */
	boolean UdpNmPduRxIndicationEnabled ;
/* This feature is required for gateway nodes only.
 *                                         It must not be defined if UDPNM_PASSIVE_MODE_ENABLED
 *  is defined.
 *                                         This parameter shall be derived from NM_REMOTE_SLEEP_IND_ENABLED.
 */
/* Pre-processor switch for enabling remote sleep indication support. */
	boolean UdpNmRemoteSleepIndEnabled ;
/* This parameter shall be derived from NM_REPEAT_MSG_IND_ENABLED. */
/* Enable/disable the notification that a RepeatMessageRequest bit has been received. */
	boolean UdpNmRepeatMsgIndEnabled ;
/* This parameter shall be derived from NM_STATE_CHANGE_ID_ENABLED. */
/* Pre-processor switch for enabling the UDP NM state change notification. */
	boolean UdpNmStateChangeIndEnabled ;
/* This parameter shall be derived from NM_USER_DATA_ENABLED. */
/* Pre-processor switch for enabling user data support. */
	boolean UdpNmUserDataEnabled ;
/* Pre-processor switch for enabling version info API support. */
	boolean UdpNmVersionInfoApi ;
} UdpNm_GlobalConfigType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* UDPNM_TYPES_H */

