/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef FRTRCV_TYPES_H
#define FRTRCV_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
typedef struct FrTrcv_AccessType_tag
{
} FrTrcv_AccessType ;

/* Only one SymbolicNameValue can be defined per container. Therefore this container is necessary. */
typedef struct FrTrcv_BranchIdContainerType_tag
{
/* Unique branch id. It is used by CDDs and internally. */
	uint8 FrTrcvBranchId ;
} FrTrcv_BranchIdContainerType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct FrTrcv_ChannelDemEventParameterRefsType_tag
{
/* Reference to configured DEM event to report "Error Status of Class B (SPI) transceiver bus errors
 *  where TrcvIdx is the transceiver index"
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FRTRCV_E_FR_BUSERROR_TRCV ;
/* Reference to configured DEM event to report "Error Status of Class A (GPIO) transceiver" */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FRTRCV_E_FR_ERRN_TRCV ;
} FrTrcv_ChannelDemEventParameterRefsType ;

/* This parameter defines the existence and the name of a callout function that enables the interrupt
 *  pin for the wakeup. If this parameter is omitted no callout shall take place.
 */
/* TODO: 
 * typedef void (*FrTrcv_EnableInterruptCalloutType)(void);
 */

/* State of FlexRay transceiver after power on. */
typedef enum
{
	FRTRCV_TRCVMODE_NORMAL,
	FRTRCV_TRCVMODE_RECEIVEONLY,
	FRTRCV_TRCVMODE_SLEEP,
	FRTRCV_TRCVMODE_STANDBY
} FrTrcv_InitStateType ;

/* Max baudrate for transceiver hardware type. Only used for validation purposes. Value shall be
 *  configured by configuration tool based on
 */
typedef enum
{
	FRTRCV_MAXBAUDRATE_FR_10M,
	FRTRCV_MAXBAUDRATE_FR_2M5,
	FRTRCV_MAXBAUDRATE_FR_5M0
} FrTrcv_MaxBaudrateType ;

/* Name of a C function which substitutes Dem_ReportErrorStatus. */
/* TODO: 
 * typedef void (*FrTrcv_DemReportErrorStatusConfigurationType)(void);
 */

/* Informs whether wake up is supported by polling or whether it is not supported. */
typedef enum
{
	FRTRCV_WAKEUP_BY_POLLING,
	FRTRCV_WAKEUP_NOT_SUPPORTED
} FrTrcv_WakeUpSupportType ;

/* Container gives FlexRay transceiver driver information about a single FlexRay transceiver channel. */
typedef struct FrTrcv_ChannelType_tag
{
	FrTrcv_AccessType* FrTrcvAccess ;
	FrTrcv_BranchIdContainerType* FrTrcvBranchIdContainer ;
	FrTrcv_ChannelDemEventParameterRefsType* FrTrcvChannelDemEventParameterRefs ;
/* Unique identifier of the FlexRay Transceiver Channel. */
	uint8 FrTrcvChannelId ;
/* Shall the related FlexRay transceiver channel be used? */
	boolean FrTrcvChannelUsed ;
/* Is ECU power supply controlled by this transceiver? */
	boolean FrTrcvControlsPowerSupply ;
	FrTrcv_EnableInterruptCalloutType FrTrcvEnableInterruptCallout ;
/* ImplementationType: FrTrcv_TrcvModeType */
	FrTrcv_InitStateType FrTrcvInitState ;
/* FRTRCV_HARDWARE_NAME and internal information about ability of this hardware typel. */
	FrTrcv_MaxBaudrateType FrTrcvMaxBaudrate ;
/* Is wake up by node supported? If FlexRay transceiver hardware does not support wake up by node
 *  value is always FALSE. If FlexRay transceiver hardware supports wake up by node value is TRUE
 *  or FALSE depending whether it is used or not.
 */
	boolean FrTrcvWakeupByBusUsed ;
/* Reference to the IcuChannel to enable/disable the interrupts for wakeups. */
/* /AUTOSAR/EcucDefs/Icu/IcuConfigSet/IcuChannel */
	Icu_ChannelType* FrTrcvIcuChannelRef ;
/* Reference to a wakeup source in the EcuM configuration. If */
/* FrTrcvWakeUpSupport is configured as FRTRCV_WAKEUP_NOT_SUPPORTED the 
 *                                         FrTrcvWakeupSourceRef is not needed.
 * 
 *                                         Implementation Type: reference to EcuM_WakeupSourceType
 */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource */
	EcuM_WakeupSourceType* FrTrcvWakeupSourceRef ;
} FrTrcv_ChannelType ;

/* Container gives FlexRay transceiver driver basic information. */
typedef struct FrTrcv_GeneralType_tag
{
	FrTrcv_DemReportErrorStatusConfigurationType FrTrcvDemReportErrorStatusConfiguration ;
/* If switched on, #define FRTRCV_DEV _ERROR_DETECT ON shall be generated. If switched off, #define
 *  FRTRCV_DEV_ERROR _DETECT OFF shall be generated. Define shall be part of file FrTrcv_Cfg.h.
 */
/* Switches development error detection and notification on and off. */
	boolean FrTrcvDevErrorDetect ;
/* Enable a functionality to check transceiver's state during communication. */
	boolean FrTrcvErrorCheckDuringCommunication ;
/* Enable a functionality to check transceiver's state while initialization process of FrTrcv. */
	boolean FrTrcvErrorCheckInInit ;
/* Switches version information API on and off. If switched off, function need not be present in
 *  compiled code.
 */
	boolean FrTrcvGetVersionInfo ;
/* Specifies the InstanceId of this module instance. If only one instance is present it shall have
 *  the Id 0.
 */
	uint8 FrTrcvIndex ;
/* Cyclic call time for function FrTrcvMainFunction in seconds. A call time of 0ms indicates no
 *  calls for this function. In this case function need not be present in compiled code.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrTrcvMainFunctionCycleTime ;
/* Specifies the number of retry count when error occurs while initialization process of FrTrcv. */
	uint8 FrTrcvRetryCountInInit ;
/* Wait count for transceiver state changes. */
	uint32 FrTrcvWaitCount ;
/* In case no wake up is supported by FlexRay transceiver hardware setting has to be always NO.
 *                                         Only in case wake up is supported by polling main function
 *  FlexRayTrcv_main has to be present in source code. In case of support for wake up either by
 *  polling wake up ability may be switched on or off for each channel of one FlexRay transceiver
 *  channel independently by FrTrcvWakeupByBusUsed.
 */
	FrTrcv_WakeUpSupportType FrTrcvWakeUpSupport ;
} FrTrcv_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* FRTRCV_TYPES_H */

