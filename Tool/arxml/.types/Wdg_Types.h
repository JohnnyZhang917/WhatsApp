/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef WDG_TYPES_H
#define WDG_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Represents the watchdog driver execution area is either from ROM(Flash) or RAM as required with
 *  the particular microcontroller.
 */
typedef enum
{
	WDG_RUNAREA_RAM,
	WDG_RUNAREA_ROM
} Wdg_RunAreaType ;

/* Location (memory address) of the watchdog trigger routine. */
/* TODO: 
 * typedef void (*Wdg_TriggerLocationType)(void);
 */

/* Watchdog trigger mode (toggle/window/both) */
typedef enum
{
	WDG_BOTH,
	WDG_TOGGLE,
	WDG_WINDOW
} Wdg_TriggerModeType ;

/* Configuration items for an external watchdog hardware */
typedef struct Wdg_ExternalConfigurationType_tag
{
/* Reference to either */
/* - a DioChannelGroup container in case the hardware watchdog is connected via DIO pins
 *                                                 - an SpiSequenceConfiguration container in case
 *  the watchdog hardware is accessed via SPI
 */
	uint8 WdgExternalContainerRefWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Dio/DioConfig/DioPort/DioChannelGroup */
		Dio_ChannelGroupType* DioChannelGroup;
/* /AUTOSAR/EcucDefs/Spi/SpiDriver/SpiSequence */
		Spi_SequenceType* SpiSequence;
	} WdgExternalContainerRef ;
} Wdg_ExternalConfigurationType ;

/* Hardware dependent settings for the watchdog driver's "fast" mode. */
typedef struct Wdg_SettingsFastType_tag
{
} Wdg_SettingsFastType ;

/* Hardware dependent settings for the watchdog driver's "off" mode. */
typedef struct Wdg_SettingsOffType_tag
{
} Wdg_SettingsOffType ;

/* Hardware dependent settings for the watchdog driver's "slow" mode. */
typedef struct Wdg_SettingsSlowType_tag
{
} Wdg_SettingsSlowType ;

/* Default mode for watchdog driver initialization. */
typedef enum
{
	WDGIF_FAST_MODE,
	WDGIF_OFF_MODE,
	WDGIF_SLOW_MODE
} Wdg_DefaultModeType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus in case the corresponding error occurs. The EventId is taken from
 *  the referenced DemEventParameter's DemEventId value.
 */
typedef struct Wdg_DemEventParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when the error "Initialization or mode
 *  switch failed because it would disable the watchdog" has occurred.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* WDG_E_DISABLE_REJECTED ;
/* Reference to the DemEventParameter which shall be issued when the error "Setting a watchdog
 *  mode failed (during initialization or mode switch)" has occurred.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* WDG_E_MODE_FAILED ;
} Wdg_DemEventParameterRefsType ;

/* All general parameters of the watchdog driver are collected here. */
typedef struct Wdg_GeneralType_tag
{
/* True: Development error detection enabled
 *                                         False: Development error detection disabled
 */
/* Compile switch to enable / disable development error detection for this module. */
	boolean WdgDevErrorDetect ;
/* True: Disabling the watchdog driver at runtime is allowed.
 *                                         False: Disabling the watchdog driver at runtime is not
 *  allowed.
 */
/* Compile switch to allow / forbid disabling the watchdog driver during runtime. */
	boolean WdgDisableAllowed ;
/* Represents the watchdog driver's ID so that it can be referenced by the watchdog interface. */
	uint8 WdgIndex ;
/* The initial timeout (sec) for the trigger condition to be initialized during Init function.
 *  It shall be not larger than WdgMaxTimeout.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 WdgInitialTimeout ;
/* The maximum timeout (sec) to which the watchdog trigger condition can be initialized. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 WdgMaxTimeout ;
	Wdg_RunAreaType WdgRunArea ;
	Wdg_TriggerLocationType WdgTriggerLocation ;
/* * True: API enabled
                                        * False: API disabled */
/* Compile switch to enable / disable the version information API */
	boolean WdgVersionInfoApi ;
} Wdg_GeneralType ;

/* Container holding all Wdg specific published information parameters */
typedef struct Wdg_PublishedInformationType_tag
{
	Wdg_TriggerModeType WdgTriggerMode ;
} Wdg_PublishedInformationType ;

/* Configuration items for the different watchdog settings, including those for external watchdog
 *  hardware.
 */
typedef struct Wdg_SettingsConfigType_tag
{
	Wdg_ExternalConfigurationType* WdgExternalConfiguration ;
	Wdg_SettingsFastType* WdgSettingsFast ;
	Wdg_SettingsOffType* WdgSettingsOff ;
	Wdg_SettingsSlowType* WdgSettingsSlow ;
/* ImplementationType: WdgIf_ModeType */
	Wdg_DefaultModeType WdgDefaultMode ;
} Wdg_SettingsConfigType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* WDG_TYPES_H */

