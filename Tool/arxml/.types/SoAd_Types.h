/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef SOAD_TYPES_H
#define SOAD_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* One byte of the DoIp Entity Identification (EID). */
typedef struct SoAd_DoIpEidByteType_tag
{
/* Index of the Eid byte array. */
	uint8 SoAdDoIpEidByteIndex ;
/* Byte Value at the SoAdDoIpEidByteIndex position in the Eid byte array. */
	uint8 SoAdDoIpEidByteValue ;
} SoAd_DoIpEidByteType ;

/* A unique 6-byte DoIp Entity Identification (EID) */
typedef struct SoAd_DoIpEidType_tag
{
	SoAd_DoIpEidByteType* SoAdDoIpEidByte ;
} SoAd_DoIpEidType ;

/* This optional parameter defines the name of the <User_TxConfirmation> in case that SoAdUserTxConfirmationUL
 *  is configured to Cdd. If SoAdUserTxConfirmationUL equals PduR, Xcp or UdpNm, the name of the
 *  <User_TxConfirmation> is fixed and this parameter is skipped. If SoAdUserTxConfirmationUL equals
 *  Cdd, the name of the <User_TxConfirmation> is selectable.
 */
/* TODO: 
 * typedef void (*SoAd_TxConfirmationULType)(void);
 */

/* This parameter defines the upper layer (UL) module to which the confirmation of the successfully
 *  transmitted SoAdSourcePduId has to be routed via the <User_SoAdTxConfirmation>.
 */
typedef enum
{
	SOAD_USERTXCONFIRMATIONUL_CDD,
	SOAD_USERTXCONFIRMATIONUL_PDUR,
	SOAD_USERTXCONFIRMATIONUL_UDPNM,
	SOAD_USERTXCONFIRMATIONUL_XCP
} SoAd_UserTxConfirmationULType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct SoAd_DemEventConnectionParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when the error "Resource temporarily
 *  unavailable" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_AGAIN ;
/* Reference to the DemEventParameter which shall be issued when the error "Software caused connection
 *  abort" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_CONNABORTED ;
/* Reference to the DemEventParameter which shall be issued when the error "Connection refused"
 *  has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_CONNREFUSED ;
/* Reference to the DemEventParameter which shall be issued when the error "Connection reset by
 *  peer" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_CONNRESET ;
/* Reference to the DemEventParameter which shall be issued when the error "Host is down" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_HOSTDOWN ;
/* Reference to the DemEventParameter which shall be issued when the error "Host is down" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_HOSTUNREACH ;
/* Reference to the DemEventParameter which shall be issued when the error "Network is down" has
 *  occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_NETDOWN ;
/* Reference to the DemEventParameter which shall be issued when the error "Network dropped connection
 *  on reset" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_NETRESET ;
/* Reference to the DemEventParameter which shall be issued when the error "Network is unreachable"
 *  has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_NETUNREACH ;
/* Reference to the DemEventParameter which shall be issued when the error "Socket is not connected"
 *  has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_NOTCONN ;
/* Reference to the DemEventParameter which shall be issued when the error "Broken pipe" has occured. */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_PIPE ;
/* Reference to the DemEventParameter which shall be issued when the error "SDU length mismatch"
 *  has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_SDULENGTH ;
/* Reference to the DemEventParameter which shall be issued when the error "Operation timed out"
 *  has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_TIMEDOUT ;
} SoAd_DemEventConnectionParameterRefsType ;

/* Connection point within the AUTOSAR stack for this socket connection */
typedef enum
{
	SOAD_AUTOSARCONNECTOR_CDD,
	SOAD_AUTOSARCONNECTOR_DOIP,
	SOAD_AUTOSARCONNECTOR_PDUR,
	SOAD_AUTOSARCONNECTOR_XCP
} SoAd_AutosarConnectorType ;

/* Specifies the transport protocol (UDP or TCP). */
typedef enum
{
	SOAD_SOCKETPROTOCOL_TCP,
	SOAD_SOCKETPROTOCOL_UDP
} SoAd_SocketProtocolType ;

/* This parameter defines the name of the <User_RxIndication> in case that SoAdUserRxIndicationUL
 *  is configured to Cdd. If SoAdUserRxIndicationUL equals PduR, Xcp or UdpNm, the name of the
 *  <User_RxIndication> is fixed and this parameter is skipped. If SoAdUserRxIndicationUL equals
 *  CDD the name of the <User_RxIndication> is selectable.
 */
/* TODO: 
 * typedef void (*SoAd_RxIndicationULType)(void);
 */

/* This parameter defines the upper layer (UL) module to which the indication of the successfully
 *  received SoAd PDU has to be routed via <User_SoAdRxIndication>. This <User_SoAdRxIndication>
 *  has to be invoked when the RX indication is received by the EthIf module.
 */
typedef enum
{
	SOAD_USERRXINDICATIONUL_CDD,
	SOAD_USERRXINDICATIONUL_PDUR,
	SOAD_USERRXINDICATIONUL_UDPNM,
	SOAD_USERRXINDICATIONUL_XCP
} SoAd_UserRxIndicationULType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct SoAd_DemEventParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when the error "Interrupted system
 *  call" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_INTR ;
/* Reference to the DemEventParameter which shall be issued when the error "Input/output error"
 *  has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_IO ;
/* Reference to the DemEventParameter which shall be issued when the error "No buffer available
 *  in upper layer" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* SOAD_E_UPPERBUFF ;
} SoAd_DemEventParameterRefsType ;

/* This container contains all global configuration parameters of the DoIP plug-in. */
typedef struct SoAd_DoIpConfigType_tag
{
	SoAd_DoIpEidType* SoAdDoIpEid ;
/* This parameter specifies the maximum time that a DoIP entity shall wait for an Alive Check Response
 *  after sending an Alive Check Request.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdDoIpAliveCheckResponseTime ;
/* This parameter specifies the maximum time that the test equipment waits for a response to a
 *  previously sent control command.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdDoIpControlTimeout ;
/* This parameter specifies the maximum time of inactivity on a TCP_DATA socket before it is closed. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdDoIpGenericInactiveTime ;
/* Note: WD ISO 13400 implicitly shows 3 parts to the Host Name Option:
 *                                         1) It is required to start with "DoIP_"
 *                                         2) There may be a static OEM specific part
 *                                         3) There may be a dynamic vehicle specific part, e.g.
 *  VIN SoAdDoIpHostNameOpt contains parts 1) and 2) only.
 */
/* Defines the <manufacturer specific> part of the "host name option". */
	char* SoAdDoIpHostNameOpt ;
/* This parameter specifies the maximum time of inactivity directly after a TCP_DATA socket was
 *  established. After the specified time without Routing Activation, the TCP_DATA socket is closed.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdDoIpInitialInactiveTime ;
/* This parameter specifies the maximum time after which a DoIP information request must have been
 *  processed and the corresponding response must have been sent by the DoIP entity, otherwise
 *  the request or the response must be considered lost.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdDoIpResponseTimeout ;
/* This timing parameter specifies the time between the Vehicle Announcement Messages that are
 *  sent by DoIP entities after a valid IP address was configured.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdDoIpVidAnnounceInterval ;
/* Describes the maximum time a DoIP entity shall wait before sending an Vehicle Identification
 *  Response.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdDoIpVidAnnounceMaxWait ;
/* Describes the minimum time a DoIP entity shall wait before sending an Vehicle Identification
 *  Response.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdDoIpVidAnnounceMinWait ;
/* Specifies the number of Vehicle Announcement messages, which the DoIP entity sends after a valid
 *  IP address has been configured.
 */
	uint8 SoAdDoIpVidAnnounceNum ;
} SoAd_DoIpConfigType ;

/* A SoAd_DoIP_Route allocates a PDU ID to a combination of a DoIP source and a DoIP target address. */
typedef struct SoAd_DoIpRouteType_tag
{
/* The logical DoIP address of the source entitiy. */
	uint16 SoAdDoIpSourceAddress ;
/* The logical DoIP address of the target entity. */
	uint16 SoAdDoIpTargetAddress ;
/* Reference to the used socket connection. */
/* /AUTOSAR/EcucDefs/SoAd/SoAdSocketConnection */
	SoAd_SocketConnectionType* SoAdDoIpSocketConnectionRef ;
} SoAd_DoIpRouteType ;

/* This container contains all global configuration parameters of SoAd configured from the Pdu
 *  Router Module perspective.
 */
typedef struct SoAd_GeneralType_tag
{
/* Memory size reserved for SoAd buffers. */
	uint16 SoAdBufferMemorySize ;
/* TRUE: TCP/IP Stack supports AUTOSAR callback API
 *                                         FALSE: TCP/IP Stack supports only BSD Sockets.
 */
/* True if the TCP/IP stack supports the AUTOSAR Call-back API in addition to the Berkeley Socket
 *  API.
 */
	boolean SoAdCallbackApi ;
/* Pre-processor switch for enabling development error detection support. */
	boolean SoAdDevErrorDetect ;
/* True if a DoIP protocol plug-in is available. */
	boolean SoAdDoIpActive ;
/* Switches the DoIP_GetVersionInfo() API ON or OFF. */
	boolean SoAdDoIpVersionInfoApi ;
/* TRUE: Enables support for IPv6 addresses
 *                                         FALSE: Only IPv4 addresses are supported
 */
/* Allows for increased memory allocation to store IPv6 addresses. */
	boolean SoAdIPv6AddressEnabled ;
/* Determines the frequency at which the SoAd_MainFunction() is called in [s]. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdMainFunctionPeriod ;
/* Specifies the number of sockets that will be open at any one time. */
	uint16 SoAdMaxOpenSockets ;
/* Specifies the interval at which the SoAd shall poll the TCP/IP stack for new information in [s]. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdPollingInterval ;
/* Number of entries in the Socket connection table. */
	uint8 SoAdSocketCount ;
/* Determines the frequency at which the TcpIp_MainFunctionCyclic() is called in [s]. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 SoAdTcpIpMainFunctionPeriod ;
/* TRUE: Enables the TCPIP_GetVersionInfo API.
 *                                         FALSE: TCPIP_GetVersionInfo API is not included.
 */
/* Activates the TCPIP_GetVersionInfo API. */
	boolean SoAdTcpIpVersionInfoApi ;
/* TRUE: Enables support for the UdpNm API.
 *                                         FALSE: UdpNm API is not included.
 */
/* Activates the configurable interfaces to be used by UdpNm. */
	boolean SoAdUdpNmApiEnabled ;
/* TRUE: Enables the SoAd_GetVersionInfo() API.
 *                                         FALSE: SoAd_GetVersionInfo() API is not included.
 */
/* Activates the SoAd_GetVersionInfo() API. */
	boolean SoAdVersionInfoApi ;
/* TRUE: Enables support for the Xcp API.
 *                                         FALSE: Xcp API is not included.
 */
/* Activates the configurable interfaces to be used by Xcp. */
	boolean SoAdXcpApiEnabled ;
} SoAd_GeneralType ;

/* Describes the path of a PDU from the PDU Router to the socket in the TCP/IP stack for transmission.
 */
typedef struct SoAd_PduRouteType_tag
{
/* ID to be sent on the TCP/IP connection if the PDU header option is enabled. */
	uint64 SoAdDestinationId ;
/* PDU ID of the PDU coming from the PDU Router. */
	uint16 SoAdSourcePduId ;
/* Length in bytes of the SDU to be sent over the TCP/IP stack. */
	uint16 SoAdSourceSduLength ;
	SoAd_TxConfirmationULType SoAdTxConfirmationUL ;
/* This <User_SoAdTxConfirmation> has to be invoked when the confirmation of the configured SoAdSourcePduId
 *  will be received by a Tx confirmation event from the EthIf module.
 */
	SoAd_UserTxConfirmationULType SoAdUserTxConfirmationUL ;
/* Connection on which the PDU is to be sent on, references the appropriate entry in the Socket
 *  Connection Table.
 */
/* /AUTOSAR/EcucDefs/SoAd/SoAdSocketConnection */
	SoAd_SocketConnectionType* SoAdDestinationSocketRef ;
/* Reference to the global PDU structure */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* SoAdSourcePduRef ;
} SoAd_PduRouteType ;

/* Information required to receive and transmit data via the TCP/IP stack on a particular connection. */
typedef struct SoAd_SocketConnectionType_tag
{
	SoAd_DemEventConnectionParameterRefsType* SoAdDemEventConnectionParameterRefs ;
/* Availability of protocol plug-ins. Entries in the Socket and PDU Routing Tables. */
	SoAd_AutosarConnectorType SoAdAutosarConnector ;
/* TRUE: Send PDU header before data
                                        FALSE: Send data only */
/* Enables the transmission of the PDU header (ID, length) on this TCP/IP connection. */
	boolean SoAdPduHeaderEnable ;
/* TRUE: The TP stype API is to be used towards the PDU Router.
 *                                         FALSE: The IF style API is to be used towards the PDU
 *  Router.
 */
/* Enables the use of TP style API towards the PDU Router for this PDU. Will trigger the calls
 *  to ProvideRxBuffer and ProvideTxBuffer respectively.
 */
	boolean SoAdPduProvideBufferEnable ;
/* May not be activated for UDP sockets in receive and not for DoIP sockets.
 * 
 *                                         TRUE: resource management option enabled
 *                                         FALSE: resource management option disabled
 */
/* Enables the resource management option for this socket. */
	boolean SoAdResourceManagementEnable ;
/* TRUE: Use AUTOSAR call-back API
 *                                         FALSE: Use BSD Socket API
 * 
 *                                         Availability of the AUTOSAR Call-back API in the TCP/IP
 *  stack.
 */
/* Enables the use of the AUTOSAR call-back API for this connection. */
	boolean SoAdSocketAutosarApi ;
/* The Socket ID is used as a reference to a particular connection when transferring data to and
 *  from the PDU Router.
 */
	uint16 SoAdSocketId ;
/* Network configuration. Local and Remote Address need to be in the same subnet. */
/* Local IP address used for this connection. */
	char* SoAdSocketLocalIpAddress ;
/* Local UDP or TCP port used for this connection. */
	uint16 SoAdSocketLocalPort ;
	SoAd_SocketProtocolType SoAdSocketProtocol ;
/* IP address where NM packets are being sent to. */
	char* SoAdSocketRemoteIpAddress ;
/* Remote UDP or TCP port used for this connection. */
	uint16 SoAdSocketRemotePort ;
/* This parameter is only relevant for TCP connections. It will not be defined for UDP sockets.
 * 
 *                                         TRUE: This TCP connection is initiated by this module.
 *                                         FALSE: This TCP connection is to be initiated in the
 *  listen mode.
 */
/* Specifies the initiator for this TCP connection. */
	boolean SoAdSocketTcpInitiate ;
/* TRUE: This TCP connection will NOT use congestion control.
 *                                         FALSE: This TCP connection will use congestion control.
 */
/* Specifies not to use the congestion control mechanism for this connection. This parameter is
 *  only relevant for TCP connections. It will not be defined for UDP sockets.
 */
	boolean SoAdSocketTcpNoDelay ;
/* TRUE: This UDP port cannot transmit data
 *                                         FALSE: This UDP port can send and receive data
 */
/* Used to disable the transmit functionality on this UDP port. This parameter is only relevant
 *  for UDP connections.
 */
	boolean SoAdSocketUdpListenOnly ;
} SoAd_SocketConnectionType ;

/* Describes the path of a PDU from a socket in the TCP/IP stack to the PDU Router after reception
 *  in the TCP/IP Stack.
 */
typedef struct SoAd_SocketRouteType_tag
{
/* Length in bytes of the data contained in the PDU. */
	uint16 SoAdDestinationSduLength ;
	SoAd_RxIndicationULType SoAdRxIndicationUL ;
/* ID contained in the packet received on the TCP/IP connection if the PDU header option is enabled. */
	uint64 SoAdSourceId ;
	SoAd_UserRxIndicationULType SoAdUserRxIndicationUL ;
/* Reference to the global PDU structure */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* SoAdDestinationPduRef ;
/* Connection on which the PDU was received. This references an entry in the Socket Connection Table. */
/* /AUTOSAR/EcucDefs/SoAd/SoAdSocketConnection */
	SoAd_SocketConnectionType* SoAdSourceSocketRef ;
} SoAd_SocketRouteType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* SOAD_TYPES_H */

