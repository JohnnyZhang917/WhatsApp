/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef PWM_TYPES_H
#define PWM_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Class of PWM Channel. */
typedef enum
{
	PWM_FIXED_PERIOD,
	PWM_FIXED_PERIOD_SHIFTED,
	PWM_VARIABLE_PERIOD
} Pwm_ChannelClassType ;

/* The parameter PWM_IDLE_STATE represents the output state of the PWM after the signal is stopped
 *  (e.g. call of Pwm_SetOutputToIdle).
 */
typedef enum
{
	PWM_HIGH,
	PWM_LOW
} Pwm_IdleStateType ;

/* Definition of the Callback function. */
/* TODO: 
 * typedef void (*Pwm_NotificationType)(void);
 */

/* Defines the starting polarity of each PWM channel. */
typedef enum
{
	PWM_HIGH,
	PWM_LOW
} Pwm_PolarityType ;

/* Configuration of an individual PWM channel. */
typedef struct Pwm_ChannelType_tag
{
/* ImplementationType: Pwm_ChannelClassType */
	Pwm_ChannelClassType PwmChannelClass ;
/* Channel Id of the PWM channel. This value will be assigned to the symbolic name derived of the
 *  PwmChannel container short name.
 */
	uint32 PwmChannelId ;
/* 0, represents 0% 
                                                0x8000 represents 100% */
/* Value of duty cycle used for Initialization */
	uint16 PwmDutycycleDefault ;
	Pwm_IdleStateType PwmIdleState ;
	Pwm_NotificationType PwmNotification ;
/* Value of period used for Initialization.(in seconds). */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 PwmPeriodDefault ;
	Pwm_PolarityType PwmPolarity ;
} Pwm_ChannelType ;

/* Multiple Configuration Set Container */
typedef struct Pwm_ChannelConfigSetType_tag
{
	Pwm_ChannelType* PwmChannel ;
} Pwm_ChannelConfigSetType ;

typedef struct Pwm_ConfigurationOfOptApiServicesType_tag
{
/* Adds / removes the service Pwm_DeInit() from the code. */
	boolean PwmDeInitApi ;
	boolean PwmGetOutputState ;
	boolean PwmSetDutyCycle ;
	boolean PwmSetOutputToIdle ;
	boolean PwmSetPeriodAndDuty ;
/* Switch to indicate that the Pwm_ GetVersionInfo is supported */
	boolean PwmVersionInfoApi ;
} Pwm_ConfigurationOfOptApiServicesType ;

typedef struct Pwm_GeneralType_tag
{
/* Switch for enabling the development error detection. */
	boolean PwmDevErorDetect ;
/* TRUE: update of duty cycle is done at the end of period of currently generated waveform (current
 *  waveform is finished).
 *                                         FALSE: update of duty cycle is done immediately (just
 *  after service call, current waveform is cut).
 */
/* Switch for enabling the update of the duty cycle parameter at the end of the current period. */
	boolean PwmDutycycleUpdatedEndperiod ;
/* Specifies the InstanceId of this module instance. If only one instance is present it shall have
 *  the Id 0.
 */
	uint32 PwmIndex ;
/* Switch to indicate that the notifications are supported */
	boolean PwmNotificationSupported ;
/* TRUE: update of period/duty cycle is done at the end of period of currently generated waveform
 *  (current waveform is finished).
 *                                         FALSE: update of period/duty cycle is done immediately
 *  (just after service call, current waveform is cut).
 */
/* Switch for enabling the update of the period parameter at the end of the current period. */
	boolean PwmPeriodUpdatedEndperiod ;
} Pwm_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* PWM_TYPES_H */

