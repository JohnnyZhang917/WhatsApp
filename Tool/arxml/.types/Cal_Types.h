/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef CAL_TYPES_H
#define CAL_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Container for configuration of service AsymDecrypt. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Cal_AsymDecryptConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalAsymDecryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalAsymDecryptPrimitiveName ;
} Cal_AsymDecryptConfigType ;

/* Container for configuration of service AsymEncrypt. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Cal_AsymEncryptConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalAsymEncryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalAsymEncryptPrimitiveName ;
} Cal_AsymEncryptConfigType ;

/* Container for configuration of service AsymPrivateKeyExtract. */
typedef struct Cal_AsymPrivateKeyExtractConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalAsymPrivateKeyExtractInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalAsymPrivateKeyExtractPrimitiveName ;
} Cal_AsymPrivateKeyExtractConfigType ;

/* Container for configuration of service AsymPrivateKeyWrapAsym. */
typedef struct Cal_AsymPrivateKeyWrapAsymConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalAsymPrivateKeyWrapAsymInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalAsymPrivateKeyWrapAsymPrimitiveName ;
} Cal_AsymPrivateKeyWrapAsymConfigType ;

/* Container for configuration of service AsymPrivateKeyWrapSym. */
typedef struct Cal_AsymPrivateKeyWrapSymConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalAsymPrivateKeyWrapSymInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalAsymPrivateKeyWrapSymPrimitiveName ;
} Cal_AsymPrivateKeyWrapSymConfigType ;

/* Container for configuration of service AsymPublicKeyExtract. */
typedef struct Cal_AsymPublicKeyExtractConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalAsymPublicKeyExtractInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalAsymPublicKeyExtractPrimitiveName ;
} Cal_AsymPublicKeyExtractConfigType ;

/* Container for configuration of service Checksum. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Cal_ChecksumConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalChecksumInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalChecksumPrimitiveName ;
} Cal_ChecksumConfigType ;

/* Configurations for the Hash service. The container name serves as a symbolic name for the identifier
 *  of a service configuration.
 */
typedef struct Cal_HashConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalHashInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalHashPrimitiveName ;
} Cal_HashConfigType ;

/* Container for configuration of service KeyDerive. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Cal_KeyDeriveConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalKeyDeriveInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalKeyDerivePrimitiveName ;
} Cal_KeyDeriveConfigType ;

/* Container for configuration of service KeyExchangeCalcPubVal. The container name serves as a
 *  symbolic name for the identifier of a service configuration.
 */
typedef struct Cal_KeyExchangeCalcPubValConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalKeyExchangeCalcPubValInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalKeyExchangeCalcPubValPrimitiveName ;
} Cal_KeyExchangeCalcPubValConfigType ;

/* Container for configuration of service KeyExchangeCalcSecret. The container name serves as a
 *  symbolic name for the identifier of a service configuration.
 */
typedef struct Cal_KeyExchangeCalcSecretConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalKeyExchangeCalcSecretInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalKeyExchangeCalcSecretPrimitiveName ;
} Cal_KeyExchangeCalcSecretConfigType ;

/* Configurations for the MacGenerate service. The container name serves as a symbolic name for
 *  the identifier of a service configuration.
 */
typedef struct Cal_MacGenerateConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalMacGenerateInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalMacGeneratePrimitiveName ;
} Cal_MacGenerateConfigType ;

/* Container for configuration of service MacVerify. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Cal_MacVerifyConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalMacVerifyInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalMacVerifyPrimitiveName ;
} Cal_MacVerifyConfigType ;

/* Container for configuration of service RandomGenerate. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Cal_RandomGenerateConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalRandomGenerateInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalRandomGeneratePrimitiveName ;
} Cal_RandomGenerateConfigType ;

/* Container for configuration of service RandomSeed. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Cal_RandomSeedConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalRandomSeedInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalRandomSeedPrimitiveName ;
} Cal_RandomSeedConfigType ;

/* Container for configuration of service SignatureGenerate. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Cal_SignatureGenerateConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalSignatureGenerateInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalSignatureGeneratePrimitiveName ;
} Cal_SignatureGenerateConfigType ;

/* Container for configuration of service SignatureVerify. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Cal_SignatureVerifyConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalSignatureVerifyInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalSignatureVerifyPrimitiveName ;
} Cal_SignatureVerifyConfigType ;

/* Container for configuration of service SymBlockDecrypt. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Cal_SymBlockDecryptConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalSymBlockDecryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalSymBlockDecryptPrimitiveName ;
} Cal_SymBlockDecryptConfigType ;

/* Container for configuration of service SymBlockEncrypt. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Cal_SymBlockEncryptConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalSymBlockEncryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalSymBlockEncryptPrimitiveName ;
} Cal_SymBlockEncryptConfigType ;

/* Container for configuration of service SymDecrypt. */
typedef struct Cal_SymDecryptConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalSymDecryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalSymDecryptPrimitiveName ;
} Cal_SymDecryptConfigType ;

/* Container for configuration of service SymEncrypt. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Cal_SymEncryptConfigType_tag
{
	char* CalSymBlockEncryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalSymEncryptPrimitiveName ;
} Cal_SymEncryptConfigType ;

/* Container for configuration of service SymKeyExtract. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Cal_SymKeyExtractConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalSymKeyExtractInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalSymKeyExtractPrimitiveName ;
} Cal_SymKeyExtractConfigType ;

/* Container for configuration of service SymKeyWrapAsym. */
typedef struct Cal_SymKeyWrapAsymConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalSymKeyWrapAsymInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalSymKeyWrapAsymPrimitiveName ;
} Cal_SymKeyWrapAsymConfigType ;

/* Container for configuration of service SymKeyWrapSym. */
typedef struct Cal_SymKeyWrapSymConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CalSymKeyWrapSymInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CalSymKeyWrapSymPrimitiveName ;
} Cal_SymKeyWrapSymConfigType ;

/* Container for incorporation of AsymDecrypt primitives. */
typedef struct Cal_AsymDecryptType_tag
{
	Cal_AsymDecryptConfigType* CalAsymDecryptConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement an
 *  asymmetrical decryption.
 */
	uint32 CalAsymDecryptMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement an asymmetrical
 *  decryption.
 */
	uint32 CalAsymDecryptMaxKeySize ;
} Cal_AsymDecryptType ;

/* Container for incorporation of AsymEncrypt primitives. */
typedef struct Cal_AsymEncryptType_tag
{
	Cal_AsymEncryptConfigType* CalAsymEncryptConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement an
 *  asymmetrical encryption.
 */
	uint32 CalAsymEncryptMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement an asymmetrical
 *  encryption.
 */
	uint32 CalAsymEncryptMaxKeySize ;
} Cal_AsymEncryptType ;

/* Container for incorporation of AsymPrivateKeyExtract primitives. */
typedef struct Cal_AsymPrivateKeyExtractType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Cal_AsymPrivateKeyExtractConfigType* CalAsymPrivateKeyExtractConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement an
 *  asymmetrical private key extraction.
 */
	uint32 CalAsymPrivateKeyExtractMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement an asymmetrical
 *  private key extraction.
 */
	uint32 CalAsymPrivateKeyExtractMaxKeySize ;
} Cal_AsymPrivateKeyExtractType ;

/* Container for incorporation of AsymPrivateKeyWrapAsym primitives. */
typedef struct Cal_AsymPrivateKeyWrapAsymType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Cal_AsymPrivateKeyWrapAsymConfigType* CalAsymPrivateKeyWrapAsymConfig ;
/* The maximum length, in bytes, of all private information types used in all CPL primitives which
 *  implement an asymmetrical key wrapping.
 */
	uint32 CalAsymPrivateKeyWrapAsymMaxPrivKeySize ;
/* The maximum length, in bytes, of all public key types used in all CPL primitives which implement
 *  an asymmetrical key wrapping.
 */
	uint32 CalAsymPrivateKeyWrapAsymMaxPubKeySize ;
} Cal_AsymPrivateKeyWrapAsymType ;

/* Container for incorporation of AsymPrivateKeyWrapSym primitives. */
typedef struct Cal_AsymPrivateKeyWrapSymType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Cal_AsymPrivateKeyWrapSymConfigType* CalAsymPrivateKeyWrapSymConfig ;
/* The maximum length, in bytes, of all private information types used in all CPL primitives which
 *  implement an asymmetrical key wrapping.
 */
	uint32 CalAsymPrivateKeyWrapSymMaxPrivKeySize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement an asymmetrical
 *  key wrapping.
 */
	uint32 CalAsymPrivateKeyWrapSymMaxSymKeySize ;
} Cal_AsymPrivateKeyWrapSymType ;

/* Container for incorporation of AsymPublicKeyExtract primitives. */
typedef struct Cal_AsymPublicKeyExtractType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Cal_AsymPublicKeyExtractConfigType* CalAsymPublicKeyExtractConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement an
 *  asymmetrical public key extraction.
 */
	uint32 CalAsymPublicKeyExtractMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement an asymmetrical
 *  public key extraction.
 */
	uint32 CalAsymPublicKeyExtractMaxKeySize ;
} Cal_AsymPublicKeyExtractType ;

/* Container for incorporation of Checksum primitives. */
typedef struct Cal_ChecksumType_tag
{
	Cal_ChecksumConfigType* CalChecksumConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a checksum
 *  computation.
 */
	uint32 CalChecksumMaxCtxBufByteSize ;
} Cal_ChecksumType ;

/* Container for common configuration options. */
typedef struct Cal_GeneralType_tag
{
/* This type can be e.g. uint8, uint16 or uint32. */
/* The scalar type which has the maximum alignment restrictions on the given platform. */
	char* CalMaxAlignScalarType ;
} Cal_GeneralType ;

/* Container for incorporation of Hash primitives. */
typedef struct Cal_HashType_tag
{
	Cal_HashConfigType* CalHashConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a hash
 *  computation.
 */
	uint32 CalHashMaxCtxBufByteSize ;
} Cal_HashType ;

/* Container for incorporation of KeyDerive primitives. */
typedef struct Cal_KeyDeriveType_tag
{
	Cal_KeyDeriveConfigType* CalKeyDeriveConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a key
 *  derivation.
 */
	uint32 CalKeyDeriveMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CRL primitives which implement a key derivation.
 */
	uint32 CalKeyDeriveMaxKeySize ;
} Cal_KeyDeriveType ;

/* Container for incorporation of KeyExchangeCalcPubVal primitives. */
typedef struct Cal_KeyExchangeCalcPubValType_tag
{
	Cal_KeyExchangeCalcPubValConfigType* CalKeyExchangeCalcPubValConfig ;
/* The maximum length, in bytes, of all base types used in all CPL primitives which implement a
 *  public value calculation.
 */
	uint32 CalKeyExchangeCalcPubValMaxBaseTypeSize ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a public
 *  value calculation.
 */
	uint32 CalKeyExchangeCalcPubValMaxCtxBufByteSize ;
/* The maximum length, in bytes, of all private information types used in all CPL primitives which
 *  implement a public value calculation.
 */
	uint32 CalKeyExchangeCalcPubValMaxPrivateTypeSize ;
} Cal_KeyExchangeCalcPubValType ;

/* Container for incorporation of KeyExchangeCalcSecret primitives. */
typedef struct Cal_KeyExchangeCalcSecretType_tag
{
	Cal_KeyExchangeCalcSecretConfigType* CalKeyExchangeCalcSecretConfig ;
/* The maximum length, in bytes, of all base types used in all CPL primitives which implement a
 *  shared secret calculation.
 */
	uint32 CalKeyExchangeCalcSecretMaxBaseTypeSize ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a shared
 *  secret calculation.
 */
	uint32 CalKeyExchangeCalcSecretMaxCtxBufByteSize ;
/* The maximum length, in bytes, of all private information types used in all CPL primitives which
 *  implement a shared secret calculation.
 */
	uint32 CalKeyExchangeCalcSecretMaxPrivateTypeSize ;
} Cal_KeyExchangeCalcSecretType ;

/* Container for incorporation of MacGenerate primitives. */
typedef struct Cal_MacGenerateType_tag
{
	Cal_MacGenerateConfigType* CalMacGenerateConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a MAC
 *  generation.
 */
	uint32 CalMacGenerateMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a MAC generation.
 */
	uint32 CalMacGenerateMaxKeySize ;
} Cal_MacGenerateType ;

/* Container for incorporation of MacVerify primitives. */
typedef struct Cal_MacVerifyType_tag
{
	Cal_MacVerifyConfigType* CalMacVerifyConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a MAC
 *  verification.
 */
	uint32 CalMacVerifyMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a MAC verification.
 */
	uint32 CalMacVerifyMaxKeySize ;
} Cal_MacVerifyType ;

/* Container for incorporation of RandomGenerate primitives. */
typedef struct Cal_RandomGenerateType_tag
{
	Cal_RandomGenerateConfigType* CalRandomGenerateConfig ;
} Cal_RandomGenerateType ;

/* Container for incorporation of RandomSeed primitives. */
typedef struct Cal_RandomSeedType_tag
{
	Cal_RandomSeedConfigType* CalRandomSeedConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement seeding
 *  or generating a random number.
 */
	uint32 CalRandomMaxCtxBufByteSize ;
} Cal_RandomSeedType ;

/* Container for incorporation of SignatureGenerate primitives */
typedef struct Cal_SignatureGenerateType_tag
{
	Cal_SignatureGenerateConfigType* CalSignatureGenerateConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a signature
 *  generation.
 */
	uint32 CalSignatureGenerateMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a signature
 *  generation.
 */
	uint32 CalSignatureGenerateMaxKeySize ;
} Cal_SignatureGenerateType ;

/* Container for incorporation of SignatureVerify primitives. */
typedef struct Cal_SignatureVerifyType_tag
{
	Cal_SignatureVerifyConfigType* CalSignatureVerifyConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a signature
 *  verification.
 */
	uint32 CalSignatureVerifyMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a signature
 *  verification.
 */
	uint32 CalSignatureVerifyMaxKeySize ;
} Cal_SignatureVerifyType ;

/* Container for incorporation of SymBlockDecrypt primitives. */
typedef struct Cal_SymBlockDecryptType_tag
{
	Cal_SymBlockDecryptConfigType* CalSymBlockDecryptConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a symmetrical
 *  block decryption.
 */
	uint32 CalSymBlockDecryptMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a symmetrical
 *  block decryption.
 */
	uint32 CalSymBlockDecryptMaxKeySize ;
} Cal_SymBlockDecryptType ;

/* Container for incorporation of SymBlockEncrypt primitives. */
typedef struct Cal_SymBlockEncryptType_tag
{
	Cal_SymBlockEncryptConfigType* CalSymBlockEncryptConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a symmetrical
 *  block encryption.
 */
	uint32 CalSymBlockEncryptMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a symmetrical
 *  block encryption.
 */
	uint32 CalSymBlockEncryptMaxKeySize ;
} Cal_SymBlockEncryptType ;

/* Container for incorporation of SymDecrypt primitives */
typedef struct Cal_SymDecryptType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Cal_SymDecryptConfigType* CalSymDecryptConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a symmetrical
 *  decryption.
 */
	uint32 CalSymDecryptMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a symmetrical
 *  decryption.
 */
	uint32 CalSymDecryptMaxKeySize ;
} Cal_SymDecryptType ;

/* Container for incorporation of SymEncrypt primitives. */
typedef struct Cal_SymEncryptType_tag
{
	Cal_SymEncryptConfigType* CalSymEncryptConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a symmetrical
 *  encryption.
 */
	uint32 CalSymEncryptMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a symmetrical
 *  encryption.
 */
	uint32 CalSymEncryptMaxKeySize ;
} Cal_SymEncryptType ;

/* Container for incorporation of SymKeyExtract primitives. */
typedef struct Cal_SymKeyExtractType_tag
{
	Cal_SymKeyExtractConfigType* CalSymKeyExtractConfig ;
/* The maximum, in bytes, of all context buffers used in all CPL primitives which implement a symmetrical
 *  key extraction.
 */
	uint32 CalSymKeyExtractMaxCtxBufByteSize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a symmetrical
 *  key extraction.
 */
	uint32 CalSymKeyExtractMaxKeySize ;
} Cal_SymKeyExtractType ;

/* Container for incorporation of SymKeyWrapAsym primitives. */
typedef struct Cal_SymKeyWrapAsymType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Cal_SymKeyWrapAsymConfigType* CalSymKeyWrapAsymConfig ;
/* The maximum length, in bytes, of all public key  types used in all CPL primitives which implement
 *  a symmetrical key wrapping.
 */
	uint32 CalSymKeyWrapAsymMaxPubKeySize ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a symmetrical
 *  key wrapping.
 */
	uint32 CalSymKeyWrapAsymMaxSymKeySize ;
} Cal_SymKeyWrapAsymType ;

/* Container for incorporation of SymKeyWrapSym primitives. */
typedef struct Cal_SymKeyWrapSymType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Cal_SymKeyWrapSymConfigType* CalSymKeyWrapSymConfig ;
/* The maximum, in bytes, of all key lengths used in all CPL primitives which implement a symmetrical
 *  key wrapping.
 */
	uint32 CalSymKeyWrapSymMaxSymKeySize ;
} Cal_SymKeyWrapSymType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* CAL_TYPES_H */

