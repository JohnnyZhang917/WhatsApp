/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef IPDUM_TYPES_H
#define IPDUM_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* This contains the location and the length of a segment. A segment must fit inside the I-PDU.
 *  The segment in the source I-PDU that is located at the IpduMSegmentPosition is copied to the
 *  same position in the destination I-PDU.
 */
typedef struct IpduM_SegmentType_tag
{
/* Length of the segment in bits. */
	uint16 IpduMSegmentLength ;
/* Segments bit position in the multiplexed Pdu. */
	uint16 IpduMSegmentPosition ;
} IpduM_SegmentType ;

/* This container contains the configuration for the dynamic part of incoming RxIndication calls.
 *  When an incoming received I-PDU's selector field matches the IpduM_Selector_Value, the new
 *  outgoing I-PDU for the dynamic part is constructed as defined by the segments of this container
 *  and sent out with the I-PDU ID referenced by IpduMOutgoingDynamicPduRef.
 */
typedef struct IpduM_RxDynamicPartType_tag
{
	IpduM_SegmentType* IpduMSegment ;
/* This is the selector value that this container refers to. */
	uint8 IpduMRxSelectorValue ;
/* When the new I-PDU is sent out it is sent with this I-PDU ID. Reference to the sent PDU representation
 *  in the ECU Configuration Description exchange file.
 */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* IpduMOutgoingDynamicPduRef ;
} IpduM_RxDynamicPartType ;

/* This container contains the configuration for the static part of incoming RxIndication calls.
 *  On reception, the new outgoing I-PDU for the static part is constructed as defined by the segments
 *  of this container and sent out with the I-PDU ID referenced by IpduMOutgoingStaticPduRef.
 */
typedef struct IpduM_RxStaticPartType_tag
{
	IpduM_SegmentType* IpduMSegment ;
/* When the new I-PDU is sent out it is sent with this I-PDU ID. Reference to the sent Pdu representation
 *  in the ECU Configuration Description exchange file.
 */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* IpduMOutgoingStaticPduRef ;
} IpduM_RxStaticPartType ;

/* This parameter defines the ByteOrder for all IpduMSegments (static and dynamic part) and for
 *  the selectorField within the MultiplexedPdu.
 */
typedef enum
{
	IPDUM_BYTEORDER_BIG_ENDIAN,
	IPDUM_BYTEORDER_LITTLE_ENDIAN
} IpduM_ByteOrderType ;

/* Contains the configuration for incoming RxIndication calls. */
typedef struct IpduM_RxIndicationType_tag
{
	IpduM_RxDynamicPartType* IpduMRxDynamicPart ;
	IpduM_RxStaticPartType* IpduMRxStaticPart ;
	IpduM_SelectorFieldPositionType* IpduMSelectorFieldPosition ;
/* The absolute position of a segment in the MultiplexedIPdu is
 *                                                         determined by the definition of the
 *  ByteOrder parameter:
 *                                                         If BIG_ENDIAN is specified, the SegmentPosition
 *  indicates the bit position of the most significant bit in an IPDU.
 *                                                         If LITTLE_ENDIAN is specified, the SegmentPosition
 *  indicates the bit position of the least significant bit in an IPDU.
 */
	IpduM_ByteOrderType IpduMByteOrder ;
/* This is the I-PDU ID of the incoming I-PDU. If an incoming RxIndication's I-PDU ID matches this
 *  value then it is unpacked according to the specification in this container.
 */
	uint16 IpduMRxHandleId ;
/* Reference to the received Pdu representation in the ECU Configuration Description exchange file. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* IpduMRxIndicationPduRef ;
} IpduM_RxIndicationType ;

/* Contains the configuration parameters received I-PDUs by the IpduM module. */
typedef struct IpduM_RxPathwayType_tag
{
	IpduM_RxIndicationType* IpduMRxIndication ;
} IpduM_RxPathwayType ;

/* Configuration parameters for an instance of a TxRequest call into the IpduM. When a Tx Request
 *  with the IpduMTxDynamicHandleId is received by the IpduM, all segments as defined by this container
 *  are copied from the incoming I-PDU into the outgoing I-PDU buffer and then the send mode honoured.
 *  This container is used by the dynamic part of a TxRequest configuration. Therefore, for each
 *  outgoing I-PDU there will be one instance of this container for the dynamic part.
 */
typedef struct IpduM_TxDynamicPartType_tag
{
	IpduM_SegmentType* IpduMSegment ;
/* If configured to true fetch the data of this part Just-In-Time via the triggerTransmit API of
 *  the PduR.
 */
	boolean IpduMJitUpdate ;
/* A transmit request can be confirmed by the lower layer. If this parameter is set to true a confirmation
 *  of the I-PDU in COM representing the dynamic part is generated.
 */
	boolean IpduMTxDynamicConfirmation ;
/* This is an incoming handle id. When the handle of an incoming Tx Request matches this, the bits
 *  fields (see IpduMSegment) are copied and the IpduMTxTriggerMode is honored.
 */
	uint16 IpduMTxDynamicHandleId ;
/* Reference to the Pdu representation in the ECU Configuration Description exchange file to be
 *  transmitted.
 */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* IpduMTxDynamicPduRef ;
} IpduM_TxDynamicPartType ;

/* Configuration parameters for an instance of a Tx_Request call into the IpduM. When a Tx Request
 *  with the IpduMTxStaticHandleId is received by the IpduM, all segments as defined by this container
 *  are copied from the incoming I-PDU into the outgoing I-PDU buffer and then the send mode honoured.
 *  This container is used for the static part of a TxRequest configuration. Therefore, for each
 *  outgoing I-PDU there will be one instance of this container for the static part if it exists.
 */
typedef struct IpduM_TxStaticPartType_tag
{
	IpduM_SegmentType* IpduMSegment ;
	boolean IpduMJitUpdate ;
/* A transmit request can be confirmed by the lower layer. If this parameter is set to true a confirmation
 *  of the I-PDU in COM representing the static part is generated.
 */
	boolean IpduMTxStaticConfirmation ;
/* This is an incoming handle id. When the handle of an incoming Tx Request matches this, the segments
 *  are copied (IPduMSegment) and the IpduMTxTriggerMode is honored.
 */
	uint16 IpduMTxStaticHandleId ;
/* Reference to the Pdu representation in the ECU Configuration Description exchange file to be
 *  transmitted.
 */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* IpduMTxStaticPduRef ;
} IpduM_TxStaticPartType ;

/* Selects whether to send the multiplexed I-PDU immediately or at some later date. */
typedef enum
{
	IPDUM_TXTRIGGERMODE_DYNAMIC_PART_TRIGGER,
	IPDUM_TXTRIGGERMODE_NONE,
	IPDUM_TXTRIGGERMODE_STATIC_OR_DYNAMIC_PART_TRIGGER,
	IPDUM_TXTRIGGERMODE_STATIC_PART_TRIGGER
} IpduM_TxTriggerModeType ;

/* This is used to specify the configuration for Transmit requests. */
typedef struct IpduM_TxRequestType_tag
{
	IpduM_SelectorFieldPositionType* IpduMSelectorFieldPosition ;
	IpduM_TxDynamicPartType* IpduMTxDynamicPart ;
	IpduM_TxStaticPartType* IpduMTxStaticPart ;
/* The absolute position of a segment in the MultiplexedIPdu is
 *                                                         determined by the definition of the
 *  ByteOrder parameter:
 *                                                         If BIG_ENDIAN is specified, the SegmentPosition
 *  indicates the bit position of the most significant bit in an IPDU.
 *                                                         If LITTLE_ENDIAN is specified, the SegmentPosition
 *  indicates the bit position of the least significant bit in an IPDU.
 */
	IpduM_ByteOrderType IpduMByteOrder ;
/* If this attribute is omitted the IpduM module does not fill the I-PDU. */
/* IpduM module fills not used areas of an I-PDU with this bit-pattern */
	uint8 IpduMIPduUnusedAreasDefault ;
/* The existence of this parameter is essential for the PduR generation tool to actually find a
 *  symbolicNameValue for the OutgoingPdu.
 */
/* The handle Id to be used by the PduR to confirm the transmission of this Pdu. */
	uint16 IpduMTxConfirmationPduId ;
/* It is not used when an I-PDU is requested using the trigger transmit API. */
/* This timeout (in seconds) defines the timeout period for monitoring the reception of the TxConfirmation.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 IpduMTxConfirmationTimeout ;
	IpduM_TxTriggerModeType IpduMTxTriggerMode ;
/* Reference to the dynamic part that shall be used to initialize this multiplexed TX-I-PDU. */
/* /AUTOSAR/EcucDefs/IpduM/IpduMConfig/IpduMTxPathway/IpduMTxRequest/IpduMTxDynamicPart */
	IpduM_TxDynamicPartType* IpduMInitialDynamicPart ;
/* Reference to the PDU defining the outgoing I-PDU. */
/* When the outgoing I-PDU is sent this is the I-PDU ID to give it. It is the IpduM I-PDU ID of
 *  the assembled I-PDU.
 */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* IpduMOutgoingPduRef ;
} IpduM_TxRequestType ;

/* Contains the configuration parameters transmitted I-PDUs by the IpduM module. */
typedef struct IpduM_TxPathwayType_tag
{
/* There will one instance of this container for each I-PDU that can be requested for transmission
 *  (the outgoing I-PDUs) by the IpduM.
 */
	IpduM_TxRequestType* IpduMTxRequest ;
} IpduM_TxPathwayType ;

/* This container contains the sub containers of the IpduM module. The IpduMTxPathway subcontainer
 *  includes information about sent I-PDUs. The IpduMRxPathway includes information about received
 *  I-PDUs.
 */
typedef struct IpduM_ConfigType_tag
{
	IpduM_RxPathwayType* IpduMRxPathway ;
	IpduM_TxPathwayType* IpduMTxPathway ;
} IpduM_ConfigType ;

/* Contains the general configuration parameters of IpduM. */
typedef struct IpduM_GeneralType_tag
{
/* The cycle time with which IpduM_MainFunction should  be invoked (in seconds). */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 IpduMConfigurationTimeBase ;
/* True: error detection activated
 *                                         False: error detection deactivated
 */
/* Active/Deactivate the detection of development errors, for production code this parameter has
 *  to be False.
 */
	boolean IpduMDevErrorDetect ;
/* Note that this is a pre-compile option. If this is set to False then it will not be possible
 *  to add static parts after compilation.
 * 
 *                                         True: A static part may exist.
 *                                         False: A static part will never exist.
 */
/* This is to allow optimizations in the case the IpduM will never be used with a static part. */
	boolean IpduMStaticPartExists ;
/* true: version information activated
 *                                         false: version information deactivated
 */
/* Active/Deactivate the version information API. */
	boolean IpduMVersionInfoApi ;
} IpduM_GeneralType ;

/* Additional published parameters not covered by */
typedef struct IpduM_PublishedInformationType_tag
{
/* IPDUM140 is  implemented. */
/* If set to TRUE the COM invocation optimization as defined in */
	boolean IpduMRxDirectComInvocation ;
} IpduM_PublishedInformationType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* IPDUM_TYPES_H */

