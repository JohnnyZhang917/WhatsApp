/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef CSM_TYPES_H
#define CSM_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackAsymDecryptType)(void);
 */

/* Container for configuration of service AsymDecrypt. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_AsymDecryptConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmAsymDecryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmAsymDecryptPrimitiveName ;
	Csm_CallbackAsymDecryptType CsmCallbackAsymDecrypt ;
} Csm_AsymDecryptConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackAsymEncryptType)(void);
 */

/* Container for configuration of service AsymEncrypt. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_AsymEncryptConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmAsymEncryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmAsymEncryptPrimitiveName ;
	Csm_CallbackAsymEncryptType CsmCallbackAsymEncrypt ;
} Csm_AsymEncryptConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackAsymPrivateKeyExtractType)(void);
 */

/* Container for configuration of service AsymPrivateKeyExtract. */
typedef struct Csm_AsymPrivateKeyExtractConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmAsymPrivateKeyExtractInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmAsymPrivateKeyExtractPrimitiveName ;
	Csm_CallbackAsymPrivateKeyExtractType CsmCallbackAsymPrivateKeyExtract ;
} Csm_AsymPrivateKeyExtractConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackAsymPrivateKeyWrapAsymType)(void);
 */

/* Container for configuration of service SymKeyWrapAsym. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_AsymPrivateKeyWrapAsymConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmAsymPrivateKeyWrapAsymInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmAsymPrivateKeyWrapAsymPrimitiveName ;
	Csm_CallbackAsymPrivateKeyWrapAsymType CsmCallbackAsymPrivateKeyWrapAsym ;
} Csm_AsymPrivateKeyWrapAsymConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackAsymPrivateKeyWrapSymType)(void);
 */

/* Container for configuration of service AsymPrivateKeyWrapSym. The container name serves as a
 *  symbolic name for the identifier of a service configuration.
 */
typedef struct Csm_AsymPrivateKeyWrapSymConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmAsymPrivateKeyWrapSymInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmAsymPrivateKeyWrapSymPrimitiveName ;
	Csm_CallbackAsymPrivateKeyWrapSymType CsmCallbackAsymPrivateKeyWrapSym ;
} Csm_AsymPrivateKeyWrapSymConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackAsymPublicKeyExtractType)(void);
 */

/* Container for configuration of service AsymPublicKeyExtract. */
typedef struct Csm_AsymPublicKeyExtractConfigType_tag
{
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmAsymPublicKeyExtractInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmAsymPublicKeyExtractPrimitiveName ;
	Csm_CallbackAsymPublicKeyExtractType CsmCallbackAsymPublicKeyExtract ;
} Csm_AsymPublicKeyExtractConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackChecksumType)(void);
 */

/* Container for configuration of service Checksum. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Csm_ChecksumConfigType_tag
{
	Csm_CallbackChecksumType CsmCallbackChecksum ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmChecksumInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmChecksumPrimitiveName ;
} Csm_ChecksumConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackHashType)(void);
 */

/* Configurations for the Hash service. The container name serves as a symbolic name for the identifier
 *  of a service configuration.
 */
typedef struct Csm_HashConfigType_tag
{
	Csm_CallbackHashType CsmCallbackHash ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmHashInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmHashPrimitiveName ;
} Csm_HashConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackKeyDeriveType)(void);
 */

/* Container for configuration of service KeyDerive. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Csm_KeyDeriveConfigType_tag
{
	Csm_CallbackKeyDeriveType CsmCallbackKeyDerive ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmKeyDeriveInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmKeyDerivePrimitiveName ;
} Csm_KeyDeriveConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackKeyDeriveSymKeyType)(void);
 */

/* Container for configuration of service CsmKeyDeriveSymKey. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_KeyDeriveSymKeyConfigType_tag
{
	Csm_CallbackKeyDeriveSymKeyType CsmCallbackKeyDeriveSymKey ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmKeyDeriveSymKeyInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmKeyDeriveSymKeyPrimitiveName ;
} Csm_KeyDeriveSymKeyConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackKeyExchangeCalcPubValType)(void);
 */

/* Container for configuration of service KeyExchangeCalcPubVal. The container name serves as a
 *  symbolic name for the identifier of a service configuration.
 */
typedef struct Csm_KeyExchangeCalcPubValConfigType_tag
{
	Csm_CallbackKeyExchangeCalcPubValType CsmCallbackKeyExchangeCalcPubVal ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmKeyExchangeCalcPubValInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmKeyExchangeCalcPubValPrimitiveName ;
} Csm_KeyExchangeCalcPubValConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackKeyExchangeCalcSecretType)(void);
 */

/* Container for configuration of service KeyExchangeCalcSecret. The container name serves as a
 *  symbolic name for the identifier of a service configuration.
 */
typedef struct Csm_KeyExchangeCalcSecretConfigType_tag
{
	Csm_CallbackKeyExchangeCalcSecretType CsmCallbackKeyExchangeCalcSecret ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmKeyExchangeCalcSecretInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmKeyExchangeCalcSecretPrimitiveName ;
} Csm_KeyExchangeCalcSecretConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackKeyExchangeCalcSymKeyType)(void);
 */

/* Container for configuration of service KeyExchangeCalcSymKey. The container name serves as a
 *  symbolic name for the identifier of a service configuration.
 */
typedef struct Csm_KeyExchangeCalcSymKeyConfigType_tag
{
	Csm_CallbackKeyExchangeCalcSymKeyType CsmCallbackKeyExchangeCalcSymKey ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmKeyExchangeCalcSymKeyInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmKeyExchangeCalcSymKeyPrimitiveName ;
} Csm_KeyExchangeCalcSymKeyConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackMacGenerateType)(void);
 */

/* Configurations for the MacGenerate service. The container name serves as a symbolic name for
 *  the identifier of a service configuration.
 */
typedef struct Csm_MacGenerateConfigType_tag
{
	Csm_CallbackMacGenerateType CsmCallbackMacGenerate ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmMacGenerateInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmMacGeneratePrimitiveName ;
} Csm_MacGenerateConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackMacVerifyType)(void);
 */

/* Container for configuration of service MacVerify. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Csm_MacVerifyConfigType_tag
{
	Csm_CallbackMacVerifyType CsmCallbackMacVerify ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmMacVerifyInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmMacVerifyPrimitiveName ;
} Csm_MacVerifyConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackRandomGenerateType)(void);
 */

/* Container for configuration of service RandomGenerate. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_RandomGenerateConfigType_tag
{
	Csm_CallbackRandomGenerateType CsmCallbackRandomGenerate ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmRandomGenerateInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmRandomGeneratePrimitiveName ;
} Csm_RandomGenerateConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackRandomSeedType)(void);
 */

/* Container for configuration of service RandomSeed. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Csm_RandomSeedConfigType_tag
{
	Csm_CallbackRandomSeedType CsmCallbackRandomSeed ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmRandomSeedInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmRandomSeedPrimitiveName ;
} Csm_RandomSeedConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackSignatureGenerateType)(void);
 */

/* Container for configuration of service SignatureGenerate. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_SignatureGenerateConfigType_tag
{
	Csm_CallbackSignatureGenerateType CsmCallbackSignatureGenerate ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmSignatureGenerateInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmSignatureGeneratePrimitiveName ;
} Csm_SignatureGenerateConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackSignatureVerifyType)(void);
 */

/* Container for configuration of service SignatureVerify. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_SignatureVerifyConfigType_tag
{
	Csm_CallbackSignatureVerifyType CsmCallbackSignatureVerify ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmSignatureVerifyInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmSignatureVerifyPrimitiveName ;
} Csm_SignatureVerifyConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackSymBlockDecryptType)(void);
 */

/* Container for configuration of service SymBlockDecrypt. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_SymBlockDecryptConfigType_tag
{
	Csm_CallbackSymBlockDecryptType CsmCallbackSymBlockDecrypt ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmSymBlockDecryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmSymBlockDecryptPrimitiveName ;
} Csm_SymBlockDecryptConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackSymBlockEncryptType)(void);
 */

/* Container for configuration of service SymBlockEncrypt. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_SymBlockEncryptConfigType_tag
{
	Csm_CallbackSymBlockEncryptType CsmCallbackSymBlockEncrypt ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmSymBlockEncryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmSymBlockEncryptPrimitiveName ;
} Csm_SymBlockEncryptConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackSymDecryptType)(void);
 */

/* Container for configuration of service SymDecrypt. */
typedef struct Csm_SymDecryptConfigType_tag
{
	Csm_CallbackSymDecryptType CsmCallbackSymDecrypt ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmSymDecryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmSymDecryptPrimitiveName ;
} Csm_SymDecryptConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackSymEncryptType)(void);
 */

/* Container for configuration of service SymEncrypt. The container name serves as a symbolic name
 *  for the identifier of a service configuration.
 */
typedef struct Csm_SymEncryptConfigType_tag
{
	Csm_CallbackSymEncryptType CsmCallbackSymEncrypt ;
	char* CsmSymBlockEncryptInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmSymEncryptPrimitiveName ;
} Csm_SymEncryptConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackSymKeyExtractType)(void);
 */

/* Container for configuration of service SymKeyExtract. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_SymKeyExtractConfigType_tag
{
	Csm_CallbackSymKeyExtractType CsmCallbackSymKeyExtract ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmSymKeyExtractInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmSymKeyExtractPrimitiveName ;
} Csm_SymKeyExtractConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackSymKeyWrapAsymType)(void);
 */

/* Container for configuration of service SymKeyWrapAsym. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_SymKeyWrapAsymConfigType_tag
{
	Csm_CallbackSymKeyWrapAsymType CsmCallbackSymKeyWrapAsym ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmSymKeyWrapAsymInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmSymKeyWrapAsymPrimitiveName ;
} Csm_SymKeyWrapAsymConfigType ;

/* Callback function to be called if service has finished. */
/* TODO: 
 * typedef void (*Csm_CallbackSymKeyWrapSymType)(void);
 */

/* Container for configuration of service SymKeyWrapSym. The container name serves as a symbolic
 *  name for the identifier of a service configuration.
 */
typedef struct Csm_SymKeyWrapSymConfigType_tag
{
	Csm_CallbackSymKeyWrapSymType CsmCallbackSymKeyWrapSym ;
/* Name of a C symbol which contains the configuration of the underlying cryptographic primitive. */
	char* CsmSymKeyWrapSymInitConfiguration ;
/* Name of the cryptographic primitive to use. */
	char* CsmSymKeyWrapSymPrimitiveName ;
} Csm_SymKeyWrapSymConfigType ;

/* Container for incorporation of AsymDecrypt primitives. */
typedef struct Csm_AsymDecryptType_tag
{
	Csm_AsymDecryptConfigType* CsmAsymDecryptConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement an asymmetrical
 *  decryption.
 */
	uint32 CsmAsymDecryptMaxKeySize ;
} Csm_AsymDecryptType ;

/* Container for incorporation of AsymEncrypt primitives. */
typedef struct Csm_AsymEncryptType_tag
{
	Csm_AsymEncryptConfigType* CsmAsymEncryptConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement an asymmetrical
 *  encryption.
 */
	uint32 CsmAsymEncryptMaxKeySize ;
} Csm_AsymEncryptType ;

/* Container for incorporation of AsymPrivateKeyExtract primitives. */
typedef struct Csm_AsymPrivateKeyExtractType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Csm_AsymPrivateKeyExtractConfigType* CsmAsymPrivateKeyExtractConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement an asymmetrical
 *  private key extraction.
 */
	uint32 CsmAsymPrivateKeyExtractMaxKeySize ;
} Csm_AsymPrivateKeyExtractType ;

/* Container for incorporation of AsymPrivateKeyWrapSym primitives. */
typedef struct Csm_AsymPrivateKeyWrapAsymType_tag
{
	Csm_AsymPrivateKeyWrapAsymConfigType* CsmAsymPrivateKeyWrapAsymConfig ;
/* The maximum length, in bytes, of all private key types used in all CRY primitives which implement
 *  an asymmetrical private key wrapping.
 */
	uint32 CsmAsymPrivateKeyWrapAsymMaxPrivKeySize ;
/* The maximum length, in bytes, of all public key types used in all CRY primitives which implement
 *  an asymmetrical private key wrapping.
 */
	uint32 CsmAsymPrivateKeyWrapAsymMaxPubKeySize ;
} Csm_AsymPrivateKeyWrapAsymType ;

/* Container for incorporation of AsymPrivateKeyWrapSym primitives. */
typedef struct Csm_AsymPrivateKeyWrapSymType_tag
{
	Csm_AsymPrivateKeyWrapSymConfigType* CsmAsymPrivateKeyWrapSymConfig ;
/* The maximum length, in bytes, of all private information types used in all CRY primitives which
 *  implement an asymetric private key wrapping.
 */
	uint32 CsmAsymPrivateKeyWrapSymMaxPrivKeySize ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement an asymetrical
 *  private key wrapping.
 */
	uint32 CsmAsymPrivateKeyWrapSymMaxSymKeySize ;
} Csm_AsymPrivateKeyWrapSymType ;

/* Container for incorporation of AsymPublicKeyExtract primitives. */
typedef struct Csm_AsymPublicKeyExtractType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Csm_AsymPublicKeyExtractConfigType* CsmAsymPublicKeyExtractConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement an asymmetrical
 *  public key extraction.
 */
	uint32 CsmAsymPublicKeyExtractMaxKeySize ;
} Csm_AsymPublicKeyExtractType ;

/* Container for incorporation of Checksum primitives. */
typedef struct Csm_ChecksumType_tag
{
	Csm_ChecksumConfigType* CsmChecksumConfig ;
} Csm_ChecksumType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct Csm_DemEventParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when the error "Initialization of CSM
 *  module failed" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* CSM_E_INIT_FAILED ;
} Csm_DemEventParameterRefsType ;

/* Container for common configuration options. */
typedef struct Csm_GeneralType_tag
{
/* True: Development error detection enabled.
 *                                         False: Development error detection disabled
 */
/* Pre-processor switch to enable and disable development error detection. */
	boolean CsmDevErrorDetect ;
/* This type can be e.g. uint8, uint16 or uint32. */
/* The scalar type which has the maximum alignment restrictions on the given platform. */
	char* CsmMaxAlignScalarType ;
/* If interruption is turned on with the configuration option CsmUseInterruption, this option configures
 *  the maximum time in microseconds the main function shall be allowed to run before it must interrupt
 *  itself. The lowest allowed value for the option is implementation dependent.
 */
	uint32 CsmMaximumBlockingTime ;
/* True: Interruption of job processing enabled
 *                                         False: Interruption of job processing disabled
 */
/* Pre-processor switch to enable and disable interruption of job processing. */
	boolean CsmUseInterruption ;
/* True: synchronous job processing enabled
 *                                         False: synchronous job processing disabled
 */
/* Pre-processor switch to enable and disable synchronous job processing. */
	boolean CsmUseSyncJobProcessing ;
/* Pre-processor switch to enable and disable availability of the API Csm_GetVersionInfo(). True:
 *  API Csm_GetVersionInfo() is available.  False: API Csm_GetVersionInfo() is not available.
 */
	boolean CsmVersionInfoApi ;
} Csm_GeneralType ;

/* Container for incorporation of Hash primitives. */
typedef struct Csm_HashType_tag
{
	Csm_HashConfigType* CsmHashConfig ;
} Csm_HashType ;

/* Container for incorporation of KeyDerive primitives. */
typedef struct Csm_KeyDeriveType_tag
{
	Csm_KeyDeriveConfigType* CsmKeyDeriveConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a key derivation.
 */
	uint32 CsmKeyDeriveMaxKeySize ;
} Csm_KeyDeriveType ;

/* Container for incorporation of CsmKeyDeriveSymKey primitives. */
typedef struct Csm_KeyDeriveSymKeyType_tag
{
	Csm_KeyDeriveSymKeyConfigType* CsmKeyDeriveSymKeyConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a key derivation.
 */
	uint32 CsmKeyDeriveSymKeyMaxSymKeySize ;
} Csm_KeyDeriveSymKeyType ;

/* Container for incorporation of KeyExchangeCalcPubVal primitives. */
typedef struct Csm_KeyExchangeCalcPubValType_tag
{
	Csm_KeyExchangeCalcPubValConfigType* CsmKeyExchangeCalcPubValConfig ;
/* The maximum length, in bytes, of all base types used in all CRY primitives which implement a
 *  public value calculation.
 */
	uint32 CsmKeyExchangeCalcPubValMaxBaseTypeSize ;
/* The maximum length, in bytes, of all private information types used in all CRY primitives which
 *  implement a public value calculation.
 */
	uint32 CsmKeyExchangeCalcPubValMaxPrivateTypeSize ;
} Csm_KeyExchangeCalcPubValType ;

/* Container for incorporation of KeyExchangeCalcSecret primitives. */
typedef struct Csm_KeyExchangeCalcSecretType_tag
{
	Csm_KeyExchangeCalcSecretConfigType* CsmKeyExchangeCalcSecretConfig ;
/* The maximum length, in bytes, of all base types used in all CRY primitives which implement a
 *  shared secret calculation.
 */
	uint32 CsmKeyExchangeCalcSecretMaxBaseTypeSize ;
/* The maximum length, in bytes, of all private information types used in all CRY primitives which
 *  implement a shared secret calculation.
 */
	uint32 CsmKeyExchangeCalcSecretMaxPrivateTypeSize ;
} Csm_KeyExchangeCalcSecretType ;

/* Container for incorporation of KeyExchangeCalcSymKey primitives. */
typedef struct Csm_KeyExchangeCalcSymKeyType_tag
{
	Csm_KeyExchangeCalcSymKeyConfigType* CsmKeyExchangeCalcSymKeyConfig ;
/* The maximum length, in bytes, of all base types used in all CRY primitives which implement a
 *  symmetrical key calculation.
 */
	uint32 CsmKeyExchangeCalcSymKeyMaxBaseTypeSize ;
/* The maximum length, in bytes, of all private information types used in all CRY primitives which
 *  implement a symmetrical key calculation.
 */
	uint32 CsmKeyExchangeCalcSymKeyMaxPrivateTypeSize ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a symmetrical
 *  key calculation.
 */
	uint32 CsmKeyExchangeCalcSymKeyMaxSymKeySize ;
} Csm_KeyExchangeCalcSymKeyType ;

/* Container for incorporation of MacGenerate primitives. */
typedef struct Csm_MacGenerateType_tag
{
	Csm_MacGenerateConfigType* CsmMacGenerateConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a MAC generation.
 */
	uint32 CsmMacGenerateMaxKeySize ;
} Csm_MacGenerateType ;

/* Container for incorporation of MacVerify primitives. */
typedef struct Csm_MacVerifyType_tag
{
	Csm_MacVerifyConfigType* CsmMacVerifyConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a MAC verification.
 */
	uint32 CsmMacVerifyMaxKeySize ;
} Csm_MacVerifyType ;

/* Container for incorporation of RandomGenerate primitives. */
typedef struct Csm_RandomGenerateType_tag
{
	Csm_RandomGenerateConfigType* CsmRandomGenerateConfig ;
} Csm_RandomGenerateType ;

/* Container for incorporation of RandomSeed primitives. */
typedef struct Csm_RandomSeedType_tag
{
	Csm_RandomSeedConfigType* CsmRandomSeedConfig ;
} Csm_RandomSeedType ;

/* Container for incorporation of SignatureGenerate primitives */
typedef struct Csm_SignatureGenerateType_tag
{
	Csm_SignatureGenerateConfigType* CsmSignatureGenerateConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a signature
 *  generation.
 */
	uint32 CsmSignatureGenerateMaxKeySize ;
} Csm_SignatureGenerateType ;

/* Container for incorporation of SignatureVerify primitives. */
typedef struct Csm_SignatureVerifyType_tag
{
	Csm_SignatureVerifyConfigType* CsmSignatureVerifyConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a signature
 *  verification.
 */
	uint32 CsmSignatureVerifyMaxKeySize ;
} Csm_SignatureVerifyType ;

/* Container for incorporation of SymBlockDecrypt primitives. */
typedef struct Csm_SymBlockDecryptType_tag
{
	Csm_SymBlockDecryptConfigType* CsmSymBlockDecryptConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a symmetrical
 *  block decryption.
 */
	uint32 CsmSymBlockDecryptMaxKeySize ;
} Csm_SymBlockDecryptType ;

/* Container for incorporation of SymBlockEncrypt primitives. */
typedef struct Csm_SymBlockEncryptType_tag
{
	Csm_SymBlockEncryptConfigType* CsmSymBlockEncryptConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a symmetrical
 *  block encryption.
 */
	uint32 CsmSymBlockEncryptMaxKeySize ;
} Csm_SymBlockEncryptType ;

/* Container for incorporation of SymDecrypt primitives */
typedef struct Csm_SymDecryptType_tag
{
/* The container name serves as a symbolic name for the identifier of a service configuration. */
	Csm_SymDecryptConfigType* CsmSymDecryptConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a symmetrical
 *  decryption.
 */
	uint32 CsmSymDecryptMaxKeySize ;
} Csm_SymDecryptType ;

/* Container for incorporation of SymEncrypt primitives. */
typedef struct Csm_SymEncryptType_tag
{
	Csm_SymEncryptConfigType* CsmSymEncryptConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a symmetrical
 *  encryption.
 */
	uint32 CsmSymEncryptMaxKeySize ;
} Csm_SymEncryptType ;

/* Container for incorporation of SymKeyExtract primitives. */
typedef struct Csm_SymKeyExtractType_tag
{
	Csm_SymKeyExtractConfigType* CsmSymKeyExtractConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement a symmetrical
 *  key extraction.
 */
	uint32 CsmSymKeyExtractMaxKeySize ;
} Csm_SymKeyExtractType ;

/* Container for incorporation of SymKeyWrapSym primitives. */
typedef struct Csm_SymKeyWrapAsymType_tag
{
	Csm_SymKeyWrapAsymConfigType* CsmSymKeyWrapAsymConfig ;
/* The maximum length, in bytes, of all public key  types used in all CRY primitives which implement
 *  an asymmetrical key wrapping.
 */
	uint32 CsmSymKeyWrapAsymMaxPubKeySize ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement an asymmetrical
 *  key wrapping.
 */
	uint32 CsmSymKeyWrapAsymMaxSymKeySize ;
} Csm_SymKeyWrapAsymType ;

/* Container for incorporation of SymKeyWrapSym primitives. */
typedef struct Csm_SymKeyWrapSymType_tag
{
	Csm_SymKeyWrapSymConfigType* CsmSymKeyWrapSymConfig ;
/* The maximum, in bytes, of all key lengths used in all CRY primitives which implement an symmetrical
 *  key wrapping.
 */
	uint32 CsmSymKeyWrapSymMaxSymKeySize ;
} Csm_SymKeyWrapSymType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* CSM_TYPES_H */

