/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef FRIF_TYPES_H
#define FRIF_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct FrIf_ClusterDemEventParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when an error in ACS on channel A was
 *  detected. If the reference is not configured the error shall not be reported (neither to DET
 *  nor to DEM).
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FRIF_E_ACS_CH_A ;
/* Reference to the DemEventParameter which shall be issued when an error in ACS on channel B was
 *  detected. If the reference is not configured the error shall not be reported (neither to DET
 *  nor to DEM).
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FRIF_E_ACS_CH_B ;
/* Reference to the DemEventParameter which shall be issued when an error in NIT on channel A was
 *  detected. If the reference is not configured the error shall not be reported (neither to DET
 *  nor to DEM).
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FRIF_E_NIT_CH_A ;
/* Reference to the DemEventParameter which shall be issued when an error in NIT on channel B was
 *  detected. If the reference is not configured the error shall not be reported (neither to DET
 *  nor to DEM).
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FRIF_E_NIT_CH_B ;
/* Reference to the DemEventParameter which shall be issued when an error in SW on channel A was
 *  detected. If the reference is not configured the error shall not be reported (neither to DET
 *  nor to DEM).
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FRIF_E_SW_CH_A ;
/* Reference to the DemEventParameter which shall be issued when an error in SW on channel B was
 *  detected. If the reference is not configured the error shall not be reported (neither to DET
 *  nor to DEM).
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FRIF_E_SW_CH_B ;
} FrIf_ClusterDemEventParameterRefsType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct FrIf_FrameTriggeringDemEventParameterRefsType_tag
{
/* Reference to DEM event Id that is reported when FlexRay driver module detects slot errors. If
 *  this parameter is not configured, no event reporting happens.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FrIfDemFTSlotStatusRef ;
} FrIf_FrameTriggeringDemEventParameterRefsType ;

/* This parameter contains the FlexRay Channel used to transmit this FlexRay Frame. */
typedef enum
{
	FRIF_CHANNEL_A,
	FRIF_CHANNEL_AB,
	FRIF_CHANNEL_B
} FrIf_ChannelType ;

/* A Frame triggering contains the communication parameters of the FlexRay Frame as well as a reference
 *  to the Frame Construction Plan.
 */
typedef struct FrIf_FrameTriggeringType_tag
{
	FrIf_FrameTriggeringDemEventParameterRefsType* FrIfFrameTriggeringDemEventParameterRefs ;
/* Allows L-PDU length reduction ('FrIfLSduLength' defines max. length) and indicates that the
 *  related CC buffer has to be reconfigured for the actual length and Header-CRC before transmission
 *  of the L-PDU.
 */
	boolean FrIfAllowDynamicLSduLength ;
/* Defines wether the driver's API function Fr_TransmitTxLPdu() shall always be called for this
 *  L-PDU.
 */
	boolean FrIfAlwaysTransmit ;
/* This parameter contains the FlexRay Base Cycle used to transmit this FlexRay Frame. */
	uint8 FrIfBaseCycle ;
	FrIf_ChannelType FrIfChannel ;
/* possible Values: 1,2,4,8,16,32,64 */
/* This parameter contains the FlexRay Cycle Repetition used to transmit this FlexRay Frame.. */
	uint8 FrIfCycleRepetition ;
/* The payload length of the Frame is given here. This parameter is required for validation if
 *  configured PDUs and update information fits into the Frame at configuration time [bytes].
 */
	uint8 FrIfLSduLength ;
/* dynamic segment can be used as receiver filterable data called the message ID. */
/* The first two bytes of the payload segment of the FlexRay frame format for frames transmitted
 *  in the
 */
	uint16 FrIfMessageId ;
/* Switching the Payload Preamble bit. */
	boolean FrIfPayloadPreamble ;
/* This parameter contains the FlexRay Slot ID used to transmit this FlexRay Frame. */
	uint16 FrIfSlotId ;
/* Reference to the Construction Plan of the FlexRay Frame. */
/* /AUTOSAR/EcucDefs/FrIf/FrIfConfig/FrIfFrameStructure */
	FrIf_FrameStructureType* FrIfFrameStructureRef ;
} FrIf_FrameTriggeringType ;

/* Reference to a L-PDU index */
typedef struct FrIf_LPduType_tag
{
/* This parameter identifies the L-PDU in the interaction between FlexRay Interface and FlexRay
 *  Driver.
 */
	uint16 FrIfLPduIdx ;
/* This parameter specifies that this LPdu is reconfigurable using FrIf_ReconfigLPdu. This means
 *  that this LPdu can be assigned to a different FrameTriggering at runtime. However, this reconfiguration
 *  is limited by hardware constraints. The direction of the LPdu cannot be reconfigured.
 */
	boolean FrIfReconfigurable ;
/* Reference to the assigned Frame triggering. */
/* /AUTOSAR/EcucDefs/FrIf/FrIfConfig/FrIfCluster/FrIfController/FrIfFrameTriggering */
	FrIf_FrameTriggeringType* FrIfVBTriggeringRef ;
} FrIf_LPduType ;

/* This parameter identifies to which one of the two Channels (A, B, A and B) of the Cluster the
 *  Transceiver is connected. FrIfClusterChannel shall map to Fr_ChannelType: FRIF_CHANNEL_A ==
 *  FR_CHANNEL_A FRIF_CHANNEL_B == FR_CHANNEL_B FR_CHANNEL_AB shall not be used.
 */
typedef enum
{
	FRIF_CHANNEL_A,
	FRIF_CHANNEL_B
} FrIf_ClusterChannelType ;

/* Up to two FlexRay Transceivers may connect a Controller to a Cluster. This container realizes
 *  a Controller-Transceiver assignment.
 */
typedef struct FrIf_TransceiverType_tag
{
	FrIf_ClusterChannelType FrIfClusterChannel ;
/* Reference to a Transceiver Driver Channel. This reference is unique for the ECU. */
/* /AUTOSAR/EcucDefs/FrTrcv/FrTrcvChannel */
	FrTrcv_ChannelType* FrIfFrTrcvChannelRef ;
} FrIf_TransceiverType ;

/* This container contains the configuration of FlexRay CC. */
typedef struct FrIf_ControllerType_tag
{
	FrIf_FrameTriggeringType* FrIfFrameTriggering ;
	FrIf_LPduType* FrIfLPdu ;
	FrIf_TransceiverType* FrIfTransceiver ;
/* This parameter provides a zero-based consecutive index of the FlexRay Communication Controllers.
 *  Upper layer BSW modules and the FrIf itself use this index to identify a FlexRay CC.
 */
	uint8 FrIfCtrlIdx ;
/* Reference to a Controller, which is handled by a specific Driver. This reference is unique for
 *  the ECU.
 */
/* /AUTOSAR/EcucDefs/Fr/FrMultipleConfiguration/FrController */
	Fr_ControllerType* FrIfFrCtrlRef ;
} FrIf_ControllerType ;

/* The action to be performed in the FlexRay Operation */
typedef enum
{
	FRIF_COMMUNICATIONACTION_DECOUPLED_TRANSMISSION,
	FRIF_COMMUNICATIONACTION_FREE_OP_A,
	FRIF_COMMUNICATIONACTION_FREE_OP_B,
	FRIF_COMMUNICATIONACTION_PREPARE_LPDU,
	FRIF_COMMUNICATIONACTION_RECEIVE_AND_INDICATE,
	FRIF_COMMUNICATIONACTION_RECEIVE_AND_STORE,
	FRIF_COMMUNICATIONACTION_RX_INDICATION,
	FRIF_COMMUNICATIONACTION_TX_CONFIRMATION
} FrIf_CommunicationActionType ;

/* A separate operation which is part of a FlexRay Job and defines what type of action is executed. */
typedef struct FrIf_CommunicationOperationType_tag
{
	FrIf_CommunicationActionType FrIfCommunicationAction ;
/* For each FlexRay Communication Job, this index spans a range of zero-based consecutive values
 *  and thus defines the order of the FlexRay Communication Operation in the respective FlexRay
 *  Communication Job.
 */
	uint8 FrIfCommunicationOperationIdx ;
/* Defines the maximum number of loops for the receive RECEIVE_AND_INDICATE (Use case: emptying
 *  a FIFO).
 */
	uint16 FrIfRxComOpMaxLoop ;
/* Reference to a L-PDu index */
/* /AUTOSAR/EcucDefs/FrIf/FrIfConfig/FrIfCluster/FrIfController/FrIfLPdu */
	FrIf_LPduType* FrIfLPduIdxRef ;
} FrIf_CommunicationOperationType ;

/* A job may contain more than one operation that are executed at a specific point in time. */
typedef struct FrIf_JobType_tag
{
	FrIf_CommunicationOperationType* FrIfCommunicationOperation ;
/* The FlexRay Cycle in which the communication operation will execute this job */
	uint8 FrIfCycle ;
/* Macrotick offset in the Cycle [Macrotick] */
	uint32 FrIfMacrotick ;
} FrIf_JobType ;

/* This container specifies a list of all FlexRay Jobs of the Cluster to be performed by FrIf_JobListExec_<ClstIdx>().
 */
typedef struct FrIf_JobListType_tag
{
	FrIf_JobType* FrIfJob ;
/* Reference to the absolute timer to be used to trigger the interrupt whose ISR contains the FrIf_JobListExec_<ClstIdx>()
 *  function.
 */
/* /AUTOSAR/EcucDefs/Fr/FrMultipleConfiguration/FrController/FrAbsoluteTimer */
	Fr_AbsoluteTimerType* FrIfAbsTimerRef ;
} FrIf_JobListType ;

/* The channels that are used by the cluster. */
typedef enum
{
	FRIF_GCHANNELS_FR_CHANNEL_A,
	FRIF_GCHANNELS_FR_CHANNEL_AB,
	FRIF_GCHANNELS_FR_CHANNEL_B
} FrIf_GChannelsType ;

/* Nominal bit time in seconds */
typedef enum
{
	FRIF_GDBIT_T100NS,
	FRIF_GDBIT_T200NS,
	FRIF_GDBIT_T400NS
} FrIf_GdBitType ;

/* Sample clock period */
typedef enum
{
	FRIF_GDSAMPLECLOCKPERIOD_T12_5NS,
	FRIF_GDSAMPLECLOCKPERIOD_T25NS,
	FRIF_GDSAMPLECLOCKPERIOD_T50NS
} FrIf_GdSampleClockPeriodType ;

/* This container specifies a FrIf Cluster and all related data which is required to enable communication
 *  of the Cluster. A Cluster may consist of more than one Controller.
 */
typedef struct FrIf_ClusterType_tag
{
	FrIf_ClusterDemEventParameterRefsType* FrIfClusterDemEventParameterRefs ;
	FrIf_ControllerType* FrIfController ;
	FrIf_JobListType* FrIfJobList ;
/* This parameter provides a zero-based consecutive index of the FlexRay Clusters. Upper layer
 *  BSW modules and the FrIf itself use this index to identify a FlexRay Cluster.
 */
	uint8 FrIfClstIdx ;
/* Indicates whether NIT error status of each cluster shall be detected or not. */
	boolean FrIfDetectNITError ;
/* Implementation Type: Fr_ChannelType */
	FrIf_GChannelsType FrIfGChannels ;
/* Maximum number of times a node in the cluster is permitted to attempt to start the cluster by
 *  initiating schedule synchronization
 */
	uint8 FrIfGColdStartAttempts ;
/* Remark: Set to 63 for FlexRay Protocol 2.1 Rev. A compliance. */
/* Maximum cycle counter value in a given cluster. */
	uint8 FrIfGCycleCountMax ;
/* parameter pdListenTimeout. */
/* Upper limit for the start up listen timeout and wake up listen timeout in the presence of noise.
 *  It is used as a multiplier of the node
 */
	uint8 FrIfGListenNoise ;
/* Note: Lower limit 10 for FlexRay Protocol 2.1 Rev. A compliance */
/* Number of macroticks in a communication cycle. */
	uint16 FrIfGMacroPerCycle ;
/* Threshold used for testing the vClockCorrectionFailed counter. Defines the number of consecutive
 *  even/odd Cycle pairs with missing clock correction terms that will cause the protocol to transition
 *  from the POC:normal active or POC:normal passive state into the POC:halt state. [Even/odd cycle
 *  pairs].
 */
	uint8 FrIfGMaxWithoutClockCorrectFatal ;
/* Threshold used for testing the vClockCorrectionFailed counter. Defines the number of consecutive
 *  even/odd Cycle pairs with missing clock correction terms that will cause the protocol to transition
 *  from the POC:normal active state to the POC:normal passive state. [Even/Odd cycle pairs]
 */
	uint8 FrIfGMaxWithoutClockCorrectPassive ;
/* Length of the Network Management vector in a cluster [bytes] */
	uint8 FrIfGNetworkManagementVectorLength ;
/* Remark: Upper limit 7986 for FlexRay Protocol 2.1 Rev. A compliance */
/* Number of minislots in the dynamic segment */
	uint16 FrIfGNumberOfMinislots ;
/* Number of static slots in the static segment */
	uint16 FrIfGNumberOfStaticSlots ;
/* Payload length of a static frame [16 bit words] */
	uint8 FrIfGPayloadLengthStatic ;
/* Maximum number of distinct syncframe identifiers present in a  given cluster. This parameter
 *  maps to FlexRay Protocol 2.1 Rev. A parameter gSyncNodeMax.
 */
	uint8 FrIfGSyncFrameIDCountMax ;
/* Number of macroticks the action point is offset from the beginning of a static slot. */
	uint8 FrIfGdActionPointOffset ;
	FrIf_GdBitType FrIfGdBit ;
/* Remark: Range 67 to 99 for FlexRay Protocol 2.1 Rev. A compliance */
/* Upper limit of the CAS acceptance windows [gdBit] */
	uint8 FrIfGdCasRxLowMax ;
/* Remark: Lower limit 0.000024 for FlexRay Protocol 3.0 compliance. */
/* Length of the cycle, expressed in [s] */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrIfGdCycle ;
/* Duration of the idle phase within a dynamic slot [Minislots]. */
	uint8 FrIfGdDynamicSlotIdlePhase ;
/* Remark: Set to 0 for FlexRay Protocol 2.1 Rev. A compliance. */
/* Duration for which the bitstrobing is paused after transmission [gdBit]. */
	uint8 FrIfGdIgnoreAfterTx ;
/* Duration of the cluster wide nominal macrotick, expressed in s */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrIfGdMacrotick ;
/* Number of Macroticks the Minislot action point is offset from the beginning of a Minislot [Macroticks].
 */
	uint8 FrIfGdMiniSlotActionPointOffset ;
/* Duration of a minislot [Macroticks] */
	uint8 FrIfGdMinislot ;
/* Remark: Upper limit 805 for FlexRay Protocol 2.1 Rev. A compliance. */
/* Duration of the Network Idle Time [Macroticks] */
	uint16 FrIfGdNit ;
	FrIf_GdSampleClockPeriodType FrIfGdSampleClockPeriod ;
/* Remark: Range 4-661 for FlexRay Protocol 2.1 Rev. A compliance. */
/* Duration of a static slot [Macroticks]. */
	uint16 FrIfGdStaticSlot ;
/* Remark: Range 0-142 for FlexRay Protocol 2.1 Rev. A compliance. */
/* Duration of the symbol window [Macroticks]. */
	uint8 FrIfGdSymbolWindow ;
/* Remark: Set to GdActionPointOffset for FlexRay Protocol 2.1 Rev. A compliance. */
/* Number of macroticks the action point offset is from the beginning of the symbol window [Macroticks].
 */
	uint8 FrIfGdSymbolWindowActionPointOffset ;
/* Remark: Lower limit 3 for FlexRay Protocol 2.1 Rev. A compliance. */
/* Number of bits in the Transmission Start Sequence [gdBits]. */
	uint8 FrIfGdTSSTransmitter ;
/* Number of bits used by the node to test the duration of the 'idle' or HIGH phase of a received
 *  wakeup [gdBit]. Remarks: This parameter maps to FlexRay Protocol 2.1 Rev. A parameter gdWakeupSymbolRxIdle.
 *  Lower limit 14 for FlexRay Protocol 2.1 Rev. A compliance.
 */
	uint8 FrIfGdWakeupRxIdle ;
/* Remarks: This parameter maps to FlexRay Protocol 2.1 Rev. A parameter gdWakeupSymbolRxLow. Lower
 *  limit 11 for FlexRay Protocol 2.1 Rev. A compliance.
 */
/* Number of bits used by the node to test the duration of the LOW phase of a received wakeup [gdBit].
 */
	uint8 FrIfGdWakeupRxLow ;
/* Remarks: This parameter maps to FlexRay Protocol 2.1 Rev. A parameter gdWakeupSymbolRxWindow.
 *  Upper limit 301 for FlexRay Protocol 2.1 Rev. A compliance.
 */
/* The size of the window used to detect wakeups [gdBit]. */
	uint16 FrIfGdWakeupRxWindow ;
/* Remarks: This parameter maps to FlexRay Protocol 2.1 Rev. A parameter gdWakeupSymbolTxLow. */
/* Number of bits used by the node to transmit the LOW phase of awakeup symbol and  the HIGH and
 *  LOW phases of a WUDOP [gdBit].
 */
	uint8 FrIfGdWakeupTxActive ;
/* wakeup symbol [gdBit].
 * 
 *                                                 Remarks: This parameter maps to FlexRay Protocol
 *  2.1 Rev. A
 *                                                 parameter gdWakeupSymbolTxIdle.
 */
/* Number of bits used by the node to transmit the 'idle' part of a */
	uint8 FrIfGdWakeupTxIdle ;
/* The execution cycle of the FrIf_MainFunction_<cluster>() in seconds. The FrIf does not require
 *  this information but the BSW scheduler, which invokes the cluster main functions, needs it
 *  in order to plan its tasks.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 FrIfMainFunctionPeriod ;
/* The maximum delay in macroticks the FrIf_JoblistExec_<cluster>() function is processed after
 *  the absolute timer interrupt was triggered.
 */
	uint32 FrIfMaxIsrDelay ;
/* Additional timespan in macroticks which takes jitter into account to be able to set the JobListPointer
 *  to the next possible job which can be executed in case the FlexRay Job List Execution Function
 *  has be resynchronized.
 */
	uint32 FrIfSafetyMargin ;
} FrIf_ClusterType ;

/* This container holds all the information about a PDU in a FlexRay Frame. */
typedef struct FrIf_PdusInFrameType_tag
{
/* The value specifies the offset of the PDU within the Frame [bytes]. */
	uint8 FrIfPduOffset ;
/* This value specifies where the PDU's Update-Bit is stored in the Frame (bit location of PDU's
 *  Update-Bit in the FlexRay Frame).
 */
	uint16 FrIfPduUpdateBitOffset ;
/* This is the reference to the local definition of a PDU. */
/* /AUTOSAR/EcucDefs/FrIf/FrIfConfig/FrIfPdu */
	FrIf_PduType* FrIfPduRef ;
} FrIf_PdusInFrameType ;

/* This parameter defines the ByteOrder of all Pdus that are mapped into the Frame. */
typedef enum
{
	FRIF_BYTEORDER_BIG_ENDIAN,
	FRIF_BYTEORDER_LITTLE_ENDIAN
} FrIf_ByteOrderType ;

/* The Frame structure specifies a Construction Plan how a Frame is assembled with PDUs and their
 *  respective Update-Bits.
 */
typedef struct FrIf_FrameStructureType_tag
{
	FrIf_PdusInFrameType* FrIfPdusInFrame ;
/* The absolute position of a Pdu in the Frame is
 *                                                 determined by the definition of the ByteOrder
 *  parameter:
 *                                                 If  BIG_ENDIAN is specified, the FrIfPduOffset
 *  indicates the  position of the most significant bit in the Frame.
 *                                                 If  LITTLE_ENDIAN is specified, the FrIfPduOffset
 *  indicates the position of the least significant bit in the Frame.
 */
	FrIf_ByteOrderType FrIfByteOrder ;
} FrIf_FrameStructureType ;

/* A PDU is either transmit or receive */
typedef struct FrIf_PduDirectionType_tag
{
} FrIf_PduDirectionType ;

/* Contains PDU information. A PDU may be either a transmission PDU or a reception PDU. */
typedef struct FrIf_PduType_tag
{
	FrIf_PduDirectionType* FrIfPduDirection ;
} FrIf_PduType ;

/* Configuration of the FlexRay Interface. This container is a MultipleConfigurationContainer,
 *  i.e. this container and its sub-containers exist once per configuration set.
 */
typedef struct FrIf_ConfigType_tag
{
	FrIf_ClusterType* FrIfCluster ;
	FrIf_FrameStructureType* FrIfFrameStructure ;
	FrIf_PduType* FrIfPdu ;
} FrIf_ConfigType ;

/* This container contains the general configuration parameters of the FlexRay Interface. */
typedef struct FrIf_GeneralType_tag
{
/* Maximum number of supported absolut timers. */
	uint8 FrIfAbsTimerIdx ;
/* Configuration parameter to enable/disable FrIf support to enable/disable of switching from key-slot
 *  / single-slot mode to all slot mode.
 */
	boolean FrIfAllSlotsSupport ;
/* Configuration parameter to enable/disable FrIf support to request the cancellation of the I-PDU
 *  transmission to FrDrv.
 */
	boolean FrIfCancelTransmitSupport ;
/* true: Development Error Detection and Notification on
 *                                         false: Development Error Detection and Notification
 *  off
 */
/* Switches the Development Error Detection and Notification on or off */
	boolean FrIfDevErrorDetect ;
/* Configuration parameter to enable/disable FrIf support to disables the hardware resource of
 *  a LPdu for transmission/reception.
 */
	boolean FrIfDisableLPduSupport ;
/* Configuration parameter to enable/disable FrIf support to disable branches of an active star. */
	boolean FrIfDisableTransceiverBranchSupport ;
/* Configuration parameter to enable/disable FrIf support to enable branches of an active star. */
	boolean FrIfEnableTransceiverBranchSupport ;
/* Configuration parameter to enable/disable FrIf support to enable/disable of polling the FlexRay
 *  Driver to getting CC clock correction values.
 */
	boolean FrIfGetClockCorrectionSupport ;
/* Configuration parameter to enable/disable FrIf support to enable/disable of polling the FlexRay
 *  Driver to getting error information about the FlexRay communications bus.
 */
	boolean FrIfGetGetChannelStatusSupport ;
/* Configuration parameter to enable/disable FrIf support to request the FlexRay hardware NMVector. */
	boolean FrIfGetNmVectorSupport ;
/* Configuration parameter to enable/disable FrIf support to enable/disable of polling the FlexRay
 *  Driver for the actual number of received startup frames on the bus.
 */
	boolean FrIfGetNumOfStartupFramesSupport ;
/* Configuration parameter to enable/disable FrIf support to enable/disable of polling the FlexRay
 *  Driver to getting a list of actual received sync frames.
 */
	boolean FrIfGetSyncFrameListSupport ;
/* Configuration parameter to enable/disable FrIf support to get the FlexRay Transceiver errors
 *  by calling the FlexRay Transceiver module.
 */
	boolean FrIfGetTransceiverErrorSupport ;
/* Configuration parameter to enable/disable FrIf support to get the wakeup received information
 *  from the FlexRay controller.
 */
	boolean FrIfGetWakeupRxStatusSupport ;
/* Maximum number of FlexRay Clusters that the FlexRay Interface supports. */
	uint8 FrIfNumClstSupported ;
/* Maximum number of FlexRay CCs that the FlexRay Interface supports */
	uint8 FrIfNumCtrlSupported ;
/* Defines header files for callback functions which shall be included in case of CDDs. Range of
 *  characters is 1.. 32.
 */
	char* FrIfPublicCddHeaderFile ;
/* Configuration parameter to enable/disable the optional FrIf_ReadCCConfig API. */
	boolean FrIfReadCCConfigApi ;
/* Configuration parameter to enable/disable FrIf support to enable/disable the reconfiguration
 *  of a given LPdu according to the parameters (FrameId, Channel, CycleRepetition, CycleOffset,
 *  PayloadLength, HeaderCRC) at runtime.
 */
	boolean FrIfReconfigLPduSupport ;
/* Set unused bits to a defined value. */
	uint8 FrIfUnusedBitValue ;
/* true: FrIf_GetVersionInfo() API service exists
 *                                         false: FrIf_GetVersionInfo() API service does not exist
 */
/* Enables/disables the existence of the FrIf_GetVersionInfo() API service */
	boolean FrIfVersionInfoApi ;
} FrIf_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* FRIF_TYPES_H */

