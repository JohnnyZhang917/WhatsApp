/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef XCP_TYPES_H
#define XCP_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* This container collects data transfer object specific parameters for the DAQ list. */
typedef struct Xcp_DtoType_tag
{
/* Packet identifier (PID) of the DTO that identifies the ODT the content of the DTO. */
	uint8 XcpDtoPid ;
/* This reference specifies the mapping of the DTO to the PDUs from the lower-layer interfaces
 *  (CanIf, FrIf, SoAd and Cdd).
 */
/* A reference to a XcpRxPdu is only feasible if the the DaqListType is DAQ_STIM.
 *                                                         A reference to a XcpTxPdu is only feasible
 *  if the DaqListType is DAQ.
 */
	uint8 XcpDto2PduMappingWhich;
	union
	{
/* /AUTOSAR/EcucDefs/Xcp/XcpConfig/XcpPdu/XcpRxPdu */
		Xcp_RxPduType* XcpRxPdu;
/* /AUTOSAR/EcucDefs/Xcp/XcpConfig/XcpPdu/XcpTxPdu */
		Xcp_TxPduType* XcpTxPdu;
	} XcpDto2PduMapping ;
} Xcp_DtoType ;

/* This container collects all configuration parameters that comprise an ODT entry. */
typedef struct Xcp_OdtEntryType_tag
{
/* Memory address that the ODT entry is referencing to. */
/* TODO: I don't know how to implement it */
	void* XcpOdtEntryAddress ;
/* Length of the referenced memory area that is referenced by the ODT entry. */
	uint8 XcpOdtEntryLength ;
/* Index number of the ODT entry */
	uint8 XcpOdtEntryNumber ;
} Xcp_OdtEntryType ;

/* This container contains ODT-specific parameter for the DAQ list. */
typedef struct Xcp_OdtType_tag
{
	Xcp_OdtEntryType* XcpOdtEntry ;
/* This parameter indicates the upper limit for the size of the element described by an ODT entry.
 *  Depending on the DaqListType this ODT belongs to it describes the limit for a DAQ (MAX_ODT_ENTRY_SIZE_DAQ)
 *  or a STIM (MAX_ODT_ENTRY_SIZE_STIM).
 */
	uint8 XcpOdtEntryMaxSize ;
/* Index number of this ODT within the DAQ list. */
	uint8 XcpOdtNumber ;
/* This reference maps the ODT to the according DTO in which it will be transmitted. */
/* /AUTOSAR/EcucDefs/Xcp/XcpConfig/XcpDaqList/XcpDto */
	Xcp_DtoType* XcpOdt2DtoMapping ;
} Xcp_OdtType ;

/* This indicates whether this DAQ list represents a DAQ or a STIM. */
typedef enum
{
	XCP_DAQLISTTYPE_DAQ,
	XCP_DAQLISTTYPE_DAQ_STIM,
	XCP_DAQLISTTYPE_STIM
} Xcp_DaqListTypeType ;

/* This container contains the configuration of the DAQs. */
typedef struct Xcp_DaqListType_tag
{
	Xcp_DtoType* XcpDto ;
	Xcp_OdtType* XcpOdt ;
/* Index number of the DAQ list */
	uint16 XcpDaqListNumber ;
	Xcp_DaqListTypeType XcpDaqListType ;
/* (STATIC configuration) */
/* MAX_ODT indicates the maximum amount of ODTs in this DAQ list */
	uint8 XcpMaxOdt ;
/* This parameter indicates the maximum amount of entries in an ODT of this DAQ list (STATIC configuration).
 */
	uint8 XcpMaxOdtEntries ;
} Xcp_DaqListType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct Xcp_DemEventParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when the error "Initialization of XCP
 *  failed" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* XCP_E_INIT_FAILED ;
} Xcp_DemEventParameterRefsType ;

/* Type of consistency used by event channel */
typedef enum
{
	XCP_EVENTCHANNELCONSISTENCY_DAQ,
	XCP_EVENTCHANNELCONSISTENCY_EVENT,
	XCP_EVENTCHANNELCONSISTENCY_ODT
} Xcp_EventChannelConsistencyType ;

/* This configuration parameter indicates the unit of the event channel time cycle. */
typedef enum
{
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_100MS,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_100NS,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_100PS,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_100US,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_10MS,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_10NS,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_10PS,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_10US,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_1MS,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_1NS,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_1PS,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_1S,
	XCP_EVENTCHANNELTIMEUNIT_TIMESTAMP_UNIT_1US
} Xcp_EventChannelTimeUnitType ;

/* This configuration parameter indicates what kind of DAQ list can be allocated to this event
 *  channel.
 */
typedef enum
{
	XCP_EVENTCHANNELTYPE_DAQ,
	XCP_EVENTCHANNELTYPE_DAQ_STIM,
	XCP_EVENTCHANNELTYPE_STIM
} Xcp_EventChannelTypeType ;

/* This container contains the configuration of event channels on the XCP slave. */
typedef struct Xcp_EventChannelType_tag
{
	Xcp_EventChannelConsistencyType XcpEventChannelConsistency ;
/* Maximum amount of DAQ lists that are handled by this event channel. */
	uint8 XcpEventChannelMaxDaqList ;
/* Index number of the event channel. */
	uint16 XcpEventChannelNumber ;
/* Priority of the event channel */
	uint8 XcpEventChannelPriority ;
/* The event channel time cycle indicates which sampling period is used to process this event channel.
 *  A value of 0 means 'Not cyclic'.
 */
	uint8 XcpEventChannelTimeCycle ;
	Xcp_EventChannelTimeUnitType XcpEventChannelTimeUnit ;
	Xcp_EventChannelTypeType XcpEventChannelType ;
/* References all DAQ lists that are trigged by this event channel. */
/* /AUTOSAR/EcucDefs/Xcp/XcpConfig/XcpDaqList */
	Xcp_DaqListType* XcpEventChannelTriggeredDaqListRef ;
} Xcp_EventChannelType ;

/* Contains PDU information. A PDU may be either a transmission PDU or a reception PDU. */
typedef struct Xcp_PduType_tag
{
} Xcp_PduType ;

/* Sets the DAQ_CONFIG_TYPE bit within the DAQ_PROPERTIES parameter to "static" or to "dynamic".
 *  If DAQ_STATIC is selected, the DAQ_CONFIG_TYPE bit is set to "0". If DAQ_DYNAMIC is selected,
 *  the DAQ_CONFIG_TYPE bit is set to "1".
 */
typedef enum
{
	XCP_DAQCONFIGTYPE_DAQ_DYNAMIC,
	XCP_DAQCONFIGTYPE_DAQ_STATIC
} Xcp_DaqConfigTypeType ;

/* Type of Identification Field the slave will use when transferring DAQ Packets to the master.
 *  The master has to use the same Type of Identification Field when transferring STIM Packets
 *  to the slave.
 */
typedef enum
{
	XCP_IDENTIFICATIONFIELDTYPE_ABSOLUTE,
	XCP_IDENTIFICATIONFIELDTYPE_RELATIVE_BYTE,
	XCP_IDENTIFICATIONFIELDTYPE_RELATIVE_WORD,
	XCP_IDENTIFICATIONFIELDTYPE_RELATIVE_WORD_ALIGNED
} Xcp_IdentificationFieldTypeType ;

/* This parameter indicates the number of bytes used for the timestamp field. In case No_TIME_STAMP
 *  is selected the timestamp field is not available.
 */
typedef enum
{
	XCP_TIMESTAMPTYPE_FOUR_BYTE,
	XCP_TIMESTAMPTYPE_NO_TIME_STAMP,
	XCP_TIMESTAMPTYPE_ONE_BYTE,
	XCP_TIMESTAMPTYPE_TWO_BYTE
} Xcp_TimestampTypeType ;

/* This parameter indicates the resolution of the data acquisition clock of the slave when transferring
 *  data to master.
 */
typedef enum
{
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_100MS,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_100NS,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_100PS,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_100US,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_10MS,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_10NS,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_10PS,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_10US,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_1MS,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_1NS,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_1PS,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_1S,
	XCP_TIMESTAMPUNIT_TIMESTAMP_UNIT_1US
} Xcp_TimestampUnitType ;

typedef struct Xcp_ConfigType_tag
{
	Xcp_DaqListType* XcpDaqList ;
	Xcp_DemEventParameterRefsType* XcpDemEventParameterRefs ;
	Xcp_EventChannelType* XcpEventChannel ;
	Xcp_PduType* XcpPdu ;
} Xcp_ConfigType ;

/* This container contains the general configuration parameters of the XCP. */
typedef struct Xcp_GeneralType_tag
{
	Xcp_DaqConfigTypeType XcpDaqConfigType ;
/* Indicates the number of DAQ lists for dynamic configuration. */
	uint16 XcpDaqCount ;
/* TRUE: Development Error Detection and Notificiation on
 *                                         FALSE: Development Error Detection and Notification
 *  off
 */
/* Switches the Development Error Detection and Notification on or off. */
	boolean XcpDevErrorDetect ;
	Xcp_IdentificationFieldTypeType XcpIdentificationFieldType ;
/* The XCP does not require this information but the BSW scheduler, which invokes the main function,
 *  needs it in order to plan its tasks.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 XcpMainFunctionPeriod ;
/* MAX_CTO shows the maximum length of a CTO packet in bytes. */
	uint8 XcpMaxCto ;
/* MAX_DTO shows the maximum length of a DTO packet in bytes. */
	uint16 XcpMaxDto ;
	uint16 XcpMaxEventChannel ;
/* Indicates the number of predefined, read only DAQ lists on the XCP slave. */
	uint8 XcpMinDaq ;
/* This parameter indicates the amount of ODTs of a DAQ list using dynamic DAQ list configuration. */
	uint8 XcpOdtCount ;
/* Indicates the amount of entries into an ODT using dynamic DAQ list configuration. */
	uint8 XcpOdtEntriesCount ;
/* Indicates the size of an element described by an ODT entry to the DaqListType for a DAQ. */
	uint8 XcpOdtEntrySizeDaq ;
/* Indicates the size of an element described by an ODT entry to the DaqListType for a stim. */
	uint8 XcpOdtEntrySizeStim ;
/* Enabling of XCPonCAN functionality */
	boolean XcpOnCanEnabled ;
/* Enabling of XCPonCdd functionality */
	boolean XcpOnCddEnabled ;
/* Enabling of XCPonEthernet functionality */
	boolean XcpOnEthernetEnabled ;
/* Enabling of XCPonFlexRay functionality */
	boolean XcpOnFlexRayEnabled ;
/* This parameter enables and disables the support for Prescaler support. True is Enabled, False
 *  is disabled
 */
	boolean XcpPrescalerSupported ;
/* TRUE: Suppressing of TxPDUs supported
 *                                         FALSE: Suppressing of TxPDUs not supported
 */
/* Switches the support of suppressing transmission of PDUs per communication channel on or off. */
	boolean XcpSuppressTxSupport ;
/* This parameter defines the timestamp that will increment based TIMESTAMP_TICKS per unit and
 *  wrap around if an overflow occurs.
 */
	uint16 XcpTimestampTicks ;
	Xcp_TimestampTypeType XcpTimestampType ;
	Xcp_TimestampUnitType XcpTimestampUnit ;
/* TRUE: XCP_GetVersionInfo() API service exists
 *                                         FALSE: XCP_GetVersionInfo() API service does not exist
 */
/* Enables/disables the existence of the XCP_GetVersionInfo() API service. */
	boolean XcpVersionInfoApi ;
/* This parameter contains a reference to the counter, which is used by XCP. */
/* /AUTOSAR/EcucDefs/Os/OsCounter */
	Os_CounterType* XcpCounterRef ;
} Xcp_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* XCP_TYPES_H */

