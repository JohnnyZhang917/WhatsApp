/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef LINIF_TYPES_H
#define LINIF_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* This container represents a byte within the 8 byte array. */
typedef struct LinIf_FixedFrameSduByteType_tag
{
/* Index of the Byte in the SDU (response) 8 byte array. */
	uint8 LinIfFixedFrameSduBytePos ;
/* Byte value in the SDU (response) 8-byte array. */
	uint8 LinIfFixedFrameSduByteVal ;
} LinIf_FixedFrameSduByteType ;

/* In case this is a fixed frame this is the SDU (response). */
typedef struct LinIf_FixedFrameSduType_tag
{
	LinIf_FixedFrameSduByteType* LinIfFixedFrameSduByte ;
} LinIf_FixedFrameSduType ;

/* Direction of the frame */
typedef struct LinIf_PduDirectionType_tag
{
} LinIf_PduDirectionType ;

/* List of unconditional Frames that can be sent in a sporadic Frame slot. */
typedef struct LinIf_SubstitutionFramesType_tag
{
/* Priority of an unconditional frame if used as a sporadic frame. */
	uint8 LinIfFramePriority ;
/* Reference to an unconditional Frame that can be sent in a sporadic Frame slot. */
/* /AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig/LinIfChannel/LinIfFrame */
	LinIf_FrameType* LinIfSubstitutionFrameRef ;
} LinIf_SubstitutionFramesType ;

/* Type of checksum that the frame is using. */
typedef enum
{
	LINIF_CHECKSUMTYPE_CLASSIC,
	LINIF_CHECKSUMTYPE_ENHANCED
} LinIf_ChecksumTypeType ;

/* Type of frame that is described (e.g. sporadic frame). */
typedef enum
{
	LINIF_FRAMETYPE_ASSIGN,
	LINIF_FRAMETYPE_ASSIGN_FRAME_ID_RANGE,
	LINIF_FRAMETYPE_ASSIGN_NAD,
	LINIF_FRAMETYPE_CONDITIONAL,
	LINIF_FRAMETYPE_EVENT_TRIGGERED,
	LINIF_FRAMETYPE_FREE,
	LINIF_FRAMETYPE_MRF,
	LINIF_FRAMETYPE_SAVE_CONFIGURATION,
	LINIF_FRAMETYPE_SPORADIC,
	LINIF_FRAMETYPE_SRF,
	LINIF_FRAMETYPE_UNASSIGN,
	LINIF_FRAMETYPE_UNCONDITIONAL
} LinIf_FrameTypeType ;

/* Generic container for all types of LIN frames. The shortName of this container is used as LinIfFrameName.
 */
typedef struct LinIf_FrameType_tag
{
/* This container represent an eight byte array. The Byte order
 *                                                         shall be MSB first.
 */
	LinIf_FixedFrameSduType* LinIfFixedFrameSdu ;
	LinIf_PduDirectionType* LinIfPduDirection ;
	LinIf_SubstitutionFramesType* LinIfSubstitutionFrames ;
	LinIf_ChecksumTypeType LinIfChecksumType ;
/* The sporadic slot is not found among the frame types. A sporadic slot is a set of sporadic frames. */
	LinIf_FrameTypeType LinIfFrameType ;
/* Length of the LIN SDU in bytes. */
	uint8 LinIfLength ;
/* Protected ID of the LIN frame. There is no reason to calculate the Parity in run-time. */
	uint8 LinIfPid ;
} LinIf_FrameType ;

/* Each Master can only be connected to one physical channel. This could be compared to the Node
 *  parameter in a LDF file.
 */
typedef struct LinIf_MasterType_tag
{
/* Defines a time-base for one LIN cluster in seconds (normally 0.002, 0.005 or 0.010s). */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 LinIfClusterTimeBase ;
/* The jitter specifies the differences between the maximum and minimum delay from time base tick
 *  to the header sending start point in seconds.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 LinIfJitter ;
} LinIf_MasterType ;

/* Describes an entry in the schedule table (also known as Frame Slot). */
typedef struct LinIf_EntryType_tag
{
/* Delay to next entry in schedule table in seconds. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 LinIfDelay ;
/* Position of the Frame Entry in the Schedule Table. The first entry index in the schedule table
 *  is 0.
 */
	uint8 LinIfEntryIndex ;
/* Reference to the schedule table, which resolves the collision. */
/* /AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig/LinIfChannel/LinIfScheduleTable */
	LinIf_ScheduleTableType* LinIfCollisionResolvingRef ;
/* Reference to the frames that belong to this schedule table entry. */
/* /AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig/LinIfChannel/LinIfFrame */
	LinIf_FrameType* LinIfFrameRef ;
} LinIf_EntryType ;

/* Defines, where a schedule table shall be proceeded in case if it has been interrupted by a RUN-ONCE
 *  table.
 */
typedef enum
{
	LINIF_RESUMEPOSITION_CONTINUE_AT_IT_POINT,
	LINIF_RESUMEPOSITION_START_FROM_BEGINNING
} LinIf_ResumePositionType ;

/* The schedule table can be executed in two different modes. */
typedef enum
{
	LINIF_RUNMODE_RUN_CONTINUOUS,
	LINIF_RUNMODE_RUN_ONCE
} LinIf_RunModeType ;

/* The schedule table can be executed in three different modes. */
typedef enum
{
	LINIF_SCHEDULEMODE_LINTP_APPLICATIVE_SCHEDULE,
	LINIF_SCHEDULEMODE_LINTP_DIAG_REQUEST,
	LINIF_SCHEDULEMODE_LINTP_DIAG_RESPONSE
} LinIf_ScheduleModeType ;

/* Describes a schedule table. Each LinIfChannel may have several schedule tables. Each schedule
 *  table can only be connected to one channel.
 */
typedef struct LinIf_ScheduleTableType_tag
{
	LinIf_EntryType* LinIfEntry ;
	LinIf_ResumePositionType LinIfResumePosition ;
	LinIf_RunModeType LinIfRunMode ;
	LinIf_ScheduleModeType LinIfScheduleMode ;
/* This is the unique index used by upper layers to identify a schedule. Note that the NULL_SCHEDULE
 *  for each channel has index 0.
 */
	uint8 LinIfScheduleTableIndex ;
/* Optional schedule name used to cross-reference with a LDF. This parameter shall always be accompanied
 *  by LIN_IF_SCHEDULE_INDEX.
 */
	char* LinIfScheduleTableName ;
} LinIf_ScheduleTableType ;

/* The Node attributes of the Slaves are provided with these parameter. The ShortName of this container
 *  is used as LinIfNodeName.
 */
typedef struct LinIf_SlaveType_tag
{
/* Definition of the initial node address */
	uint8 LinIfConfiguredNad ;
/* LIN function ID */
	uint8 LinIfFunctionId ;
/* Defines the LIN Protocol version which is used by the slave. */
	char* LinIfProtocolVersion ;
/* LIN Supplier ID */
	uint16 LinIfSupplierId ;
/* Specifies the Variant ID */
	uint8 LinIfVariant ;
} LinIf_SlaveType ;

/* This container contains the configuration (parameters) of all addressed LIN transceivers by
 *  each underlying LIN Transceiver Driver.
 */
typedef struct LinIf_TransceiverDrvConfigType_tag
{
/* True: Enabled
                                                        False: Disabled */
/* Selects whether wakeup indication notification is supported. */
	boolean LinIfTrcvWakeupNotification ;
/* Logical handle of the underlying LIN transceiver to be served by the LIN Interface. */
/* /AUTOSAR/EcucDefs/LinTrcv/LinTrcvChannel */
	LinTrcv_ChannelType* LinIfTrcvIdRef ;
} LinIf_TransceiverDrvConfigType ;

/* This parameter defines the upper layer (UL) module to which the confirmation of the goto-sleep
 *  command shall be sent.
 */
typedef enum
{
	LINIF_GOTOSLEEPCONFIRMATIONUL_CDD,
	LINIF_GOTOSLEEPCONFIRMATIONUL_LIN_SM
} LinIf_GotoSleepConfirmationULType ;

/* This parameter defines the upper layer (UL) module to which the confirmation of the successfully
 *  performed schedule table change.
 */
typedef enum
{
	LINIF_SCHEDULEREQUESTCONFIRMATIONUL_CDD,
	LINIF_SCHEDULEREQUESTCONFIRMATIONUL_LIN_SM
} LinIf_ScheduleRequestConfirmationULType ;

/* Defines the state of each LIN channel after startup */
typedef enum
{
	LINIF_STARTUPSTATE_NORMAL,
	LINIF_STARTUPSTATE_SLEEP
} LinIf_StartupStateType ;

/* This parameter defines the upper layer (UL) module to which the confirmation of the wake-up
 *  shall be sent.
 */
typedef enum
{
	LINIF_WAKEUPCONFIRMATIONUL_CDD,
	LINIF_WAKEUPCONFIRMATIONUL_LIN_SM
} LinIf_WakeupConfirmationULType ;

typedef struct LinIf_ChannelType_tag
{
	LinIf_FrameType* LinIfFrame ;
	LinIf_MasterType* LinIfMaster ;
	LinIf_ScheduleTableType* LinIfScheduleTable ;
	LinIf_SlaveType* LinIfSlave ;
	LinIf_TransceiverDrvConfigType* LinIfTransceiverDrvConfig ;
/* Implementation Type: NetworkHandleType */
/* This parameter holds the unique channel index value. The value shall be the same as the ComMChannelId
 *  of the ComMChannel referenced by LinIfComMNetworkHandleRef.
 */
	uint8 LinIfChannelId ;
	LinIf_GotoSleepConfirmationULType LinIfGotoSleepConfirmationUL ;
	LinIf_ScheduleRequestConfirmationULType LinIfScheduleRequestConfirmationUL ;
	LinIf_StartupStateType LinIfStartupState ;
	LinIf_WakeupConfirmationULType LinIfWakeupConfirmationUL ;
/* Reference to the used channel in Lin. */
/* Replaces LINIF_CHANNEL_INDEX */
/* /AUTOSAR/EcucDefs/Lin/LinGlobalConfig/LinChannel */
	Lin_ChannelType* LinIfChannelRef ;
/* Unique handle to identify one certain LIN network. Reference to one of the network handles configured
 *  for the ComM.
 */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel */
	ComM_ChannelType* LinIfComMNetworkHandleRef ;
} LinIf_ChannelType ;

typedef struct LinIf_GeneralType_tag
{
/* Global Pre-Compile Switch to reliably prevent the generation of the dummy LinIf_CancelTransmit
 *  API.
 */
	boolean LinIfCancelTransmitSupported ;
/* Switches the Development Error Detection and Notification ON or OFF. */
	boolean LinIfDevErrorDetect ;
/* States if multiple drivers are included in the LIN Interface or not. The reason for this parameter
 *  is to reduce the size of LIN Interface if multiple drivers are not used.
 */
	boolean LinIfMultipleDriversSupported ;
/* States if multiple transceiver drivers are included in the LIN Interface or not. The reason
 *  for this parameter is to reduce the size of LIN Interface if multiple transceiver drivers are
 *  not used.
 */
	boolean LinIfMultipleTrcvDriverSupported ;
/* States if the node configuration commands Assign NAD and Conditional Change NAD are supported. */
	boolean LinIfNcOptionalRequestSupported ;
/* Defines header files for callback functions which shall be included in case of CDDs. Range of
 *  characters is 1.. 32.
 */
	char* LinIfPublicCddHeaderFile ;
/* States if the TP is included in the LIN Interface or not. The reason for this parameter is to
 *  reduce the size of LIN Interface if the TP is not used.
 */
	boolean LinIfTpSupported ;
/* States if transceiver drivers are included in the LIN Interface or not. The reason for this
 *  parameter is to reduce the size of LIN Interface if transceiver drivers are not used.
 */
	boolean LinIfTrcvDriverSupported ;
/* Switches the LinIf_GetVersionInfo function ON or OFF. */
	boolean LinIfVersionInfoApi ;
} LinIf_GeneralType ;

/* This container contains the global configuration parameter of the LinIf. */
typedef struct LinIf_GlobalConfigType_tag
{
	LinIf_ChannelType* LinIfChannel ;
/* The delay between processing two frames is a multiple of the LIN Interface time-base in seconds. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 LinIfTimeBase ;
} LinIf_GlobalConfigType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* LINIF_TYPES_H */

