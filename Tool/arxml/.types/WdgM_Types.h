/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef WDGM_TYPES_H
#define WDGM_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct WdgM_DemEventParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when the defensive behavior checks
 *  have detected an improper caller.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* WDGM_E_IMPROPER_CALLER ;
/* Reference to the DemEventParameter which shall be issued when the error "Monitoring has failed
 *  and a watchdog reset will occur" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* WDGM_E_MONITORING ;
/* Reference to the DemEventParameter which shall be issued when the error "Watchdog drivers' mode
 *  switch has failed" has occured.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* WDGM_E_SET_MODE ;
} WdgM_DemEventParameterRefsType ;

/* This container collects all configuration parameters of Alive-Supervision of one Checkpoint.
 *  Note that each Checkpoint may have different parameters. For example, it may have different
 *  min and max margin.
 */
typedef struct WdgM_AliveSupervisionType_tag
{
/* This parameter contains the amount of expected alive indications of the Checkpoint within the
 *  referenced amount of defined supervision cycles according to corresponding SE.
 */
	uint16 WdgMExpectedAliveIndications ;
/* This parameter contains the amount of alive indications of the Checkpoint that are acceptable
 *  to be additional to the expected alive indications within the corresponding supervision reference
 *  cycle.
 */
	uint8 WdgMMaxMargin ;
/* This parameter contains the amount of alive indications of the Checkpoint that are acceptable
 *  to be missed from the expected alive indications within the corresponding supervision reference
 *  cycle.
 */
	uint8 WdgMMinMargin ;
/* This parameter shall contain the amount of supervision cycles to be used as reference by the
 *  alive-supervision mechanism to perform the checkup with counted alive indications according
 *  to corresponding SE.
 */
	uint16 WdgMSupervisionReferenceCycle ;
/* Reference to Checkpoint within a Supervised Entity that shall be supervised. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMAliveSupervisionCheckpointRef ;
} WdgM_AliveSupervisionType ;

/* This container collects all configuration parameters for Deadline Supervision for a Supervised
 *  Entity.
 */
typedef struct WdgM_DeadlineSupervisionType_tag
{
/* Unit: [s] */
/* This parameter contains the longest time span after which the deadline is considered to be met. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 WdgMDeadlineMax ;
/* Unit: [s] */
/* This parameter contains the shortest time span after which the deadline is considered to be met. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 WdgMDeadlineMin ;
/* This is the reference to the start Checkpoint for Deadline Supervision. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMDeadlineStartRef ;
/* This is the reference to the stop Checkpoint for Deadline Supervision. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMDeadlineStopRef ;
} WdgM_DeadlineSupervisionType ;

/* This container collects the Checkpoints for an External Transition across Supervised Entities. */
typedef struct WdgM_ExternalTransitionType_tag
{
/* This is the reference to the destination Checkpoint of an External Transition. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMExternalTransitionDestRef ;
/* This is the reference to the source Checkpoint of an External Transition. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMExternalTransitionSourceRef ;
} WdgM_ExternalTransitionType ;

/* This container collects all configuration parameters for Logical Supervision for one external
 *  graph.
 */
typedef struct WdgM_ExternalLogicalSupervisionType_tag
{
	WdgM_ExternalTransitionType* WdgMExternalTransition ;
/* This is the reference to the final Checkpoint(s) for this External Graph. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMExternalCheckpointFinalRef ;
/* This is the reference to the initial Checkpoint(s) for this External Graph. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMExternalCheckpointInitialRef ;
} WdgM_ExternalLogicalSupervisionType ;

/* This container collects all configuration parameters for the Local Status of a Supervised Entity. */
typedef struct WdgM_LocalStatusParamsType_tag
{
/* This parameter shall contain the acceptable amount of reference cycles with incorrect/failed
 *  alive supervisions for this Supervised Entity.
 */
	uint8 WdgMFailedAliveSupervisionRefCycleTol ;
/* This is the reference to the Supervised Entity for which the Local Status parameters are specified.
 */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity */
	WdgM_SupervisedEntityType* WdgMLocalStatusSupervisedEntityRef ;
} WdgM_LocalStatusParamsType ;

/* This parameter contains the watchdog mode that shall be used for the referenced watchdog in
 *  this Watchdog Manager mode.
 */
typedef enum
{
	WDGM_WATCHDOGMODE_WDGIF_FAST_MODE,
	WDGM_WATCHDOGMODE_WDGIF_OFF_MODE,
	WDGM_WATCHDOGMODE_WDGIF_SLOW_MODE
} WdgM_WatchdogModeType ;

/* This container collects all configuration parameters for the triggering of hardware watchdogs. */
typedef struct WdgM_TriggerType_tag
{
/* This parameter shall contain the value that is passed to WdgIf_SetTriggerCondition for this
 *  watchdog.
 */
	uint16 WdgMTriggerConditionValue ;
/* Implementation Type: WdgIf_ModeType */
	WdgM_WatchdogModeType WdgMWatchdogMode ;
/* This parameter is a reference to the configured watchdog. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMWatchdog */
	WdgM_WatchdogType* WdgMTriggerWatchdogRef ;
} WdgM_TriggerType ;

/* The container describes one of several modes of the Watchdog Manager. */
typedef struct WdgM_ModeType_tag
{
	WdgM_AliveSupervisionType* WdgMAliveSupervision ;
	WdgM_DeadlineSupervisionType* WdgMDeadlineSupervision ;
	WdgM_ExternalLogicalSupervisionType* WdgMExternalLogicalSupervision ;
	WdgM_LocalStatusParamsType* WdgMLocalStatusParams ;
	WdgM_TriggerType* WdgMTrigger ;
/* This parameter shall be used to define a value that fixes the amount of expired supervision
 *  cycles for how long the blocking of watchdog triggering shall be postponed, AFTER THE GLOBAL
 *  SUPERVISION STATUS HAS REACHED THE STATE EXPIRED.
 */
	uint16 WdgMExpiredSupervisionCycleTol ;
/* This parameter fixes the identfier for the mode. This identifier is for instance passed as a
 *  parameter to the WdgM_SetMode service.
 */
	uint8 WdgMModeId ;
/* Unit: [s] */
/* This parameter defines the schedule period of the main function WdgM_MainFunction. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 WdgMSupervisionCycle ;
} WdgM_ModeType ;

/* Contains the definition of valid CallerIds for the callers who have permission to call the function
 *  WdgM_SetMode.
 */
typedef struct WdgM_CallerIdsType_tag
{
/* This parameter defines one valid CallerId for the callers who have permission to call the function
 *  WdgM_SetMode.
 */
	uint16 WdgMCallerId ;
} WdgM_CallerIdsType ;

/* This container collects all Checkpoints of this Supervised Entity. Each Supervised Entity has
 *  at least one Checkpoint.
 */
typedef struct WdgM_CheckpointType_tag
{
/* This parameter shall contain the unique identifier of Checkpoint. */
	uint16 WdgMCheckpointId ;
} WdgM_CheckpointType ;

/* This container defines the graph of Internal Transitions within this Supervised Entity. */
typedef struct WdgM_InternalTransitionType_tag
{
/* This is the reference to the destination Checkpoint of a Internal Transition within this Supervised
 *  Entity.
 */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMInternalTransitionDestRef ;
/* This is the reference to the source Checkpoint of a Internal Transition within this Supervised
 *  Entity.
 */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMInternalTransitionSourceRef ;
} WdgM_InternalTransitionType ;

/* This container collects all common (mode-independent) parameters of a Supervised Entity to be
 *  supervised by the Watchdog Manager.
 */
typedef struct WdgM_SupervisedEntityType_tag
{
	WdgM_CheckpointType* WdgMCheckpoint ;
	WdgM_InternalTransitionType* WdgMInternalTransition ;
/* This parameter shall contain the unique identifier of the supervised entity. */
	uint16 WdgMSupervisedEntityId ;
/* Denotes in which "EcucPartition" the supervised entity is executed. When the partition is stopped,
 *  the supervised entity shall be de-activated in the WdgM to avoid an ECU reset.
 */
/* /AUTOSAR/EcucDefs/EcuC/EcucPartitionCollection/EcucPartition */
	EcuC_PartitionType* WdgMEcucPartitionRef ;
/* Optional reference to an OS Application. Beware, the Watchdog Manager module will trigger a
 *  partition restart of this OS Application when the corresponding Supervised Entity reaches WDGM_LOCAL_STATUS_FAILED.
 */
/* /AUTOSAR/EcucDefs/Os/OsApplication */
	Os_ApplicationType* WdgMOsApplicationRef ;
/* This is the reference to the initial Checkpoint for this Supervised Entity. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMInternalCheckpointInitialRef ;
/* This is the reference to the final Checkpoint(s) for this Supervised Entity. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMGeneral/WdgMSupervisedEntity/WdgMCheckpoint */
	WdgM_CheckpointType* WdgMInternallCheckpointFinalRef ;
} WdgM_SupervisedEntityType ;

/* This container collects all common (mode-independent) parameters of a Watchdog to be triggered
 *  by the Watchdog Manager.
 */
typedef struct WdgM_WatchdogType_tag
{
/* This parameter shall contain the symbolic name of the watchdog instance. */
	char* WdgMWatchdogName ;
/* Reference to one device container of Watchdog Interface. In the referenced container WdgIfDevice,
 *  the parameter WdgIfDeviceIndex contains the Index parameter that WdgM has to use for WdgIf_SetTriggerCondition
 *  calls for that watchdog instance.
 */
/* /AUTOSAR/EcucDefs/WdgIf/WdgIfDevice */
	WdgIf_DeviceType* WdgMWatchdogDeviceRef ;
} WdgM_WatchdogType ;

/* This container describes one of multiple configuration sets of WdgM. */
typedef struct WdgM_ConfigSetType_tag
{
	WdgM_DemEventParameterRefsType* WdgMDemEventParameterRefs ;
	WdgM_ModeType* WdgMMode ;
/* The mode that the Watchdog Manager is in after it has been initialized. */
/* /AUTOSAR/EcucDefs/WdgM/WdgMConfigSet/WdgMMode */
	WdgM_ModeType* WdgMInitialMode ;
} WdgM_ConfigSetType ;

/* Container defines all general configuration parameters of the Watchdog Manager. */
typedef struct WdgM_GeneralType_tag
{
	WdgM_CallerIdsType* WdgMCallerIds ;
	WdgM_SupervisedEntityType* WdgMSupervisedEntity ;
	WdgM_WatchdogType* WdgMWatchdog ;
/* Preprocessor switch to enable/disable the defensive behavior of the Watchdog Manager module. */
	boolean WdgMDefensiveBehavior ;
/* true: A notification to DEM is sent if the Watchdog Manager reaches the state WDGM_GLOBAL_STATUS_STOPPED.
 * 
 *                                         false: The notification is disabled.
 */
/* Parameter to enable/disable the error reporting to DEM. */
	boolean WdgMDemStoppedSupervisionReport ;
/* Shall be used to remove unneeded code segments regarding DET features
 * 
 *                                         true: Development error detection is enabled
 *                                         false: Development error detection is disabled
 */
/* Preprocessor switch to enable/disable development error detection and reporting. */
	boolean WdgMDevErrorDetect ;
/* true: Immediate reset is enabled
 *                                         false: Immediate reset is disabled
 */
/* This parameter enables/disablse the immediate reset feature in case of alive-supervision failure. */
	boolean WdgMImmediateReset ;
/* true: "OffMode" selection is allowed
 *                                         false: "OffMode" selection is disallowed
 */
/* This parameter enables/disables the selection of the "OffMode" of the watchdog driver. */
	boolean WdgMOffModeEnabled ;
/* true: API is enabled
                                        false: API is disabled */
/* Preprocessor switch to enable/disable the existence of the API WdgM_GetVersionInfo. Shall be
 *  used to remove unneeded code segments.
 */
	boolean WdgMVersionInfoApi ;
} WdgM_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* WDGM_TYPES_H */

