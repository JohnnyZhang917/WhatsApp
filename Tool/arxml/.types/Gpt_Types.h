/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef GPT_TYPES_H
#define GPT_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Function pointer to callback function (for non-wakeup notification). */
typedef struct Gpt_WakeupConfigurationType_tag
{
/* In case the wakeup-capability is true this value is transmitted to the Ecu State Manager. */
/* Implementation Type: reference to EcuM_WakeupSourceType */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource */
	EcuM_WakeupSourceType* GptWakeupSourceRef ;
} Gpt_WakeupConfigurationType ;

/* Specifies the behaviour of the timer channel after the target time is reached. */
typedef enum
{
	GPT_CH_MODE_CONTINUOUS,
	GPT_CH_MODE_ONESHOT
} Gpt_ChannelModeType ;

/* Function pointer to callback function (for non-wakeup notification) */
/* TODO: 
 * typedef void (*Gpt_NotificationType)(void);
 */

/* Configuration of an individual GPT channel. */
typedef struct Gpt_ChannelConfigurationType_tag
{
	Gpt_WakeupConfigurationType* GptWakeupConfiguration ;
/* Channel Id of the GPT channel. This value will be assigned to the symbolic name derived of the
 *  GptChannelConfiguration container short name.
 */
	uint32 GptChannelId ;
	Gpt_ChannelModeType GptChannelMode ;
/* Specifies the tick frequency of the timer channel in Hz. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 GptChannelTickFrequency ;
/* Maximum value in ticks, the timer channel is able to count. With the next tick, the timer rolls
 *  over to zero.
 */
	uint64 GptChannelTickValueMax ;
/* Enables wakeup capability of MCU for a channel. */
	boolean GptEnableWakeup ;
	Gpt_NotificationType GptNotification ;
/* Reference to the GptClockReferencePoint from which the channel */
/* clock is derived. */
/* /AUTOSAR/EcucDefs/Gpt/GptDriverConfiguration/GptClockReferencePoint */
	Gpt_ClockReferencePointType* GptChannelClkSrcRef ;
} Gpt_ChannelConfigurationType ;

/* This container contains a parameter, which represents a reference to a container of the type
 *  McuClockReferencePoint (defined in module MCU).
 */
typedef struct Gpt_ClockReferencePointType_tag
{
/* Reference to a container of the type McuClockReferencePoint, to select an input clock. */
/* The configuration editor for the GPT module can support the integrator by only allowing a selection
 *  of those clock reference points that can be connected physically to the GPT hardware peripheral.
 *                                                 The desired frequency (desired by GPT) has to
 *  be the same as the selected and provided frequency of the MCU configuration. This has to be
 *  checked automatically.
 */
/* /AUTOSAR/EcucDefs/Mcu/McuModuleConfiguration/McuClockSettingConfig/McuClockReferencePoint */
	Mcu_ClockReferencePointType* GptClockReference ;
} Gpt_ClockReferencePointType ;

/* This container is the base of a Configuration Set which contains the configured GPT channels.
 *  This way, different configuration sets can be defined for post-build process.
 */
typedef struct Gpt_ChannelConfigSetType_tag
{
	Gpt_ChannelConfigurationType* GptChannelConfiguration ;
} Gpt_ChannelConfigSetType ;

/* This container contains all configuration switches for configuring optional API services of
 *  the GPT driver.
 */
typedef struct Gpt_ConfigurationOfOptApiServicesType_tag
{
/* Adds / removes the service Gpt_DeInit() from the code. */
	boolean GptDeinitApi ;
/* Adds / removes the services Gpt_EnableNotification() and Gpt_DisableNotification from the code. */
	boolean GptEnableDisableNotificationApi ;
/* Adds / removes the service Gpt_GetTimeElapsed() from the code */
	boolean GptTimeElapsedApi ;
/* Adds / removes the service Gpt_GetTimeRemaining() from the code. */
	boolean GptTimeRemainingApi ;
/* Adds / removes the service Gpt_GetVersionInfo() from the code. */
	boolean GptVersionInfoApi ;
/* Adds / removes the services Gpt_SetMode(), Gpt_EnableWakeup() Gpt_DisableWakeup() and Gpt_CheckWakeup()
 *  from the code.
 */
	boolean GptWakeupFunctionalityApi ;
} Gpt_ConfigurationOfOptApiServicesType ;

/* This container contains the module-wide configuration (parameters) of the GPT Driver */
typedef struct Gpt_DriverConfigurationType_tag
{
/* A container is needed to support multiple clock references (hardware dependent). */
	Gpt_ClockReferencePointType* GptClockReferencePoint ;
/* Enables/Disables development error detection. */
	boolean GptDevErrorDetect ;
/* Enables/Disables wakeup source reporting. */
	boolean GptReportWakeupSource ;
} Gpt_DriverConfigurationType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* GPT_TYPES_H */

