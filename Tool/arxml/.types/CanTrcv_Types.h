/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef CANTRCV_TYPES_H
#define CANTRCV_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Container gives CanTrcv Driver information about access to a single CAN transceiver. */
typedef struct CanTrcv_AccessType_tag
{
} CanTrcv_AccessType ;

/* Defines data payload mask to be used on the received payload in order to determine if the transceiver
 *  must be woken up by the received Wake-up Frame (WUF).
 */
typedef struct CanTrcv_PnFrameDataMaskSpecType_tag
{
/* Defines the n byte (Byte0 = LSB) of the data payload mask to be used on the received payload
 *  in order to determine if the transceiver must be woken up by the received Wake-up Frame (WUF).
 */
	uint8 CanTrcvPnFrameDataMask ;
/* holds the position n in frame of the mask-part */
	uint8 CanTrcvPnFrameDataMaskIndex ;
} CanTrcv_PnFrameDataMaskSpecType ;

/* Container gives CAN transceiver driver information about the configuration of Partial Networking
 *  functionality.
 */
typedef struct CanTrcv_PartialNetworkType_tag
{
	CanTrcv_PnFrameDataMaskSpecType* CanTrcvPnFrameDataMaskSpec ;
/* Indicates the CAN Bus communication baud rate in kbps. */
	uint16 CanTrcvBaudRate ;
/* TRUE = Supported by transceiver and managed by BSW. 
 *                                                         FALSE = Not managed by BSW.
 */
/* Indicates if the Bus Error (BUSERR) flag is managed by the BSW. This flag is set if a bus failure
 *  is detected by the transceiver.
 */
	boolean CanTrcvBusErrFlag ;
/* TRUE = Extended Can identifier is used.
 *                                                         FALSE = Standard Can identifier is used
 */
/* Indicates whether extended or standard ID is used. */
	boolean CanTrcvPnCanIdIsExtended ;
/* TRUE = Selective wakeup feature is enabled in the  transceiver hardware
 *                                                         FALSE = Selective wakeup feature is
 *  disabled in the transceiver hardware
 */
/* Indicates whether the selective wake-up function is enabled or disabled in HW. */
	boolean CanTrcvPnEnabled ;
/* CAN ID of the Wake-up Frame (WUF). */
	uint32 CanTrcvPnFrameCanId ;
/* ID Mask for the selective activation of the transceiver. It is used to enableFrame Wake-up (WUF)
 *  on a group of IDs.
 */
	uint32 CanTrcvPnFrameCanIdMask ;
/* Data Length of the Wake-up Frame (WUF). */
	uint8 CanTrcvPnFrameDlc ;
/* TRUE = Supported by Hardware. 
 *                                                         FALSE = Not supported by Hardware
 */
/* Description: Indicates if the Power On Reset (POR) flag is available and is managed by the transceiver.
 */
	boolean CanTrcvPowerOnFlag ;
} CanTrcv_PartialNetworkType ;

/* State of CAN transceiver after call to CanTrcv_Init. */
typedef enum
{
	CANTRCV_OP_MODE_NORMAL,
	CANTRCV_OP_MODE_SLEEP,
	CANTRCV_OP_MODE_STANDBY
} CanTrcv_InitStateType ;

/* Container gives CAN transceiver driver information about a single CAN */
typedef struct CanTrcv_ChannelType_tag
{
	CanTrcv_AccessType* CanTrcvAccess ;
	CanTrcv_PartialNetworkType* CanTrcvPartialNetwork ;
/* Unique identifier of the CAN Transceiver Channel. */
	uint8 CanTrcvChannelId ;
/* Shall the related CAN transceiver channel be used? */
	boolean CanTrcvChannelUsed ;
/* TRUE = Controlled by transceiver.
 *                                                 FALSE = Not controlled by transceiver.
 */
/* Is ECU power supply controlled by this transceiver? */
	boolean CanTrcvControlsPowerSupply ;
/* TRUE = Selective wakeup feature is supported by the transceiver
 *                                                 FALSE = Selective wakeup functionality is not
 *  available in transceiver
 */
/* Indicates whether the HW supports the selective wake-up function */
	boolean CanTrcvHwPnSupport ;
	CanTrcv_InitStateType CanTrcvInitState ;
/* transceiver hardware type. */
/* Max baudrate for transceiver hardware type. Only used for validation purposes. Value shall be
 *  configured by configuration tool based on
 */
	uint16 CanTrcvMaxBaudrate ;
/* TRUE = Is used.
                                                FALSE = Is not used. */
/* Is wake up by bus supported? If CAN transceiver hardware does not support wake up by bus value
 *  is always FALSE. If CAN transceiver hardware supports wake up by bus value is TRUE or FALSE
 *  depending whether it is used or not.
 */
	boolean CanTrcvWakeupByBusUsed ;
/* Reference to a wakeup source in the EcuM configuration. */
/* This reference is only needed if CanTrcvWakeupByBusUsed is true. */
/* /AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource */
	EcuM_WakeupSourceType* CanTrcvWakeupSourceRef ;
} CanTrcv_ChannelType ;

/* Informs whether wake up is supported by polling or not supported. In case no */
typedef enum
{
	CANTRCV_WAKEUP_BY_POLLING,
	CANTRCV_WAKEUP_NOT_SUPPORTED
} CanTrcv_WakeUpSupportType ;

/* This is the multiple configuration set container for CAN Transceiver. */
typedef struct CanTrcv_ConfigSetType_tag
{
/* transceiver (channel). */
	CanTrcv_ChannelType* CanTrcvChannel ;
/* If configured value is '0', no retry is allowed (communication is expected to succeed at first
 *  try).
 */
/* Indicates the maximum number of communication retries in case of a failed SPI communication
 *  (applies both to timed out communication and to errors/NACK in the response data).
 */
	uint8 CanTrcvSPICommRetries ;
/* Timeout is configured in milliseconds. Timeout value of '0' means that no specific timeout is
 *  to be used by CanTrcv and the communication is executed at the best of the SPI HW capacity.
 */
/* Indicates the maximum time allowed to the CanTrcv for replying (either positively or negatively)
 *  to a SPI command.
 */
	uint8 CanTrcvSPICommTimeout ;
} CanTrcv_ConfigSetType ;

/* Container gives CAN transceiver driver basic information. */
typedef struct CanTrcv_GeneralType_tag
{
/* If switched on, #define CANTRCV_DEV _ERROR_DETECT ON shall be generated. If switched off, #define
 *  CANTRCV_DEV_ERROR _DETECT OFF shall be generated. Define shall be part of file CanTrcv_Cfg.h.
 */
/* Switches development error detection and notification on and off. */
	boolean CanTrcvDevErrorDetect ;
/* Switches version information API on and off. If switched off, function need not be present in
 *  compiled code.
 */
	boolean CanTrcvGetVersionInfo ;
/* (0 ... 255 times, 0 means no retry allowed, communication must succeed at first try) */
	uint8 CanTrcvSPICommRetries ;
/* (either positively or negatively) to a SPI command.
 * 
 *                                         (value in ms, 0ms means no specific timeout is to be
 *  used,
 *                                         communication is executed at the best of the SPI HW
 *  capacity)
 */
	uint8 CanTrcvSPICommTimeout ;
/* Indicates the number of wait states to change the transceiver operation mode. Transceiver hardware
 *  may need wait states for some transitions.
 */
	uint32 CanTrcvWaitCount ;
/* wake up is supported by the hardware, setting has to be NOT_SUPPORTED. Only in the case of wake
 *  up supported by polling, function CanTrcv_MainFunction has to be present and to be invoked
 *  by the scheduler.
 */
	CanTrcv_WakeUpSupportType CanTrcvWakeUpSupport ;
} CanTrcv_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* CANTRCV_TYPES_H */

