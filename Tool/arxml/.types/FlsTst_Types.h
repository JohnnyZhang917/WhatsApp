/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef FLSTST_TYPES_H
#define FLSTST_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* This is the configuration of the test algorithm for foreground mode and background mode. The
 *  availability of algorithm is implementation specific.
 */
typedef enum
{
	FLSTST_16BIT_CRC,
	FLSTST_32BIT_CRC,
	FLSTST_8BIT_CRC,
	FLSTST_CHECKSUM,
	FLSTST_DUPLICATED_MEMORY,
	FLSTST_ECC
} FlsTst_TestAlgorithmType ;

/* This container specifies configuration parameters for an individual test block. */
typedef struct FlsTst_BlockType_tag
{
/* Start Address of the Flash block. */
	uint64 FlsTstBlockBaseAddress ;
/* Background Test: The scheduling for background test shall follow an order defined by this index.
 *  '0' means highest priority.
 */
/* Foreground Test: Index identifies block to be tested by FlsTst_StartFgnd(); */
	uint32 FlsTstBlockIndex ;
/* This parameter shall represent the Flash Test block size. */
	uint32 FlsTstBlockSize ;
/* Configures the Number of cells to be tested in background mode during one scheduled task (FlsTst_MainFunction()
 *  call).
 */
	uint32 FlsTstNumberOfTestedCells ;
/* Address of the signature reference value of the Flash test block. */
	uint64 FlsTstSignatureAddress ;
	FlsTst_TestAlgorithmType FlsTstTestAlgorithm ;
} FlsTst_BlockType ;

/* This container defines the blocks in background mode. */
typedef struct FlsTst_BlockBgndConfigSetType_tag
{
	FlsTst_BlockType* FlsTstBlock ;
} FlsTst_BlockBgndConfigSetType ;

/* This container defines the blocks in foreground mode. */
typedef struct FlsTst_BlockFgndConfigSetType_tag
{
	FlsTst_BlockType* FlsTstBlock ;
} FlsTst_BlockFgndConfigSetType ;

/* Pointer to function, which shall be called after finishing the background Flash test interval. */
/* TODO: 
 * typedef void (*FlsTst_TestCompletedNotificationType)(void);
 */

/* Multiple Configuration Set Container */
typedef struct FlsTst_ConfigSetType_tag
{
	FlsTst_BlockBgndConfigSetType* FlsTstBlockBgndConfigSet ;
	FlsTst_BlockFgndConfigSetType* FlsTstBlockFgndConfigSet ;
/* calculationFormula = Number of configured FlsTstBlocks in the FlsTstBlockBgndConfigSet (or 0
 *  if no FlsTstBlocks are configured).
 */
/* This parameter shall represent the number of test blocks available for the background test. */
	uint32 FlsTstBlockNumberBgnd ;
/* calculationFormula = Number of configured FlsTstBlocks in the FlsTstBlockFgndConfigSet (or 0
 *  if no FlsTstBlocks are configured).
 */
/* This parameter shall represent the number of test blocks available for the foreground test. */
	uint32 FlsTstBlockNumberFgnd ;
	FlsTst_TestCompletedNotificationType FlsTstTestCompletedNotification ;
} FlsTst_ConfigSetType ;

typedef struct FlsTst_ConfigurationOfOptApiServicesType_tag
{
/* Adds / removes the service FlsTst_GetCurrentState() from the code. */
	boolean FlsTstGetCurrentStateApi ;
/* Adds / removes the service FlsTst_GetErrorDetails() from the code. */
	boolean FlsTstGetErrorDetailsApi ;
/* Adds / removes the service FlsTst_GetTestResultBgnd() from the code. */
	boolean FlsTstGetTestResultBgndApi ;
/* Adds / removes the service FlsTst_GetTestResultFgnd() from the code. */
	boolean FlsTstGetTestResultFgndApi ;
/* Adds / removes the service FlsTst_GetTestSignatureBgnd() from the code. */
	boolean FlsTstGetTestSignatureBgndApi ;
/* Adds / removes the service FlsTst_GetTestSignatureFgnd() from the code. */
	boolean FlsTstGetTestSignatureFgndApi ;
/* Adds / removes the service FlsTst_StartFgnd() from the code. */
	boolean FlsTstStartFgndApi ;
/* Adds / removes the services FlsTst_Suspend() and FlsTst_Resume() from the code. */
	boolean FlsTstSuspendResumeApi ;
/* Adds / removes the service FlsTst_TestEcc() from the code. */
	boolean FlsTstTestEccApi ;
/* Adds / removes the service FlsTst_GetVersionInfo() from the code. */
	boolean FlsTstVersionInfoApi ;
} FlsTst_ConfigurationOfOptApiServicesType ;

/* Container for the references to DemEventParameter elements which shall be invoked using the
 *  API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken
 *  from the referenced DemEventParameter's DemEventId value. The standardized errors are provided
 *  in the container and can be extended by vendor specific error references.
 */
typedef struct FlsTst_DemEventParameterRefsType_tag
{
/* Reference to the DemEventParameter which shall be issued when the error "Flash Failure" has
 *  occurred.
 */
/* /AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter */
	Dem_EventParameterType* FLSTST_E_FLSTST_FAILURE ;
} FlsTst_DemEventParameterRefsType ;

typedef struct FlsTst_GeneralType_tag
{
/* Switch for enabling the development error detection. */
	boolean FlsTstDevErrorDetect ;
/* Configures the Number of cells to be tested in background mode without checking user requests
 *  (Abort, Suspend).
 */
	uint32 FlsTstNumberOfTestedCellsAtomic ;
/* Switch to indicate that the notification is supported. */
	boolean FlsTstTestCompletedNotificationSupported ;
/* Defines the end value of the Test Interval Id. */
	uint32 FlsTstTestIntervalIdEndValue ;
/* True: Test Result is a signature (see FlsTst155, FlsTst054)
 *                                         False: Test Result is ok/not ok (see FlsTst153, FlsTst042)
 */
/* Configures the result of the test in background mode: */
	boolean FlsTstTestResultSignature ;
} FlsTst_GeneralType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* FLSTST_TYPES_H */

