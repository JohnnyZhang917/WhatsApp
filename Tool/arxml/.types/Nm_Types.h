/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef NM_TYPES_H
#define NM_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
typedef struct Nm_BusTypeType_tag
{
} Nm_BusTypeType ;

typedef struct Nm_GlobalConstantsType_tag
{
/* Number of NM channels allowed within one ECU. */
	uint8 NmNumberOfChannels ;
} Nm_GlobalConstantsType ;

/* Name of the callback function to be called if Nm_CarWakeUpIndication() is called. */
/* TODO: 
 * typedef void (*Nm_CarWakeUpCallbackType)(void);
 */

typedef struct Nm_GlobalFeaturesType_tag
{
/* Pre-processor switch for enabling bus synchronization support of the <BusNm>s. This feature
 *  is required for NM Coordinator nodes only.
 */
	boolean NmBusSynchronizationEnabled ;
	Nm_CarWakeUpCallbackType NmCarWakeUpCallback ;
/* FALSE - CarWakeUp not supported
 *                                                 TRUE - CarWakeUp supported
 */
/* Enables or disables CWU detection. */
	boolean NmCarWakeUpRxEnabled ;
/* Pre-processor switch for enabling the Communication Control support. */
	boolean NmComControlEnabled ;
/* Enable/Disable setting of NMUserData via SW-C. If NmComUserDataSupport is enabled the API Nm_SetUserData
 *  shall not be available.
 */
	boolean NmComUserDataSupport ;
/* Pre-processor switch for enabling NM Coordinator support. */
	boolean NmCoordinatorSupportEnabled ;
/* Note:This includes nested connections. */
/* This parameter defines the maximum shutdown time of a connected and coordinated NM-Cluster. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 NmGlobalCoordinatorTime ;
/* Pre-processor switch for enabling the Node Detection feature. */
	boolean NmNodeDetectionEnabled ;
/* Pre-processor switch for enabling transmission of the source node identifier in NM messages. */
	boolean NmNodeIdEnabled ;
/* Pre-processor switch for enabling the PDU Rx Indication. */
	boolean NmPduRxIndicationEnabled ;
/* Pre-processor switch for enabling Remote Sleep Indication support. This feature is required
 *  for NM Coordinator nodes only.
 */
	boolean NmRemoteSleepIndEnabled ;
/* Pre-processor switch for enabling the Repeat Message Bit Indication. */
	boolean NmRepeatMsgIndEnabled ;
/* Pre-processor switch for enabling the Network Management state change notification. */
	boolean NmStateChangeIndEnabled ;
/* Pre-processor switch for enabling User Data support. */
	boolean NmUserDataEnabled ;
} Nm_GlobalFeaturesType ;

typedef struct Nm_GlobalPropertiesType_tag
{
/* The period between successive calls to the Main Function of the NM Interface in seconds. */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 NmCycletimeMainFunction ;
/* Pre-processor switch for enabling development error detection and notification. */
	boolean NmDevErrorDetect ;
/* Pre-processor switch for enabling Version Info API support. */
	boolean NmVersionInfoApi ;
} Nm_GlobalPropertiesType ;

/* This container contains the configuration (parameters) of the bus channel(s). The channel parameter
 *  shall be harmonized within the whole communication stack.
 */
typedef struct Nm_ChannelConfigType_tag
{
	Nm_BusTypeType* NmBusType ;
/* This parameter indicates whether a NM Coordinator is an active gateway (NmActiveCoordinator
 *  = TRUE) or a passive.
 */
	boolean NmActiveCoordinator ;
/* Implementation Type: NetworkHandleType */
/* This parameter holds the unique channel index value. The value shall be the same as the ComMChannelId
 *  of the ComMChannel referenced by NmComMChannelRef.
 */
	uint8 NmChannelId ;
/* If this parameter is set to TRUE, the Nm shall assume that the channel is always ready to go
 *  to sleep and that no callouts to Nm_RemoteSleepIndication or Nm_RemoteSleepCancellation will
 *  be made from the <BusNm> representing this channel.
 * 
 *                                         If this parameter is set to FALSE, the Nm shall not
 *  assume that the network is ready to sleep until a callout has been made to Nm_RemoteSleepCancellation.
 */
/* This parameter shall be set to indicate if the sleep of this network can be absolutely decided
 *  by the local node only and that no other nodes can oppose that decision.
 */
	boolean NmChannelSleepMaster ;
/* If this parameter is undefined for a channel, the corresponding bus does not belong to an NM
 *  coordination cluster.
 */
	uint8 NmCoordClusterIndex ;
/* Pre-processor switch for enabling support of Passive Mode of the <BusNm>s. */
	boolean NmPassiveModeEnabled ;
/* This parameter defines the time in seconds which the NM Coordination algorithm shall delay the
 *  release of this channel with.
 */
/* in fact, it should be type <float> according to arxml, but only supported in tool side*/
	uint64 NmShutdownDelayTimer ;
/* false: No NMS shall be set
                                        true: The NMS shall be set */
/* Specifies if the NMS shall be set for the corresponding network. */
	boolean NmStateReportEnabled ;
/* If this parameter is true, then this network is a synchronizing network for the NM coordination
 *  cluster which it belongs to. The network is expected to call Nm_SynchronizationPoint() at regular
 *  intervals.
 */
	boolean NmSynchronizingNetwork ;
/* Reference to the corresponding ComM Channel. */
/* /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel */
	ComM_ChannelType* NmComMChannelRef ;
/* Reference to the signal for setting the NMS by calling Com_SendSignal for the respective channel. */
/* /AUTOSAR/EcucDefs/Com/ComConfig/ComSignal */
	Com_SignalType* NmStateReportSignalRef ;
} Nm_ChannelConfigType ;

/* This container contains all global configuration parameters of the Nm Interface. */
typedef struct Nm_GlobalConfigType_tag
{
	Nm_GlobalConstantsType* NmGlobalConstants ;
	Nm_GlobalFeaturesType* NmGlobalFeatures ;
	Nm_GlobalPropertiesType* NmGlobalProperties ;
} Nm_GlobalConfigType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* NM_TYPES_H */

