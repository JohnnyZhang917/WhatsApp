/**
 * WhatsApp - the open source AUTOSAR platform https://github.com/parai
 *
 * Copyright (C) 2014  WhatsApp <parai@foxmail.com>
 *
 * This source code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation; See <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * Version: AUTOSAR 4.2.0
 * Generated by arxml.py
 */
#ifndef DBG_TYPES_H
#define DBG_TYPES_H

/* ============================ [ INCLUDES  ] ====================================================== */
#include "Std_Types.h"
#ifdef __cplusplus
namespace autosar {
extern "C" {
#endif
/* ============================ [ MACROS    ] ====================================================== */
/* ============================ [ TYPES     ] ====================================================== */
/* Strategy of buffer operations when it is full: overwrite oldest entries or stop the storage. */
typedef enum
{
	DBG_BUFFERSTRATEGY_OVERWRITEOLDESTENTRIES,
	DBG_BUFFERSTRATEGY_STOPSTORAGE
} Dbg_BufferStrategyType ;

/* Automatic or requested transmission of the buffer. */
typedef enum
{
	DBG_BUFFERTRANSMISSION_STARTAFTERINITIALIZATION,
	DBG_BUFFERTRANSMISSION_STARTONHOSTREQUEST
} Dbg_BufferTransmissionType ;

/* This container holds configuration parameters for the receive-pdu. */
typedef struct Dbg_RxPduType_tag
{
/* The existence of this parameter is essential for the PduR generation tool to actually find a
 *  symbolicNameValue for the RxPdu.
 */
/* Handle Id to be used by the PduR to indicate the reception of the DbgRxPdu to the Dbg module.
 *  The actual value of this parameter is fixed to 0 since there is only one RxPdu for the Dbg
 *  module.
 */
	uint16 DbgRxPduId ;
/* Reference to the receive I-PDU. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* DbgReceiveIPduRef ;
} Dbg_RxPduType ;

/* This container holds configuration parameters for the transmit-pdu. */
typedef struct Dbg_TxPduType_tag
{
/* The existence of this parameter is essential for the PduR generation tool to actually find a
 *  symbolicNameValue for the TxPdu.
 */
/* Handle Id to be used by the PduR to confirm the transmission of the DbgTxPdu to the Dbg module.
 *  The actual value of this parameter is fixed to 0 since there is only one TxPdu for the Dbg
 *  module.
 */
	uint16 DbgTxConfirmationPduId ;
/* Reference to the send I-PDU. */
/* /AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu */
	EcuC_PduType* DbgSendIPduRef ;
} Dbg_TxPduType ;

/* Additional information in case the Predefined DID needs further configuration parameters. */
typedef struct Dbg_PredefinedDIDAddInfoType_tag
{
} Dbg_PredefinedDIDAddInfoType ;

/* List of possible names for predefined DIDs. */
typedef enum
{
	DBG_POSTTASKHOOK,
	DBG_PRETASKHOOK,
	DBG_TRACEDETCALL,
	DBG_TRACEFUNCTIONENTRY,
	DBG_TRACEFUNCTIONEXIT,
	DBG_TRACERTECALL,
	DBG_TRACERTECOMCALLBACK,
	DBG_TRACERTECOMSIGNALIV,
	DBG_TRACERTECOMSIGNALRX,
	DBG_TRACERTECOMSIGNALTX,
	DBG_TRACERTEVFBSIGNALRECEIVE,
	DBG_TRACERTEVFBSIGNALSEND,
	DBG_TRACERUNNABLESTART,
	DBG_TRACERUNNABLETERMINATION,
	DBG_TRACETIMESTAMPS
} Dbg_PredefinedDIDNameType ;

/* This container holds all configuration parameters for predefined DIDs. For predefined DIDs,
 *  only certain values can be changed.
 */
typedef struct Dbg_PredefinedDIDType_tag
{
	Dbg_PredefinedDIDAddInfoType* DbgPredefinedDIDAddInfo ;
/* true: DIDOn.
                                                false: DIDOff. */
/* Activation or not of the DID for debugging. */
	boolean DbgPredefinedDIDActivation ;
/* true: BufferingOn.
                                                false: BufferingOff. */
/* Buffer the data or transmit directly. */
	boolean DbgPredefinedDIDBuffering ;
	Dbg_PredefinedDIDNameType DbgPredefinedDIDName ;
/* true: TimeStampOn.
                                                false: TimeStampOff. */
/* Using or not of time stamp. */
	boolean DbgPredefinedDIDTimeStampActivation ;
} Dbg_PredefinedDIDType ;

/* Choice how the DID is to be configured. */
typedef struct Dbg_StaticDIDDataType_tag
{
} Dbg_StaticDIDDataType ;

/* This container holds all configuration parameters for static DIDs. For predefined DIDs, only
 *  certain values can be changed.
 */
typedef struct Dbg_StaticDIDType_tag
{
	Dbg_StaticDIDDataType* DbgStaticDIDData ;
/* Cycle time of collection in DataCollectionTicks. A value of "0" indicates that the collection
 *  takes place only on request.
 */
	uint16 DbgAutomaticCollectionFrequency ;
/* true: DIDOn.
                                                false: DIDOff. */
/* Activation or not of the DID for debugging. */
	boolean DbgStaticDIDActivation ;
/* true: BufferingOn.
                                                false: BufferingOff. */
/* Buffer the data or transmit directly. */
	boolean DbgStaticDIDBuffering ;
/* Name of the DID, translated by the configuration/generation tool into consecutive DID numbers
 *  starting from 0.
 */
	char* DbgStaticDIDNameRef ;
/* true: TimeStampOn.
                                                false: TimeStampOff. */
/* Using or not of time stamp. */
	boolean DbgStaticTimeStampActivation ;
} Dbg_StaticDIDType ;

/* Initial value for timestamp collection. */
typedef enum
{
	DBG_GLOBALTIMESTAMPACTIVATION_TIMESTAMPOFF,
	DBG_GLOBALTIMESTAMPACTIVATION_TIMESTAMPON
} Dbg_GlobalTimestampActivationType ;

/* Memory size used for the time stamps of all DIDs. */
typedef enum
{
	DBG_TIMESTAMPSIZE_TIMESTAMPSIZE_16BIT,
	DBG_TIMESTAMPSIZE_TIMESTAMPSIZE_32BIT
} Dbg_TimeStampSizeType ;

/* This container holds the parameters to manage the storage of debugging data in RAM. */
typedef struct Dbg_BufferingType_tag
{
/* Size in bytes of the RAM for the ring buffer. A size of 0 means that no buffer exists. All data
 *  records are directly transferred.
 */
	uint16 DbgBufferSize ;
	Dbg_BufferStrategyType DbgBufferStrategy ;
	Dbg_BufferTransmissionType DbgBufferTransmission ;
} Dbg_BufferingType ;

/* This container holds all configuration parameters for communication. */
typedef struct Dbg_CommunicationType_tag
{
	Dbg_RxPduType* DbgRxPdu ;
	Dbg_TxPduType* DbgTxPdu ;
} Dbg_CommunicationType ;

/* This container holds the general parameters of the debugging module. */
typedef struct Dbg_GeneralType_tag
{
/* Enables/Disables development error detection. */
	boolean DbgDevErrorDetect ;
/* Name of the header file(s) to be included by the Dbg module. */
	char* DbgHeaderFileInclusion ;
/* Activate/Deactivate the version information API (Dbg_GetVersionInfo). True: version information
 *  API activated False: version information API deactivated.
 */
	boolean DbgVersionInfoApi ;
} Dbg_GeneralType ;

typedef struct Dbg_MultipleConfigurationContainerType_tag
{
	Dbg_PredefinedDIDType* DbgPredefinedDID ;
	Dbg_StaticDIDType* DbgStaticDID ;
/* The sum of MaxStaticDID and MaxDynamicDID must not exceed 200. Dynamic DIDs are MaxStaticDID
 *  based and consecutive.
 */
/* Maximum number of dynamic DIDs. This value is only needed to reserve memory for dynamic DIDs
 *  added by the host at runtime. If this parameter is not supplied it is automatically set to
 *  the configured number of static DIDs.
 */
	uint8 DbgMaxDynamicDID ;
/* Maximum number of static DIDs. This value is only needed to reserve memory for static DIDs added
 *  at post-build time. If this parameter is not supplied it is automatically set to the configured
 *  number of static DIDs. Static DIDs are zero based and consecutive.
 */
	uint8 DbgMaxStaticDID ;
} Dbg_MultipleConfigurationContainerType ;

/* This container holds the parameters to manage the time base of the debugging module. */
typedef struct Dbg_PeriodicDataCollectionType_tag
{
/* Number of OS counter ticks to be used as data collection tick. The OS alarm used for periodic
 *  collection of DIDs is set with this value.
 */
	uint32 DbgDataCollectionTick ;
/* Reference to the OS alarm used for periodic collection of DIDs. */
/* /AUTOSAR/EcucDefs/Os/OsAlarm */
	Os_AlarmType* DbgAlarmReference ;
} Dbg_PeriodicDataCollectionType ;

/* This container holds the parameters to manage the time stamps of the debugging module. */
typedef struct Dbg_TimestampConfigurationType_tag
{
	Dbg_GlobalTimestampActivationType DbgGlobalTimestampActivation ;
	Dbg_TimeStampSizeType DbgTimeStampSize ;
/* Reference to the hardware free running timer of the GPT module for time stamps (if no HWFRT
 *  is applied, calls to add timestamps are ignored)
 */
/* /AUTOSAR/EcucDefs/Gpt/GptChannelConfigSet/GptChannelConfiguration */
	Gpt_ChannelConfigurationType* DbgGptChannel ;
} Dbg_TimestampConfigurationType ;

/* ============================ [ DATAS     ] ====================================================== */
/* ============================ [ DECLARES  ] ====================================================== */
/* ============================ [ LOCALS    ] ====================================================== */
/* ============================ [ FUNCTIONS ] ====================================================== */
#ifdef __cplusplus
}}  /* name space */
#endif
#endif /* DBG_TYPES_H */

